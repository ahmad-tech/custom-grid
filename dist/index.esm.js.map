{"version":3,"file":"index.esm.js","sources":["../src/lib/utils.ts","../src/components/ui/table.tsx","../src/components/ui/checkbox.tsx","../src/components/ui/input.tsx","../src/components/ui/select.tsx","../src/components/ui/button.tsx","../src/components/ui/popover.tsx","../src/components/ui/scroll-area.tsx","../src/components/datetime-picker.tsx","../src/components/simple-time-picker.tsx","../node_modules/.pnpm/react-hook-form@7.56.4_react@19.1.0/node_modules/react-hook-form/dist/index.esm.mjs","../src/components/ui/tooltip.tsx","../src/components/datetime-input.tsx","../src/components/Grid/CellEditor.tsx","../src/components/ui/switch.tsx","../src/components/Grid/useCookedData.tsx","../src/components/Grid/CellFilter.tsx","../src/components/Grid/ServerPagination.tsx","../src/components/Grid/GroupPanel.tsx","../src/components/Grid/ColumnSidebar.tsx","../src/components/Grid/PivotPanel.tsx","../src/lib/pivot.utils.ts","../src/lib/tree-data.util.ts","../src/components/Grid/index.tsx"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nimport { debounce } from \"lodash\";\n\n/**\n * Combines multiple class names and merges Tailwind CSS classes\n * @param inputs - Class names to combine\n * @returns Merged class string\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Creates a debounced function that delays invoking func until after wait milliseconds\n * @param func The function to debounce\n * @param wait The number of milliseconds to delay\n * @returns A debounced version of the function\n */\nexport const createDebouncedFunction = <T extends (...args: any[]) => any>(\n  func: T,\n  wait = 300\n) => {\n  return debounce(func, wait);\n};\n\n/**\n * Formats a date to a string\n * @param date The date to format\n * @returns Formatted date string\n */\nexport const formatDate = (date: Date): string => {\n  return date.toLocaleDateString();\n};\n\n/**\n * Checks if a value is empty (null, undefined, empty string, or empty array)\n * @param value The value to check\n * @returns True if the value is empty\n */\nexport const isEmpty = (value: any): boolean => {\n  if (value === null || value === undefined) return true;\n  if (typeof value === 'string') return value.trim().length === 0;\n  if (Array.isArray(value)) return value.length === 0;\n  return false;\n};\n","import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div data-slot=\"table-container\" className=\"relative w-full h-[100%]\">\n    <table\n      ref={ref}\n      data-slot=\"table\"\n      className={cn(\"w-full caption-bottom text-sm h-[100%]\", className)}\n      {...props}\n    />\n  </div>\n));\nTable.displayName = \"Table\";\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead\n    ref={ref}\n    data-slot=\"table-header\"\n    className={cn(\"[&_tr]:border-b\", className)}\n    {...props}\n  />\n));\nTableHeader.displayName = \"TableHeader\";\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    data-slot=\"table-body\"\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n));\nTableBody.displayName = \"TableBody\";\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    data-slot=\"table-footer\"\n    className={cn(\n      \"bg-muted/50 border-t font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n));\nTableFooter.displayName = \"TableFooter\";\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    data-slot=\"table-row\"\n    className={cn(\n      \"data-[state=selected]:bg-muted border-b border-gray-200 transition-colors\",\n      className\n    )}\n    {...props}\n  />\n));\nTableRow.displayName = \"TableRow\";\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    data-slot=\"table-head\"\n    className={cn(\n      \"text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n));\nTableHead.displayName = \"TableHead\";\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    data-slot=\"table-cell\"\n    className={cn(\n      \"p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n));\nTableCell.displayName = \"TableCell\";\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    data-slot=\"table-caption\"\n    className={cn(\"text-muted-foreground mt-4 text-sm\", className)}\n    {...props}\n  />\n));\nTableCaption.displayName = \"TableCaption\";\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n};\n","import * as React from \"react\";\r\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\";\r\nimport { CheckIcon } from \"lucide-react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface CheckboxProps\r\n  extends React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root> {\r\n  className?: string;\r\n}\r\n\r\nfunction Checkbox({ className, ...props }: CheckboxProps) {\r\n  return (\r\n    <CheckboxPrimitive.Root\r\n      data-slot=\"checkbox\"\r\n      className={cn(\r\n        \"peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      <CheckboxPrimitive.Indicator\r\n        data-slot=\"checkbox-indicator\"\r\n        className=\"flex items-center justify-center text-current transition-none\"\r\n      >\r\n        <CheckIcon className=\"size-3.5\" />\r\n      </CheckboxPrimitive.Indicator>\r\n    </CheckboxPrimitive.Root>\r\n  );\r\n}\r\n\r\nexport { Checkbox };\r\n","import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ntype InputProps = React.InputHTMLAttributes<HTMLInputElement>;\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type = \"text\", ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        ref={ref}\n        data-slot=\"input\"\n        className={cn(\n          \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          \"focus-visible:ring-[1px]\",\n          \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n          className\n        )}\n        {...props}\n      />\n    );\n  }\n);\n\nInput.displayName = \"Input\";\n\nexport { Input };\n","import * as React from \"react\";\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\n// Root\nfunction Select(\n  props: React.ComponentPropsWithoutRef<typeof SelectPrimitive.Root>\n) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />;\n}\n\n// Group\nfunction SelectGroup(\n  props: React.ComponentPropsWithoutRef<typeof SelectPrimitive.Group>\n) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />;\n}\n\n// Value\nfunction SelectValue(\n  props: React.ComponentPropsWithoutRef<typeof SelectPrimitive.Value>\n) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />;\n}\n\n// Trigger\ninterface SelectTriggerProps\n  extends React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger> {\n  className?: string;\n  size?: \"default\" | \"sm\";\n  children?: React.ReactNode;\n}\n\nfunction SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: SelectTriggerProps) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  );\n}\n\n// Content\ninterface SelectContentProps\n  extends React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content> {\n  className?: string;\n  children?: React.ReactNode;\n  position?: \"item-aligned\" | \"popper\";\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: SelectContentProps) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  );\n}\n\n// Label\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  );\n}\n\n// Item\ninterface SelectItemProps\n  extends React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item> {\n  className?: string;\n  children?: React.ReactNode;\n}\n\nfunction SelectItem({ className, children, ...props }: SelectItemProps) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  );\n}\n\n// Separator\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  );\n}\n\n// Scroll Up\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  );\n}\n\n// Scroll Down\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  );\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n};\n","import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants } ","import * as React from \"react\";\r\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\n// Popover Root\r\nfunction Popover(props: PopoverPrimitive.PopoverProps) {\r\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />;\r\n}\r\n\r\n// Popover Trigger\r\nfunction PopoverTrigger(props: PopoverPrimitive.PopoverTriggerProps) {\r\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />;\r\n}\r\n\r\n// Popover Content\r\ninterface PopoverContentProps extends PopoverPrimitive.PopoverContentProps {\r\n  className?: string;\r\n  align?: PopoverPrimitive.PopoverContentProps[\"align\"];\r\n  sideOffset?: number;\r\n}\r\n\r\nfunction PopoverContent({\r\n  className,\r\n  align = \"center\",\r\n  sideOffset = 4,\r\n  ...props\r\n}: PopoverContentProps) {\r\n  return (\r\n    <PopoverPrimitive.Portal>\r\n      <PopoverPrimitive.Content\r\n        data-slot=\"popover-content\"\r\n        align={align}\r\n        sideOffset={sideOffset}\r\n        className={cn(\r\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\r\n          className\r\n        )}\r\n        {...props}\r\n      />\r\n    </PopoverPrimitive.Portal>\r\n  );\r\n}\r\n\r\n// Popover Anchor\r\nfunction PopoverAnchor(props: PopoverPrimitive.PopoverAnchorProps) {\r\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />;\r\n}\r\n\r\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor };\r\n","import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\nimport { cn } from \"@/lib/utils\"\n\n// ⬅️ Move ScrollBar component first\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\n// ⬇️ ScrollArea defined after ScrollBar\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nexport { ScrollArea, ScrollBar }\n","import * as React from \"react\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { Calendar as CalendarIcon } from \"lucide-react\";\nimport {\n  endOfHour,\n  endOfMinute,\n  format,\n  parse,\n  getMonth,\n  getYear,\n  setHours,\n  setMinutes,\n  setMonth as setMonthFns,\n  setSeconds,\n  setYear,\n  startOfHour,\n  startOfMinute,\n  startOfYear,\n  startOfMonth,\n  endOfMonth,\n  endOfYear,\n  addMonths,\n  subMonths,\n  setMilliseconds,\n  addHours,\n  subHours,\n  startOfDay,\n  endOfDay,\n} from \"date-fns\";\nimport {\n  CheckIcon,\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  ChevronUpIcon,\n  Clock,\n  XCircle,\n} from \"lucide-react\";\nimport { DayPicker, Matcher, TZDate } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button, buttonVariants } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\nexport type CalendarProps = Omit<\n  React.ComponentProps<typeof DayPicker>,\n  \"mode\"\n>;\n\nconst AM_VALUE = 0;\nconst PM_VALUE = 1;\n\nexport type DateTimePickerProps = {\n  /**\n   * The modality of the popover. When set to true, interaction with outside elements will be disabled and only popover content will be visible to screen readers.\n   * If you want to use the datetime picker inside a dialog, you should set this to true.\n   * @default false\n   */\n  modal?: boolean;\n  /**\n   * The datetime value to display and control.\n   */\n  value: Date | undefined;\n  /**\n   * Callback function to handle datetime changes.\n   */\n  onChange: (date: Date | undefined) => void;\n  /**\n   * The minimum datetime value allowed.\n   * @default undefined\n   */\n  min?: Date;\n  /**\n   * The maximum datetime value allowed.\n   */\n  max?: Date;\n  /**\n   * The timezone to display the datetime in, based on the date-fns.\n   * For a complete list of valid time zone identifiers, refer to:\n   * https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n   * @default undefined\n   */\n  timezone?: string;\n  /**\n   * Whether the datetime picker is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * Whether to show the time picker.\n   * @default false\n   */\n  hideTime?: boolean;\n  /**\n   * Whether to use 12-hour format.\n   * @default false\n   */\n  use12HourFormat?: boolean;\n  /**\n   * Whether to show the clear button.\n   * @default false\n   */\n  clearable?: boolean;\n  /**\n   * Custom class names for the component.\n   */\n  classNames?: {\n    /**\n     * Custom class names for the trigger (the button that opens the picker).\n     */\n    trigger?: string;\n  };\n  timePicker?: {\n    hour?: boolean;\n    minute?: boolean;\n    second?: boolean;\n  };\n  /**\n   * Custom render function for the trigger.\n   */\n  renderTrigger?: (props: DateTimeRenderTriggerProps) => React.ReactNode;\n};\n\nexport type DateTimeRenderTriggerProps = {\n  value: Date | undefined;\n  open: boolean;\n  timezone?: string;\n  disabled?: boolean;\n  use12HourFormat?: boolean;\n  setOpen: (open: boolean) => void;\n};\n\nexport function DateTimePicker({\n  value,\n  onChange,\n  renderTrigger,\n  min,\n  max,\n  timezone,\n  hideTime,\n  use12HourFormat,\n  disabled,\n  clearable,\n  classNames,\n  timePicker,\n  modal = false,\n  ...props\n}: DateTimePickerProps & CalendarProps) {\n  const [open, setOpen] = useState(false);\n  const [monthYearPicker, setMonthYearPicker] = useState<\n    \"month\" | \"year\" | false\n  >(false);\n  const initDate = useMemo(\n    () => new TZDate(value || new Date(), timezone),\n    [value, timezone]\n  );\n\n  const [month, setMonth] = useState<Date>(initDate);\n  const [date, setDate] = useState<Date>(initDate);\n\n  const endMonth = useMemo(() => {\n    return setYear(month, getYear(month) + 1);\n  }, [month]);\n  const minDate = useMemo(\n    () => (min ? new TZDate(min, timezone) : undefined),\n    [min, timezone]\n  );\n  const maxDate = useMemo(\n    () => (max ? new TZDate(max, timezone) : undefined),\n    [max, timezone]\n  );\n\n  const onDayChanged = useCallback(\n    (d: Date) => {\n      d.setHours(date.getHours(), date.getMinutes(), date.getSeconds());\n      if (min && d < min) {\n        d.setHours(min.getHours(), min.getMinutes(), min.getSeconds());\n      }\n      if (max && d > max) {\n        d.setHours(max.getHours(), max.getMinutes(), max.getSeconds());\n      }\n      setDate(d);\n    },\n    [setDate, setMonth]\n  );\n  const onSubmit = useCallback(() => {\n    onChange(new Date(date));\n    setOpen(false);\n  }, [date, onChange]);\n\n  const onMonthYearChanged = useCallback(\n    (d: Date, mode: \"month\" | \"year\") => {\n      setMonth(d);\n      if (mode === \"year\") {\n        setMonthYearPicker(\"month\");\n      } else {\n        setMonthYearPicker(false);\n      }\n    },\n    [setMonth, setMonthYearPicker]\n  );\n  const onNextMonth = useCallback(() => {\n    setMonth(addMonths(month, 1));\n  }, [month]);\n  const onPrevMonth = useCallback(() => {\n    setMonth(subMonths(month, 1));\n  }, [month]);\n\n  useEffect(() => {\n    if (open) {\n      setDate(initDate);\n      setMonth(initDate);\n      setMonthYearPicker(false);\n    }\n  }, [open, initDate]);\n\n  const displayValue = useMemo(() => {\n    if (!open && !value) return value;\n    return open ? date : initDate;\n  }, [date, value, open]);\n\n  const dislayFormat = useMemo(() => {\n    if (!displayValue) return \"Pick a date\";\n    return format(\n      displayValue,\n      `${!hideTime ? \"MMM\" : \"MMMM\"} d, yyyy${\n        !hideTime ? (use12HourFormat ? \" hh:mm:ss a\" : \" HH:mm:ss\") : \"\"\n      }`\n    );\n  }, [displayValue, hideTime, use12HourFormat]);\n\n  return (\n    <Popover open={open} onOpenChange={setOpen} modal={modal}>\n      <PopoverTrigger asChild>\n        {renderTrigger ? (\n          renderTrigger({\n            value: displayValue,\n            open,\n            timezone,\n            disabled,\n            use12HourFormat,\n            setOpen,\n          })\n        ) : (\n          <div\n            className={cn(\n              \"flex w-full cursor-pointer items-center h-9 ps-3 pe-1 font-normal border border-input rounded-md text-sm shadow-sm\",\n              !displayValue && \"text-muted-foreground\",\n              (!clearable || !value) && \"pe-3\",\n              disabled && \"opacity-50 cursor-not-allowed\",\n              classNames?.trigger\n            )}\n            tabIndex={0}\n          >\n            <div className=\"flex-grow flex items-center\">\n              <CalendarIcon className=\"mr-2 size-4\" />\n              {dislayFormat}\n            </div>\n            {clearable && value && (\n              <Button\n                disabled={disabled}\n                variant=\"ghost\"\n                size=\"sm\"\n                role=\"button\"\n                aria-label=\"Clear date\"\n                className=\"size-6 p-1 ms-1\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  e.preventDefault();\n                  onChange(undefined);\n                  setOpen(false);\n                }}\n              >\n                <XCircle className=\"size-4\" />\n              </Button>\n            )}\n          </div>\n        )}\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-2\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-md font-bold ms-2 flex items-center cursor-pointer\">\n            <div>\n              <span\n                onClick={() =>\n                  setMonthYearPicker(\n                    monthYearPicker === \"month\" ? false : \"month\"\n                  )\n                }\n              >\n                {format(month, \"MMMM\")}\n              </span>\n              <span\n                className=\"ms-1\"\n                onClick={() =>\n                  setMonthYearPicker(\n                    monthYearPicker === \"year\" ? false : \"year\"\n                  )\n                }\n              >\n                {format(month, \"yyyy\")}\n              </span>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() =>\n                setMonthYearPicker(monthYearPicker ? false : \"year\")\n              }\n            >\n              {monthYearPicker ? <ChevronUpIcon /> : <ChevronDownIcon />}\n            </Button>\n          </div>\n          <div\n            className={cn(\"flex space-x-2\", monthYearPicker ? \"hidden\" : \"\")}\n          >\n            <Button variant=\"ghost\" size=\"icon\" onClick={onPrevMonth}>\n              <ChevronLeftIcon />\n            </Button>\n            <Button variant=\"ghost\" size=\"icon\" onClick={onNextMonth}>\n              <ChevronRightIcon />\n            </Button>\n          </div>\n        </div>\n        <div className=\"relative overflow-hidden\">\n          <DayPicker\n            timeZone={timezone}\n            mode=\"single\"\n            selected={date}\n            onSelect={(d) => d && onDayChanged(d)}\n            month={month}\n            endMonth={endMonth}\n            disabled={\n              [\n                max ? { after: max } : null,\n                min ? { before: min } : null,\n              ].filter(Boolean) as Matcher[]\n            }\n            onMonthChange={setMonth}\n            classNames={{\n              dropdowns: \"flex w-full gap-2\",\n              months: \"flex w-full h-fit\",\n              month: \"flex flex-col w-full\",\n              month_caption: \"hidden\",\n              button_previous: \"hidden\",\n              button_next: \"hidden\",\n              month_grid: \"w-full border-collapse\",\n              weekdays: \"flex justify-between mt-2\",\n              weekday:\n                \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n              week: \"flex w-full justify-between mt-2\",\n              day: \"h-9 w-9 text-center text-sm p-0 relative flex items-center justify-center [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20 rounded-1\",\n              day_button: cn(\n                buttonVariants({ variant: \"ghost\" }),\n                \"size-9 rounded-md p-0 font-normal aria-selected:opacity-100\"\n              ),\n              range_end: \"day-range-end\",\n              selected:\n                \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground rounded-l-md rounded-r-md\",\n              today: \"bg-accent text-accent-foreground\",\n              outside:\n                \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n              disabled: \"text-muted-foreground opacity-50\",\n              range_middle:\n                \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n              hidden: \"invisible\",\n            }}\n            showOutsideDays={true}\n            {...props}\n          />\n          <div\n            className={cn(\n              \"absolute top-0 left-0 bottom-0 right-0\",\n              monthYearPicker ? \"bg-popover\" : \"hidden\"\n            )}\n          ></div>\n          <MonthYearPicker\n            value={month}\n            mode={monthYearPicker as any}\n            onChange={onMonthYearChanged}\n            minDate={minDate}\n            maxDate={maxDate}\n            className={cn(\n              \"absolute top-0 left-0 bottom-0 right-0\",\n              monthYearPicker ? \"\" : \"hidden\"\n            )}\n          />\n        </div>\n        <div className=\"flex flex-col gap-2\">\n          {!hideTime && (\n            <TimePicker\n              timePicker={timePicker}\n              value={date}\n              onChange={setDate}\n              use12HourFormat={use12HourFormat}\n              min={minDate}\n              max={maxDate}\n            />\n          )}\n          <div className=\"flex flex-row-reverse items-center justify-between\">\n            <Button className=\"ms-2 h-7 px-2\" onClick={onSubmit}>\n              Done\n            </Button>\n            {timezone && (\n              <div className=\"text-sm\">\n                <span>Timezone:</span>\n                <span className=\"font-semibold ms-1\">{timezone}</span>\n              </div>\n            )}\n          </div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\nfunction MonthYearPicker({\n  value,\n  minDate,\n  maxDate,\n  mode = \"month\",\n  onChange,\n  className,\n}: {\n  value: Date;\n  mode: \"month\" | \"year\";\n  minDate?: Date;\n  maxDate?: Date;\n  onChange: (value: Date, mode: \"month\" | \"year\") => void;\n  className?: string;\n}) {\n  const yearRef = useRef<HTMLDivElement>(null);\n  const years = useMemo(() => {\n    const years: TimeOption[] = [];\n    for (let i = 1912; i < 2100; i++) {\n      let disabled = false;\n      const startY = startOfYear(setYear(value, i));\n      const endY = endOfYear(setYear(value, i));\n      if (minDate && endY < minDate) disabled = true;\n      if (maxDate && startY > maxDate) disabled = true;\n      years.push({ value: i, label: i.toString(), disabled });\n    }\n    return years;\n  }, [value]);\n  const months = useMemo(() => {\n    const months: TimeOption[] = [];\n    for (let i = 0; i < 12; i++) {\n      let disabled = false;\n      const startM = startOfMonth(setMonthFns(value, i));\n      const endM = endOfMonth(setMonthFns(value, i));\n      if (minDate && endM < minDate) disabled = true;\n      if (maxDate && startM > maxDate) disabled = true;\n      months.push({ value: i, label: format(new Date(0, i), \"MMM\"), disabled });\n    }\n    return months;\n  }, [value]);\n\n  const onYearChange = useCallback(\n    (v: TimeOption) => {\n      let newDate = setYear(value, v.value);\n      if (minDate && newDate < minDate) {\n        newDate = setMonthFns(newDate, getMonth(minDate));\n      }\n      if (maxDate && newDate > maxDate) {\n        newDate = setMonthFns(newDate, getMonth(maxDate));\n      }\n      onChange(newDate, \"year\");\n    },\n    [onChange, value, minDate, maxDate]\n  );\n\n  useEffect(() => {\n    if (mode === \"year\") {\n      yearRef.current?.scrollIntoView({ behavior: \"auto\", block: \"center\" });\n    }\n  }, [mode, value]);\n  return (\n    <div className={cn(className)}>\n      <ScrollArea className=\"h-full\">\n        {mode === \"year\" && (\n          <div className=\"grid grid-cols-4\">\n            {years.map((year) => (\n              <div\n                key={year.value}\n                ref={year.value === getYear(value) ? yearRef : undefined}\n              >\n                <Button\n                  disabled={year.disabled}\n                  variant={getYear(value) === year.value ? \"default\" : \"ghost\"}\n                  className=\"rounded-full\"\n                  onClick={() => onYearChange(year)}\n                >\n                  {year.label}\n                </Button>\n              </div>\n            ))}\n          </div>\n        )}\n        {mode === \"month\" && (\n          <div className=\"grid grid-cols-3 gap-4\">\n            {months.map((month) => (\n              <Button\n                key={month.value}\n                size=\"lg\"\n                disabled={month.disabled}\n                variant={getMonth(value) === month.value ? \"default\" : \"ghost\"}\n                className=\"rounded-full\"\n                onClick={() =>\n                  onChange(setMonthFns(value, month.value), \"month\")\n                }\n              >\n                {month.label}\n              </Button>\n            ))}\n          </div>\n        )}\n      </ScrollArea>\n    </div>\n  );\n}\n\ninterface TimeOption {\n  value: number;\n  label: string;\n  disabled: boolean;\n}\n\nfunction TimePicker({\n  value,\n  onChange,\n  use12HourFormat,\n  min,\n  max,\n  timePicker,\n}: {\n  use12HourFormat?: boolean;\n  value: Date;\n  onChange: (date: Date) => void;\n  min?: Date;\n  max?: Date;\n  timePicker?: DateTimePickerProps[\"timePicker\"];\n}) {\n  // hours24h = HH\n  // hours12h = hh\n  const formatStr = useMemo(\n    () =>\n      use12HourFormat\n        ? \"yyyy-MM-dd hh:mm:ss.SSS a xxxx\"\n        : \"yyyy-MM-dd HH:mm:ss.SSS xxxx\",\n    [use12HourFormat]\n  );\n  const [ampm, setAmpm] = useState(\n    format(value, \"a\") === \"AM\" ? AM_VALUE : PM_VALUE\n  );\n  const [hour, setHour] = useState(\n    use12HourFormat ? +format(value, \"hh\") : value.getHours()\n  );\n  const [minute, setMinute] = useState(value.getMinutes());\n  const [second, setSecond] = useState(value.getSeconds());\n\n  useEffect(() => {\n    onChange(\n      buildTime({\n        use12HourFormat,\n        value,\n        formatStr,\n        hour,\n        minute,\n        second,\n        ampm,\n      })\n    );\n  }, [hour, minute, second, ampm, formatStr, use12HourFormat]);\n\n  const _hourIn24h = useMemo(() => {\n    // if (use12HourFormat) {\n    //   return (hour % 12) + ampm * 12;\n    // }\n    return use12HourFormat ? (hour % 12) + ampm * 12 : hour;\n  }, [value, use12HourFormat, ampm]);\n\n  const hours: TimeOption[] = useMemo(\n    () =>\n      Array.from({ length: use12HourFormat ? 12 : 24 }, (_, i) => {\n        let disabled = false;\n        const hourValue = use12HourFormat ? (i === 0 ? 12 : i) : i;\n        const hDate = setHours(value, use12HourFormat ? i + ampm * 12 : i);\n        const hStart = startOfHour(hDate);\n        const hEnd = endOfHour(hDate);\n        if (min && hEnd < min) disabled = true;\n        if (max && hStart > max) disabled = true;\n        return {\n          value: hourValue,\n          label: hourValue.toString().padStart(2, \"0\"),\n          disabled,\n        };\n      }),\n    [value, min, max, use12HourFormat, ampm]\n  );\n  const minutes: TimeOption[] = useMemo(() => {\n    const anchorDate = setHours(value, _hourIn24h);\n    return Array.from({ length: 60 }, (_, i) => {\n      let disabled = false;\n      const mDate = setMinutes(anchorDate, i);\n      const mStart = startOfMinute(mDate);\n      const mEnd = endOfMinute(mDate);\n      if (min && mEnd < min) disabled = true;\n      if (max && mStart > max) disabled = true;\n      return {\n        value: i,\n        label: i.toString().padStart(2, \"0\"),\n        disabled,\n      };\n    });\n  }, [value, min, max, _hourIn24h]);\n  const seconds: TimeOption[] = useMemo(() => {\n    const anchorDate = setMilliseconds(\n      setMinutes(setHours(value, _hourIn24h), minute),\n      0\n    );\n    const _min = min ? setMilliseconds(min, 0) : undefined;\n    const _max = max ? setMilliseconds(max, 0) : undefined;\n    return Array.from({ length: 60 }, (_, i) => {\n      let disabled = false;\n      const sDate = setSeconds(anchorDate, i);\n      if (_min && sDate < _min) disabled = true;\n      if (_max && sDate > _max) disabled = true;\n      return {\n        value: i,\n        label: i.toString().padStart(2, \"0\"),\n        disabled,\n      };\n    });\n  }, [value, minute, min, max, _hourIn24h]);\n  const ampmOptions = useMemo(() => {\n    const startD = startOfDay(value);\n    const endD = endOfDay(value);\n    return [\n      { value: AM_VALUE, label: \"AM\" },\n      { value: PM_VALUE, label: \"PM\" },\n    ].map((v) => {\n      let disabled = false;\n      const start = addHours(startD, v.value * 12);\n      const end = subHours(endD, (1 - v.value) * 12);\n      if (min && end < min) disabled = true;\n      if (max && start > max) disabled = true;\n      return { ...v, disabled };\n    });\n  }, [value, min, max]);\n\n  const [open, setOpen] = useState(false);\n\n  const hourRef = useRef<HTMLDivElement>(null);\n  const minuteRef = useRef<HTMLDivElement>(null);\n  const secondRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (open) {\n        hourRef.current?.scrollIntoView({ behavior: \"auto\" });\n        minuteRef.current?.scrollIntoView({ behavior: \"auto\" });\n        secondRef.current?.scrollIntoView({ behavior: \"auto\" });\n      }\n    }, 1);\n    return () => clearTimeout(timeoutId);\n  }, [open]);\n\n  const onHourChange = useCallback(\n    (v: TimeOption) => {\n      if (min) {\n        let newTime = buildTime({\n          use12HourFormat,\n          value,\n          formatStr,\n          hour: v.value,\n          minute,\n          second,\n          ampm,\n        });\n        if (newTime < min) {\n          setMinute(min.getMinutes());\n          setSecond(min.getSeconds());\n        }\n      }\n      if (max) {\n        let newTime = buildTime({\n          use12HourFormat,\n          value,\n          formatStr,\n          hour: v.value,\n          minute,\n          second,\n          ampm,\n        });\n        if (newTime > max) {\n          setMinute(max.getMinutes());\n          setSecond(max.getSeconds());\n        }\n      }\n      setHour(v.value);\n    },\n    [setHour, use12HourFormat, value, formatStr, minute, second, ampm]\n  );\n\n  const onMinuteChange = useCallback(\n    (v: TimeOption) => {\n      if (min) {\n        let newTime = buildTime({\n          use12HourFormat,\n          value,\n          formatStr,\n          hour: v.value,\n          minute,\n          second,\n          ampm,\n        });\n        if (newTime < min) {\n          setSecond(min.getSeconds());\n        }\n      }\n      if (max) {\n        let newTime = buildTime({\n          use12HourFormat,\n          value,\n          formatStr,\n          hour: v.value,\n          minute,\n          second,\n          ampm,\n        });\n        if (newTime > max) {\n          setSecond(newTime.getSeconds());\n        }\n      }\n      setMinute(v.value);\n    },\n    [setMinute, use12HourFormat, value, formatStr, hour, second, ampm]\n  );\n\n  const onAmpmChange = useCallback(\n    (v: TimeOption) => {\n      if (min) {\n        let newTime = buildTime({\n          use12HourFormat,\n          value,\n          formatStr,\n          hour,\n          minute,\n          second,\n          ampm: v.value,\n        });\n        if (newTime < min) {\n          const minH = min.getHours() % 12;\n          setHour(minH === 0 ? 12 : minH);\n          setMinute(min.getMinutes());\n          setSecond(min.getSeconds());\n        }\n      }\n      if (max) {\n        let newTime = buildTime({\n          use12HourFormat,\n          value,\n          formatStr,\n          hour,\n          minute,\n          second,\n          ampm: v.value,\n        });\n        if (newTime > max) {\n          const maxH = max.getHours() % 12;\n          setHour(maxH === 0 ? 12 : maxH);\n          setMinute(max.getMinutes());\n          setSecond(max.getSeconds());\n        }\n      }\n      setAmpm(v.value);\n    },\n    [setAmpm, use12HourFormat, value, formatStr, hour, minute, second, min, max]\n  );\n\n  const display = useMemo(() => {\n    let arr = [];\n    for (const element of [\"hour\", \"minute\", \"second\"]) {\n      if (!timePicker || timePicker[element as keyof typeof timePicker]) {\n        if (element === \"hour\") {\n          arr.push(use12HourFormat ? \"hh\" : \"HH\");\n        } else {\n          arr.push(element === \"minute\" ? \"mm\" : \"ss\");\n        }\n      }\n    }\n    return format(value, arr.join(\":\") + (use12HourFormat ? \" a\" : \"\"));\n  }, [value, use12HourFormat, timePicker]);\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"justify-between\"\n        >\n          <Clock className=\"mr-2 size-4\" />\n          {display}\n          <ChevronDownIcon className=\"ml-2 size-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"p-0\" side=\"top\">\n        <div className=\"flex-col gap-2 p-2\">\n          <div className=\"flex h-56 grow\">\n            {(!timePicker || timePicker.hour) && (\n              <ScrollArea className=\"h-full flex-grow\">\n                <div className=\"flex grow flex-col items-stretch overflow-y-auto pe-2 pb-48\">\n                  {hours.map((v) => (\n                    <div\n                      key={v.value}\n                      ref={v.value === hour ? hourRef : undefined}\n                    >\n                      <TimeItem\n                        option={v}\n                        selected={v.value === hour}\n                        onSelect={onHourChange}\n                        className=\"h-8\"\n                        disabled={v.disabled}\n                      />\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            )}\n            {(!timePicker || timePicker.minute) && (\n              <ScrollArea className=\"h-full flex-grow\">\n                <div className=\"flex grow flex-col items-stretch overflow-y-auto pe-2 pb-48\">\n                  {minutes.map((v) => (\n                    <div\n                      key={v.value}\n                      ref={v.value === minute ? minuteRef : undefined}\n                    >\n                      <TimeItem\n                        option={v}\n                        selected={v.value === minute}\n                        onSelect={onMinuteChange}\n                        className=\"h-8\"\n                        disabled={v.disabled}\n                      />\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            )}\n            {(!timePicker || timePicker.second) && (\n              <ScrollArea className=\"h-full flex-grow\">\n                <div className=\"flex grow flex-col items-stretch overflow-y-auto pe-2 pb-48\">\n                  {seconds.map((v) => (\n                    <div\n                      key={v.value}\n                      ref={v.value === second ? secondRef : undefined}\n                    >\n                      <TimeItem\n                        option={v}\n                        selected={v.value === second}\n                        onSelect={(v) => setSecond(v.value)}\n                        className=\"h-8\"\n                        disabled={v.disabled}\n                      />\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            )}\n            {use12HourFormat && (\n              <ScrollArea className=\"h-full flex-grow\">\n                <div className=\"flex grow flex-col items-stretch overflow-y-auto pe-2\">\n                  {ampmOptions.map((v) => (\n                    <TimeItem\n                      key={v.value}\n                      option={v}\n                      selected={v.value === ampm}\n                      onSelect={onAmpmChange}\n                      className=\"h-8\"\n                      disabled={v.disabled}\n                    />\n                  ))}\n                </div>\n              </ScrollArea>\n            )}\n          </div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\nconst TimeItem = ({\n  option,\n  selected,\n  onSelect,\n  className,\n  disabled,\n}: {\n  option: TimeOption;\n  selected: boolean;\n  onSelect: (option: TimeOption) => void;\n  className?: string;\n  disabled?: boolean;\n}) => {\n  return (\n    <Button\n      variant=\"ghost\"\n      className={cn(\"flex justify-center px-1 pe-2 ps-1\", className)}\n      onClick={() => onSelect(option)}\n      disabled={disabled}\n    >\n      <div className=\"w-4\">\n        {selected && <CheckIcon className=\"my-auto size-4\" />}\n      </div>\n      <span className=\"ms-2\">{option.label}</span>\n    </Button>\n  );\n};\n\ninterface BuildTimeOptions {\n  use12HourFormat?: boolean;\n  value: Date;\n  formatStr: string;\n  hour: number;\n  minute: number;\n  second: number;\n  ampm: number;\n}\n\nfunction buildTime(options: BuildTimeOptions) {\n  const { use12HourFormat, value, formatStr, hour, minute, second, ampm } =\n    options;\n  let date: Date;\n  if (use12HourFormat) {\n    const dateStrRaw = format(value, formatStr);\n    // yyyy-MM-dd hh:mm:ss.SSS a zzzz\n    // 2024-10-14 01:20:07.524 AM GMT+00:00\n    let dateStr =\n      dateStrRaw.slice(0, 11) +\n      hour.toString().padStart(2, \"0\") +\n      dateStrRaw.slice(13);\n    dateStr =\n      dateStr.slice(0, 14) +\n      minute.toString().padStart(2, \"0\") +\n      dateStr.slice(16);\n    dateStr =\n      dateStr.slice(0, 17) +\n      second.toString().padStart(2, \"0\") +\n      dateStr.slice(19);\n    dateStr =\n      dateStr.slice(0, 24) +\n      (ampm == AM_VALUE ? \"AM\" : \"PM\") +\n      dateStr.slice(26);\n    date = parse(dateStr, formatStr, value);\n  } else {\n    date = setHours(setMinutes(setSeconds(value, second), minute), hour);\n  }\n  return date;\n}\n","/**\n * Simple Time Picker\n * Check out the live demo at https://shadcn-datetime-picker-pro.vercel.app/\n * Find the latest source code at https://github.com/huybuidac/shadcn-datetime-picker\n */\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\nimport { Clock, ChevronDownIcon, CheckIcon } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport React from \"react\";\nimport {\n  format,\n  parse,\n  setHours,\n  startOfHour,\n  endOfHour,\n  setMinutes,\n  startOfMinute,\n  endOfMinute,\n  setSeconds,\n  startOfDay,\n  endOfDay,\n  addHours,\n  subHours,\n  setMilliseconds,\n} from \"date-fns\";\n\ninterface SimpleTimeOption {\n  value: any;\n  label: string;\n  disabled?: boolean;\n}\n\nconst AM_VALUE = 0;\nconst PM_VALUE = 1;\n\nexport function SimpleTimePicker({\n  value,\n  onChange,\n  use12HourFormat,\n  min,\n  max,\n  disabled,\n  modal,\n  onSubmit,\n}: {\n  use12HourFormat?: boolean;\n  value: Date;\n  onChange: (date: Date) => void;\n  min?: Date;\n  max?: Date;\n  disabled?: boolean;\n  className?: string;\n  modal?: boolean;\n  onSubmit?: (value: Date) => void;\n}) {\n  // hours24h = HH\n  // hours12h = hh\n  const formatStr = useMemo(\n    () =>\n      use12HourFormat\n        ? \"yyyy-MM-dd hh:mm:ss.SSS a xxxx\"\n        : \"yyyy-MM-dd HH:mm:ss.SSS xxxx\",\n    [use12HourFormat]\n  );\n  const [ampm, setAmpm] = useState(\n    format(value, \"a\") === \"AM\" ? AM_VALUE : PM_VALUE\n  );\n  const [hour, setHour] = useState(\n    use12HourFormat ? +format(value, \"hh\") : value.getHours()\n  );\n  const [minute, setMinute] = useState(value.getMinutes());\n  const [second, setSecond] = useState(value.getSeconds());\n\n  useEffect(() => {\n    onChange(\n      buildTime({\n        use12HourFormat,\n        value,\n        formatStr,\n        hour,\n        minute,\n        second,\n        ampm,\n      })\n    );\n  }, [hour, minute, second, ampm, formatStr, use12HourFormat]);\n\n  const _hourIn24h = useMemo(() => {\n    return use12HourFormat ? (hour % 12) + ampm * 12 : hour;\n  }, [hour, use12HourFormat, ampm]);\n\n  const hours: SimpleTimeOption[] = useMemo(\n    () =>\n      Array.from({ length: use12HourFormat ? 12 : 24 }, (_, i) => {\n        let disabled = false;\n        const hourValue = use12HourFormat ? (i === 0 ? 12 : i) : i;\n        const hDate = setHours(value, use12HourFormat ? i + ampm * 12 : i);\n        const hStart = startOfHour(hDate);\n        const hEnd = endOfHour(hDate);\n        if (min && hEnd < min) disabled = true;\n        if (max && hStart > max) disabled = true;\n        return {\n          value: hourValue,\n          label: hourValue.toString().padStart(2, \"0\"),\n          disabled,\n        };\n      }),\n    [value, min, max, use12HourFormat, ampm]\n  );\n  const minutes: SimpleTimeOption[] = useMemo(() => {\n    const anchorDate = setHours(value, _hourIn24h);\n    return Array.from({ length: 60 }, (_, i) => {\n      let disabled = false;\n      const mDate = setMinutes(anchorDate, i);\n      const mStart = startOfMinute(mDate);\n      const mEnd = endOfMinute(mDate);\n      if (min && mEnd < min) disabled = true;\n      if (max && mStart > max) disabled = true;\n      return {\n        value: i,\n        label: i.toString().padStart(2, \"0\"),\n        disabled,\n      };\n    });\n  }, [value, min, max, _hourIn24h]);\n  const seconds: SimpleTimeOption[] = useMemo(() => {\n    const anchorDate = setMilliseconds(\n      setMinutes(setHours(value, _hourIn24h), minute),\n      0\n    );\n    const _min = min ? setMilliseconds(min, 0) : undefined;\n    const _max = max ? setMilliseconds(max, 0) : undefined;\n    return Array.from({ length: 60 }, (_, i) => {\n      let disabled = false;\n      const sDate = setSeconds(anchorDate, i);\n      if (_min && sDate < _min) disabled = true;\n      if (_max && sDate > _max) disabled = true;\n      return {\n        value: i,\n        label: i.toString().padStart(2, \"0\"),\n        disabled,\n      };\n    });\n  }, [value, minute, min, max, _hourIn24h]);\n  const ampmOptions = useMemo(() => {\n    const startD = startOfDay(value);\n    const endD = endOfDay(value);\n    return [\n      { value: AM_VALUE, label: \"AM\" },\n      { value: PM_VALUE, label: \"PM\" },\n    ].map((v) => {\n      let disabled = false;\n      const start = addHours(startD, v.value * 12);\n      const end = subHours(endD, (1 - v.value) * 12);\n      if (min && end < min) disabled = true;\n      if (max && start > max) disabled = true;\n      return { ...v, disabled };\n    });\n  }, [value, min, max]);\n\n  const [open, setOpen] = useState(false);\n\n  const hourRef = useRef<HTMLDivElement>(null);\n  const minuteRef = useRef<HTMLDivElement>(null);\n  const secondRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (open) {\n        hourRef.current?.scrollIntoView({ behavior: \"auto\" });\n        minuteRef.current?.scrollIntoView({ behavior: \"auto\" });\n        secondRef.current?.scrollIntoView({ behavior: \"auto\" });\n      }\n    }, 1);\n    return () => clearTimeout(timeoutId);\n  }, [open]);\n  const onHourChange = useCallback(\n    (v: SimpleTimeOption) => {\n      if (min) {\n        let newTime = buildTime({\n          use12HourFormat,\n          value,\n          formatStr,\n          hour: v.value,\n          minute,\n          second,\n          ampm,\n        });\n        if (newTime < min) {\n          setMinute(min.getMinutes());\n          setSecond(min.getSeconds());\n        }\n      }\n      if (max) {\n        let newTime = buildTime({\n          use12HourFormat,\n          value,\n          formatStr,\n          hour: v.value,\n          minute,\n          second,\n          ampm,\n        });\n        if (newTime > max) {\n          setMinute(max.getMinutes());\n          setSecond(max.getSeconds());\n        }\n      }\n      setHour(v.value);\n    },\n    [setHour, use12HourFormat, value, formatStr, minute, second, ampm]\n  );\n\n  const onMinuteChange = useCallback(\n    (v: SimpleTimeOption) => {\n      if (min) {\n        let newTime = buildTime({\n          use12HourFormat,\n          value,\n          formatStr,\n          hour: v.value,\n          minute,\n          second,\n          ampm,\n        });\n        if (newTime < min) {\n          setSecond(min.getSeconds());\n        }\n      }\n      if (max) {\n        let newTime = buildTime({\n          use12HourFormat,\n          value,\n          formatStr,\n          hour: v.value,\n          minute,\n          second,\n          ampm,\n        });\n        if (newTime > max) {\n          setSecond(newTime.getSeconds());\n        }\n      }\n      setMinute(v.value);\n    },\n    [setMinute, use12HourFormat, value, formatStr, hour, second, ampm]\n  );\n\n  const onAmpmChange = useCallback(\n    (v: SimpleTimeOption) => {\n      if (min) {\n        let newTime = buildTime({\n          use12HourFormat,\n          value,\n          formatStr,\n          hour,\n          minute,\n          second,\n          ampm: v.value,\n        });\n        if (newTime < min) {\n          const minH = min.getHours() % 12;\n          setHour(minH === 0 ? 12 : minH);\n          setMinute(min.getMinutes());\n          setSecond(min.getSeconds());\n        }\n      }\n      if (max) {\n        let newTime = buildTime({\n          use12HourFormat,\n          value,\n          formatStr,\n          hour,\n          minute,\n          second,\n          ampm: v.value,\n        });\n        if (newTime > max) {\n          const maxH = max.getHours() % 12;\n          setHour(maxH === 0 ? 12 : maxH);\n          setMinute(max.getMinutes());\n          setSecond(max.getSeconds());\n        }\n      }\n      setAmpm(v.value);\n    },\n    [setAmpm, use12HourFormat, value, formatStr, hour, minute, second, min, max]\n  );\n\n  const display = useMemo(() => {\n    return format(value, use12HourFormat ? \"hh:mm:ss a\" : \"HH:mm:ss\");\n  }, [value, use12HourFormat]);\n\n  return (\n    <Popover open={open} onOpenChange={setOpen} modal={modal}>\n      <PopoverTrigger asChild>\n        <div\n          role=\"combobox\"\n          aria-expanded={open}\n          className={cn(\n            \"flex h-9 px-3 items-center justify-between cursor-pointer font-normal border border-input rounded-md text-sm shadow-sm\",\n            disabled && \"opacity-50 cursor-not-allowed\"\n          )}\n          tabIndex={0}\n        >\n          <Clock className=\"mr-2 size-4\" />\n          {display}\n          <ChevronDownIcon className=\"ml-2 size-4 shrink-0 opacity-50\" />\n        </div>\n      </PopoverTrigger>\n      <PopoverContent className=\"p-0\" side=\"top\">\n        <div className=\"flex-col gap-2 p-2\">\n          <div className=\"flex h-56 grow\">\n            <ScrollArea className=\"h-full flex-grow\">\n              <div className=\"flex grow flex-col items-stretch overflow-y-auto pe-2 pb-48\">\n                {hours.map((v) => (\n                  <div\n                    ref={v.value === hour ? hourRef : undefined}\n                    key={v.value}\n                  >\n                    <TimeItem\n                      option={v}\n                      selected={v.value === hour}\n                      onSelect={onHourChange}\n                      disabled={v.disabled}\n                      className=\"h-8\"\n                    />\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n            <ScrollArea className=\"h-full flex-grow\">\n              <div className=\"flex grow flex-col items-stretch overflow-y-auto pe-2 pb-48\">\n                {minutes.map((v) => (\n                  <div\n                    ref={v.value === minute ? minuteRef : undefined}\n                    key={v.value}\n                  >\n                    <TimeItem\n                      option={v}\n                      selected={v.value === minute}\n                      onSelect={onMinuteChange}\n                      disabled={v.disabled}\n                      className=\"h-8\"\n                    />\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n            <ScrollArea className=\"h-full flex-grow\">\n              <div className=\"flex grow flex-col items-stretch overflow-y-auto pe-2 pb-48\">\n                {seconds.map((v) => (\n                  <div\n                    ref={v.value === second ? secondRef : undefined}\n                    key={v.value}\n                  >\n                    <TimeItem\n                      option={v}\n                      selected={v.value === second}\n                      onSelect={(v) => setSecond(v.value)}\n                      className=\"h-8\"\n                      disabled={v.disabled}\n                    />\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n            {use12HourFormat && (\n              <ScrollArea className=\"h-full flex-grow\">\n                <div className=\"flex grow flex-col items-stretch overflow-y-auto pe-2\">\n                  {ampmOptions.map((v) => (\n                    <TimeItem\n                      key={v.value}\n                      option={v}\n                      selected={v.value === ampm}\n                      onSelect={onAmpmChange}\n                      className=\"h-8\"\n                      disabled={v.disabled}\n                    />\n                  ))}\n                </div>\n              </ScrollArea>\n            )}\n          </div>\n          <div className=\"flex flex-row-reverse items-center justify-between\">\n            <Button\n              className=\"ms-2 h-7 px-2\"\n              onClick={() => {\n                onSubmit?.(\n                  buildTime({\n                    use12HourFormat,\n                    value,\n                    formatStr,\n                    hour,\n                    minute,\n                    second,\n                    ampm,\n                  })\n                );\n              }}\n            >\n              Done\n            </Button>\n          </div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\nconst TimeItem = ({\n  option,\n  selected,\n  onSelect,\n  className,\n  disabled,\n}: {\n  option: SimpleTimeOption;\n  selected: boolean;\n  onSelect: (option: SimpleTimeOption) => void;\n  className?: string;\n  disabled?: boolean;\n}) => {\n  return (\n    <Button\n      variant=\"ghost\"\n      className={cn(\"flex justify-center px-1 pe-2 ps-1\", className)}\n      onClick={() => onSelect(option)}\n      disabled={disabled}\n    >\n      <div className=\"w-4\">\n        {selected && <CheckIcon className=\"my-auto size-4\" />}\n      </div>\n      <span className=\"ms-2\">{option.label}</span>\n    </Button>\n  );\n};\n\ninterface BuildTimeOptions {\n  use12HourFormat?: boolean;\n  value: Date;\n  formatStr: string;\n  hour: number;\n  minute: number;\n  second: number;\n  ampm: number;\n}\n\nfunction buildTime(options: BuildTimeOptions) {\n  const { use12HourFormat, value, formatStr, hour, minute, second, ampm } =\n    options;\n  let date: Date;\n  if (use12HourFormat) {\n    const dateStrRaw = format(value, formatStr);\n    // yyyy-MM-dd hh:mm:ss.SSS a zzzz\n    // 2024-10-14 01:20:07.524 AM GMT+00:00\n    let dateStr =\n      dateStrRaw.slice(0, 11) +\n      hour.toString().padStart(2, \"0\") +\n      dateStrRaw.slice(13);\n    dateStr =\n      dateStr.slice(0, 14) +\n      minute.toString().padStart(2, \"0\") +\n      dateStr.slice(16);\n    dateStr =\n      dateStr.slice(0, 17) +\n      second.toString().padStart(2, \"0\") +\n      dateStr.slice(19);\n    dateStr =\n      dateStr.slice(0, 24) +\n      (ampm == AM_VALUE ? \"AM\" : \"PM\") +\n      dateStr.slice(26);\n    date = parse(dateStr, formatStr, value);\n  } else {\n    date = setHours(\n      setMinutes(setSeconds(setMilliseconds(value, 0), second), minute),\n      hour\n    );\n  }\n  return date;\n}\n","import * as React from 'react';\nimport React__default from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    const isFileListInstance = typeof FileList !== 'undefined' ? data instanceof FileList : false;\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || isFileListInstance)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React__default.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React__default.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React__default.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React__default.useState(control._formState);\n    const _localProxyFormState = React__default.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    useIsomorphicLayoutEffect(() => control._subscribe({\n        name: name,\n        formState: _localProxyFormState.current,\n        exact,\n        callback: (formState) => {\n            !disabled &&\n                updateFormState({\n                    ...control._formState,\n                    ...formState,\n                });\n        },\n    }), [name, disabled, exact]);\n    React__default.useEffect(() => {\n        _localProxyFormState.current.isValid && control._setValid(true);\n    }, [control]);\n    return React__default.useMemo(() => getProxyFormState(formState, control, _localProxyFormState.current, false), [formState, control]);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _defaultValue = React__default.useRef(defaultValue);\n    const [value, updateValue] = React__default.useState(control._getWatch(name, _defaultValue.current));\n    useIsomorphicLayoutEffect(() => control._subscribe({\n        name: name,\n        formState: {\n            values: true,\n        },\n        exact,\n        callback: (formState) => !disabled &&\n            updateValue(generateWatchOutput(name, control._names, formState.values || control._formValues, false, _defaultValue.current)),\n    }), [name, control, disabled, exact]);\n    React__default.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n        exact: true,\n    });\n    const _props = React__default.useRef(props);\n    const _registerProps = React__default.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    const fieldState = React__default.useMemo(() => Object.defineProperties({}, {\n        invalid: {\n            enumerable: true,\n            get: () => !!get(formState.errors, name),\n        },\n        isDirty: {\n            enumerable: true,\n            get: () => !!get(formState.dirtyFields, name),\n        },\n        isTouched: {\n            enumerable: true,\n            get: () => !!get(formState.touchedFields, name),\n        },\n        isValidating: {\n            enumerable: true,\n            get: () => !!get(formState.validatingFields, name),\n        },\n        error: {\n            enumerable: true,\n            get: () => get(formState.errors, name),\n        },\n    }), [formState, name]);\n    const onChange = React__default.useCallback((event) => _registerProps.current.onChange({\n        target: {\n            value: getEventValue(event),\n            name: name,\n        },\n        type: EVENTS.CHANGE,\n    }), [name]);\n    const onBlur = React__default.useCallback(() => _registerProps.current.onBlur({\n        target: {\n            value: get(control._formValues, name),\n            name: name,\n        },\n        type: EVENTS.BLUR,\n    }), [name, control._formValues]);\n    const ref = React__default.useCallback((elm) => {\n        const field = get(control._fields, name);\n        if (field && elm) {\n            field._f.ref = {\n                focus: () => elm.focus(),\n                select: () => elm.select(),\n                setCustomValidity: (message) => elm.setCustomValidity(message),\n                reportValidity: () => elm.reportValidity(),\n            };\n        }\n    }, [control._fields, name]);\n    const field = React__default.useMemo(() => ({\n        name,\n        value,\n        ...(isBoolean(disabled) || formState.disabled\n            ? { disabled: formState.disabled || disabled }\n            : {}),\n        onChange,\n        onBlur,\n        ref,\n    }), [name, disabled, formState.disabled, onChange, onBlur, ref, value]);\n    React__default.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        control.register(name, {\n            ..._props.current.rules,\n            ...(isBoolean(_props.current.disabled)\n                ? { disabled: _props.current.disabled }\n                : {}),\n        });\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        !isArrayField && control.register(name);\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React__default.useEffect(() => {\n        control._setDisabledField({\n            disabled,\n            name,\n        });\n    }, [disabled, name, control]);\n    return React__default.useMemo(() => ({\n        field,\n        formState,\n        fieldState,\n    }), [field, formState, fieldState]);\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst flatten = (obj) => {\n    const output = {};\n    for (const key of Object.keys(obj)) {\n        if (isObjectType(obj[key]) && obj[key] !== null) {\n            const nested = flatten(obj[key]);\n            for (const nestedKey of Object.keys(nested)) {\n                output[`${key}.${nestedKey}`] = nested[nestedKey];\n            }\n        }\n        else {\n            output[key] = obj[key];\n        }\n    }\n    return output;\n};\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React__default.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            const flattenFormValues = flatten(control._formValues);\n            for (const key in flattenFormValues) {\n                formData.append(key, flattenFormValues[key]);\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(String(action), {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React__default.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React__default.createElement(React__default.Fragment, null, render({\n        submit,\n    }))) : (React__default.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\nvar hasPromiseValidation = (fieldReference) => !!fieldReference &&\n    !!fieldReference.validate &&\n    !!((isFunction(fieldReference.validate) &&\n        fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n        (isObject(fieldReference.validate) &&\n            Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION)));\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    return true;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    return true;\n                }\n                else {\n                    if (iterateFieldsByAction(currentField, action)) {\n                        break;\n                    }\n                }\n            }\n            else if (isObject(currentField)) {\n                if (iterateFieldsByAction(currentField, action)) {\n                    break;\n                }\n            }\n        }\n    }\n    return;\n};\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isMessage = (value) => isString(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabledFieldNames.has(name)) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isReady: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    const _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        disabled: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    let _proxySubscribeFormState = {\n        ..._proxyFormState,\n    };\n    const _subjects = {\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _setValid = async (shouldUpdateValid) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValid ||\n                _proxySubscribeFormState.isValid ||\n                shouldUpdateValid)) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _runSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValidating ||\n                _proxyFormState.validatingFields ||\n                _proxySubscribeFormState.isValidating ||\n                _proxySubscribeFormState.validatingFields)) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _setFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method && !_options.disabled) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if ((_proxyFormState.touchedFields ||\n                _proxySubscribeFormState.touchedFields) &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields || _proxySubscribeFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _setValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!_options.disabled) {\n            if (!isBlurEvent || shouldDirty) {\n                if (_proxyFormState.isDirty || _proxySubscribeFormState.isDirty) {\n                    isPreviousDirty = _formState.isDirty;\n                    _formState.isDirty = output.isDirty = _getDirty();\n                    shouldUpdateField = isPreviousDirty !== output.isDirty;\n                }\n                const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n                isPreviousDirty = !!get(_formState.dirtyFields, name);\n                isCurrentFieldPristine\n                    ? unset(_formState.dirtyFields, name)\n                    : set(_formState.dirtyFields, name, true);\n                output.dirtyFields = _formState.dirtyFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        ((_proxyFormState.dirtyFields ||\n                            _proxySubscribeFormState.dirtyFields) &&\n                            isPreviousDirty !== !isCurrentFieldPristine);\n            }\n            if (isBlurEvent) {\n                const isPreviousFieldTouched = get(_formState.touchedFields, name);\n                if (!isPreviousFieldTouched) {\n                    set(_formState.touchedFields, name, isBlurEvent);\n                    output.touchedFields = _formState.touchedFields;\n                    shouldUpdateField =\n                        shouldUpdateField ||\n                            ((_proxyFormState.touchedFields ||\n                                _proxySubscribeFormState.touchedFields) &&\n                                isPreviousFieldTouched !== isBlurEvent);\n                }\n            }\n            shouldUpdateField && shouldRender && _subjects.state.next(output);\n        }\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = (_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (_options.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(_options.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _runSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _runSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const isPromiseFunction = field._f && hasPromiseValidation(field._f);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name], true);\n                    }\n                    const fieldError = await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name]);\n                    }\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                !isEmptyObject(fieldValue) &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => !_options.disabled &&\n        (name && data && set(_formValues, name, data),\n            !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, _options.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.forEach((checkboxRef) => {\n                            if (!checkboxRef.defaultChecked || !checkboxRef.disabled) {\n                                if (Array.isArray(fieldValue)) {\n                                    checkboxRef.checked = !!fieldValue.find((data) => data === checkboxRef.value);\n                                }\n                                else {\n                                    checkboxRef.checked =\n                                        fieldValue === checkboxRef.value || !!fieldValue;\n                                }\n                            }\n                        });\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.state.next({\n                            name,\n                            values: cloneObject(_formValues),\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            if (!value.hasOwnProperty(fieldKey)) {\n                return;\n            }\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                isObject(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: cloneObject(_formValues),\n            });\n            if ((_proxyFormState.isDirty ||\n                _proxyFormState.dirtyFields ||\n                _proxySubscribeFormState.isDirty ||\n                _proxySubscribeFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.state.next({\n            name: _state.mount ? name : undefined,\n            values: cloneObject(_formValues),\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n                    deepEqual(fieldValue, get(_formValues, name, fieldValue));\n        };\n        const validationModeBeforeSubmit = getValidationModes(_options.mode);\n        const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = target.type\n                ? getFieldValue(field._f)\n                : getEventValue(event);\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.state.next({\n                    name,\n                    type: event.type,\n                    values: cloneObject(_formValues),\n                });\n            if (shouldSkipValidation) {\n                if (_proxyFormState.isValid || _proxySubscribeFormState.isValid) {\n                    if (_options.mode === 'onBlur') {\n                        if (isBlurEvent) {\n                            _setValid();\n                        }\n                    }\n                    else if (!isBlurEvent) {\n                        _setValid();\n                    }\n                }\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _runSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid ||\n                        _proxySubscribeFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _setValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                ((_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n                    isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.state.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const _subscribe = (props) => _subjects.state.subscribe({\n        next: (formState) => {\n            if (shouldSubscribeByName(props.name, formState.name, props.exact) &&\n                shouldRenderFormState(formState, props.formState || _proxyFormState, _setFormState, props.reRenderRoot)) {\n                props.callback({\n                    values: { ..._formValues },\n                    ..._formState,\n                    ...formState,\n                });\n            }\n        },\n    }).unsubscribe;\n    const subscribe = (props) => {\n        _state.mount = true;\n        _proxySubscribeFormState = {\n            ..._proxySubscribeFormState,\n            ...props.formState,\n        };\n        return _subscribe({\n            ...props,\n            formState: _proxySubscribeFormState,\n        });\n    };\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.state.next({\n            values: cloneObject(_formValues),\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _setValid();\n    };\n    const _setDisabledField = ({ disabled, name, }) => {\n        if ((isBoolean(disabled) && _state.mount) ||\n            !!disabled ||\n            _names.disabled.has(name)) {\n            disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled) || isBoolean(_options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _setDisabledField({\n                disabled: isBoolean(options.disabled)\n                    ? options.disabled\n                    : _options.disabled,\n                name,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined\n                ? { disabled: options.disabled || _options.disabled }\n                : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist &&\n                e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _runSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        if (_names.disabled.size) {\n            for (const name of _names.disabled) {\n                set(fieldValues, name, undefined);\n            }\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _setValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                const fieldsToCheck = new Set([\n                    ..._names.mount,\n                    ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n                ]);\n                for (const fieldName of Array.from(fieldsToCheck)) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                for (const fieldName of _names.mount) {\n                    setValue(fieldName, get(values, fieldName));\n                }\n            }\n            _formValues = cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.state.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            disabled: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!_options.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? {}\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect &&\n                    isFunction(fieldRef.select) &&\n                    fieldRef.select();\n            }\n        }\n    };\n    const _setFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    const methods = {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _subscribe,\n            _runSchema,\n            _getWatch,\n            _getDirty,\n            _setValid,\n            _setFieldArray,\n            _setDisabledField,\n            _setErrors,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _removeUnmounted,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        subscribe,\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n    return {\n        ...methods,\n        formControl: methods,\n    };\n}\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, rules, } = props;\n    const [fields, setFields] = React__default.useState(control._getFieldArray(name));\n    const ids = React__default.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React__default.useRef(fields);\n    const _name = React__default.useRef(name);\n    const _actioned = React__default.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    rules &&\n        control.register(name, rules);\n    React__default.useEffect(() => control._subjects.array.subscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n    }).unsubscribe, [control]);\n    const updateValues = React__default.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._setFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        !Array.isArray(get(control._fields, name)) &&\n            set(control._fields, name, undefined);\n        control._setFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._setFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._setFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React__default.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted) &&\n            !getValidationModes(control._options.reValidateMode).isOnSubmit) {\n            if (control._options.resolver) {\n                control._runSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._names.disabled, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.state.next({\n            name,\n            values: cloneObject(control._formValues),\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._setValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React__default.useEffect(() => {\n        !get(control._formValues, name) && control._setFieldArray(name);\n        return () => {\n            const updateMounted = (name, value) => {\n                const field = get(control._fields, name);\n                if (field && field._f) {\n                    field._f.mount = value;\n                }\n            };\n            control._options.shouldUnregister || shouldUnregister\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React__default.useCallback(swap, [updateValues, name, control]),\n        move: React__default.useCallback(move, [updateValues, name, control]),\n        prepend: React__default.useCallback(prepend, [updateValues, name, control]),\n        append: React__default.useCallback(append, [updateValues, name, control]),\n        remove: React__default.useCallback(remove, [updateValues, name, control]),\n        insert: React__default.useCallback(insert$1, [updateValues, name, control]),\n        update: React__default.useCallback(update, [updateValues, name, control]),\n        replace: React__default.useCallback(replace, [updateValues, name, control]),\n        fields: React__default.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React__default.useRef(undefined);\n    const _values = React__default.useRef(undefined);\n    const [formState, updateFormState] = React__default.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        isReady: false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...(props.formControl ? props.formControl : createFormControl(props)),\n            formState,\n        };\n        if (props.formControl &&\n            props.defaultValues &&\n            !isFunction(props.defaultValues)) {\n            props.formControl.reset(props.defaultValues, props.resetOptions);\n        }\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useIsomorphicLayoutEffect(() => {\n        const sub = control._subscribe({\n            formState: control._proxyFormState,\n            callback: () => updateFormState({ ...control._formState }),\n            reRenderRoot: true,\n        });\n        updateFormState((data) => ({\n            ...data,\n            isReady: true,\n        }));\n        control._formState.isReady = true;\n        return sub;\n    }, [control]);\n    React__default.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React__default.useEffect(() => {\n        if (props.mode) {\n            control._options.mode = props.mode;\n        }\n        if (props.reValidateMode) {\n            control._options.reValidateMode = props.reValidateMode;\n        }\n        if (props.errors && !isEmptyObject(props.errors)) {\n            control._setErrors(props.errors);\n        }\n    }, [control, props.errors, props.mode, props.reValidateMode]);\n    React__default.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.state.next({\n                values: control._getWatch(),\n            });\n    }, [control, props.shouldUnregister]);\n    React__default.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React__default.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [control, props.values]);\n    React__default.useEffect(() => {\n        if (!control._state.mount) {\n            control._setValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, createFormControl, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","\"use client\";\n\nimport * as React from \"react\";\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\";\nimport { cn } from \"@/lib/utils\";\n\ninterface TooltipProviderProps extends TooltipPrimitive.TooltipProviderProps {\n  delayDuration?: number;\n}\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: TooltipProviderProps) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  );\n}\n\nfunction Tooltip(props: TooltipPrimitive.TooltipProps) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  );\n}\n\nfunction TooltipTrigger(props: TooltipPrimitive.TooltipTriggerProps) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />;\n}\n\ninterface TooltipContentProps extends TooltipPrimitive.TooltipContentProps {\n  className?: string;\n  children?: React.ReactNode;\n  sideOffset?: number;\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: TooltipContentProps) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  );\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n","import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { format, parse, isValid, getYear } from \"date-fns\";\nimport {\n  useRef,\n  useState,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useCallback,\n} from \"react\";\nimport { CalendarIcon, CircleAlert, CircleCheck } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useFormContext } from \"react-hook-form\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { TZDate } from \"react-day-picker\";\n\ntype DateTimeInputProps = {\n  className?: string;\n  value?: Date;\n  onChange?: (date?: Date) => void;\n  onKeyDown?: (event: React.KeyboardEvent<Element>) => void;\n  onBlur?: (event: React.FocusEvent<Element>) => void;\n  format?: string;\n  disabled?: boolean;\n  clearable?: boolean;\n  timezone?: string;\n  hideCalendarIcon?: boolean;\n  onCalendarClick?: () => void;\n};\n\n// https://date-fns.org/v4.1.0/docs/format\ntype SegmentType =\n  | \"year\"\n  | \"month\"\n  | \"date\"\n  | \"hour\"\n  | \"minute\"\n  | \"second\"\n  | \"period\"\n  | \"space\";\n\nconst segmentConfigs = [\n  {\n    type: \"year\" as SegmentType,\n    symbols: [\"y\"],\n  },\n  {\n    type: \"month\" as SegmentType,\n    symbols: [\"M\"],\n  },\n  {\n    type: \"date\" as SegmentType,\n    symbols: [\"d\"],\n  },\n  {\n    type: \"hour\" as SegmentType,\n    symbols: [\"h\", \"H\"],\n  },\n  {\n    type: \"minute\" as SegmentType,\n    symbols: [\"m\"],\n  },\n  {\n    type: \"second\" as SegmentType,\n    symbols: [\"s\"],\n  },\n  {\n    type: \"period\" as SegmentType,\n    symbols: [\"a\"],\n  },\n  {\n    type: \"space\" as SegmentType,\n    symbols: [\" \", \"/\", \"-\", \":\", \",\", \".\"],\n  },\n];\n\nconst mergeRefs = (...refs: any) => {\n  return (node: any) => {\n    for (const ref of refs) {\n      if (ref) ref.current = node;\n    }\n  };\n};\nconst DateTimeInput = React.forwardRef<HTMLInputElement, DateTimeInputProps>(\n  (options: DateTimeInputProps, ref) => {\n    const {\n      format: formatProp,\n      value: _value,\n      timezone,\n      onKeyDown: onKeyDownCustom,\n      ...rest\n    } = options;\n    const value = useMemo(\n      () => (_value ? new TZDate(_value, timezone) : undefined),\n      [_value, timezone]\n    );\n    const form = useFormContext();\n    const formatStr = React.useMemo(\n      () => formatProp || \"dd/MM/yyyy-hh:mm aa\",\n      [formatProp]\n    );\n    const inputRef = useRef<HTMLInputElement | null>(null);\n\n    const [segments, setSegments] = useState<Segment[]>([]);\n    const [selectedSegmentAt, setSelectedSegmentAt] = useState<\n      number | undefined\n    >(undefined);\n\n    useEffect(() => {\n      if (form?.formState.isSubmitted) {\n        setSegments(parseFormat(formatStr, value));\n      }\n    }, [form?.formState.isSubmitted]);\n    useEffect(() => {\n      // console.error('valueChanged', {formatStr, inputStr, value});\n      setSegments(parseFormat(formatStr, value));\n    }, [formatStr, value]);\n\n    const curSegment = useMemo(() => {\n      if (\n        selectedSegmentAt === undefined ||\n        selectedSegmentAt < 0 ||\n        selectedSegmentAt >= segments.length\n      )\n        return undefined;\n      return segments[selectedSegmentAt];\n    }, [segments, selectedSegmentAt]);\n    const setCurrentSegment = useCallback(\n      (segment: Segment | undefined) => {\n        const at = segments?.findIndex((s) => s.index === segment?.index);\n        at !== -1 && setSelectedSegmentAt(at);\n      },\n      [segments, setSelectedSegmentAt]\n    );\n\n    const validSegments = useMemo(\n      () => segments.filter((s) => s.type !== \"space\"),\n      [segments]\n    );\n    const inputStr = useMemo(() => {\n      return segments\n        .map((s) =>\n          s.value ? s.value.padStart(s.symbols.length, \"0\") : s.symbols\n        )\n        .join(\"\");\n    }, [segments]);\n    const areAllSegmentsEmpty = useMemo(\n      () => validSegments.every((s) => !s.value),\n      [validSegments]\n    );\n\n    const inputValue = useMemo(() => {\n      const allHasValue = !validSegments.some((s) => !s.value);\n      if (!allHasValue) return;\n      const date = parse(\n        inputStr,\n        formatStr,\n        value || new TZDate(new Date(), timezone)\n      );\n      const year = getYear(date);\n      if (isValid(date) && year > 1900 && year < 2100) {\n        return date;\n      }\n    }, [validSegments, inputStr, formatStr]);\n    useEffect(() => {\n      if (!inputValue) return;\n      if (value?.getTime() !== inputValue.getTime()) {\n        options.onChange?.(inputValue);\n      }\n    }, [inputValue]);\n\n    const onClick = useEventCallback(\n      (event: React.MouseEvent<HTMLInputElement>) => {\n        event.preventDefault();\n        event.stopPropagation();\n        const selectionStart = inputRef.current?.selectionStart;\n        if (\n          inputRef.current &&\n          selectionStart !== undefined &&\n          selectionStart !== null\n        ) {\n          const validSegments = segments.filter((s) => s.type !== \"space\");\n          let segment = validSegments.find(\n            (s) =>\n              s.index <= selectionStart &&\n              s.index + s.symbols.length >= selectionStart\n          );\n          !segment &&\n            (segment = [...validSegments]\n              .reverse()\n              .find((s) => s.index <= selectionStart));\n          !segment &&\n            (segment = validSegments.find((s) => s.index >= selectionStart));\n          setCurrentSegment(segment);\n          setSelection({ current: inputRef.current }, segment);\n        }\n      },\n      [segments]\n    );\n\n    const onSegmentChange = useEventCallback(\n      (direction: \"left\" | \"right\") => {\n        if (!curSegment) return;\n        const validSegments = segments.filter((s) => s.type !== \"space\");\n        const segment =\n          direction === \"left\"\n            ? [...validSegments]\n                .reverse()\n                .find((s) => s.index < curSegment.index)\n            : validSegments.find((s) => s.index > curSegment.index);\n        if (segment && inputRef.current) {\n          setCurrentSegment(segment);\n          setSelection({ current: inputRef.current }, segment);\n        }\n      },\n      [segments, curSegment]\n    );\n\n    const onSegmentNumberValueChange = useEventCallback(\n      (num: string) => {\n        if (!curSegment) return;\n        let segment = curSegment;\n        let shouldNext = false;\n        if (segment.type !== \"period\") {\n          const length = segment.symbols.length;\n          const rawValue = parseInt(segment.value).toString();\n          let newValue = rawValue.length < length ? rawValue + num : num;\n          let parsedDate = parse(\n            newValue.padStart(length, \"0\"),\n            segment.symbols,\n            safeDate(timezone)\n          );\n          if (!isValid(parsedDate) && newValue.length > 1) {\n            newValue = num;\n            parsedDate = parse(newValue, segment.symbols, safeDate(timezone));\n          }\n          const updatedSegments = segments.map((s) =>\n            s.index === segment.index ? { ...segment, value: newValue } : s\n          );\n          setSegments(updatedSegments);\n          segment = updatedSegments.find((s) => s.index === segment.index)!;\n          shouldNext = newValue.length === length;\n          if (!shouldNext) {\n            switch (segment.type) {\n              case \"month\":\n                shouldNext = +newValue > 1;\n                break;\n              case \"date\":\n                shouldNext = +newValue > 3;\n                break;\n              case \"hour\":\n                shouldNext =\n                  +newValue > (segment.symbols.includes(\"H\") ? 2 : 1);\n                break;\n              case \"minute\":\n              case \"second\":\n                shouldNext = +newValue > 5;\n                break;\n              default:\n                break;\n            }\n          }\n        }\n        shouldNext\n          ? onSegmentChange(\"right\")\n          : inputRef.current &&\n            setSelection({ current: inputRef.current }, segment);\n      },\n      [segments, curSegment]\n    );\n\n    const onSegmentPeriodValueChange = useEventCallback(\n      (key: string) => {\n        if (curSegment?.type !== \"period\") return;\n        let segment = curSegment;\n        let ok = false;\n        let newValue = \"\";\n        if (key?.toLowerCase() === \"a\") {\n          newValue = \"AM\";\n          ok = true;\n        } else if (key?.toLowerCase() === \"p\") {\n          newValue = \"PM\";\n          ok = true;\n        }\n        if (ok) {\n          const updatedSegments = segments.map((s) =>\n            s.index === segment.index ? { ...segment, value: newValue } : s\n          );\n          setSegments(updatedSegments);\n          segment = updatedSegments.find((s) => s.index === segment.index)!;\n        }\n        if (inputRef.current)\n          setSelection({ current: inputRef.current }, segment);\n      },\n      [segments, curSegment]\n    );\n\n    const onSegmentValueRemove = useEventCallback(() => {\n      if (!curSegment) return;\n      if (curSegment.value) {\n        const updatedSegments = segments.map((s) =>\n          s.index === curSegment.index ? { ...curSegment, value: \"\" } : s\n        );\n        setSegments(updatedSegments);\n        const segment = updatedSegments.find(\n          (s) => s.index === curSegment.index\n        )!;\n        if (inputRef.current)\n          setSelection({ current: inputRef.current }, segment);\n      } else {\n        onSegmentChange(\"left\");\n      }\n    }, [segments, curSegment]);\n\n    const onKeyDown = useEventCallback(\n      (event: React.KeyboardEvent<HTMLInputElement>) => {\n        const key = event.key;\n        if (inputRef.current)\n          setSelection({ current: inputRef.current }, curSegment);\n        if (inputValue) {\n          onKeyDownCustom?.(event);\n        }\n        switch (key) {\n          case \"ArrowRight\":\n          case \"ArrowLeft\":\n            onSegmentChange(key === \"ArrowRight\" ? \"right\" : \"left\");\n            event.preventDefault();\n            break;\n          // case 'ArrowUp':\n          // case 'ArrowDown':\n          //   // onSegmentValueChange?.(event);\n          //   event.preventDefault();\n          //   break;\n          case \"Backspace\":\n            onSegmentValueRemove();\n            event.preventDefault();\n            break;\n\n          case key.match(/\\d/)?.input:\n            onSegmentNumberValueChange(key);\n            event.preventDefault();\n            break;\n          case key.match(/[a-z]/)?.[0]:\n            onSegmentPeriodValueChange(key);\n            event.preventDefault();\n            break;\n        }\n      },\n      [inputValue]\n    );\n\n    const [isFocused, setIsFocused] = useState(false);\n    const onBlur = useEventCallback(\n      (event: React.FocusEvent<Element>) => {\n        setIsFocused(false);\n        if (inputValue) options.onBlur?.(event);\n      },\n      [inputValue]\n    );\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex h-10 items-center justify-start rounded-md border border-input bg-background text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground  disabled:cursor-not-allowed disabled:opacity-50\",\n          isFocused ? \"outline-none ring-2 ring-ring ring-offset-2\" : \"\",\n          options.hideCalendarIcon && \"ps-2\",\n          options.className\n        )}\n      >\n        {!options.hideCalendarIcon && (\n          <Button variant=\"ghost\" size=\"icon\" onClick={options.onCalendarClick}>\n            <CalendarIcon className=\"size-4 text-muted-foreground\" />\n          </Button>\n        )}\n        <input\n          ref={mergeRefs(inputRef)}\n          className=\"font-mono flex-grow min-w-0 bg-transparent py-1 pe-2 text-sm focus:outline-none disabled:cursor-not-allowed disabled:opacity-50\"\n          onFocus={() => setIsFocused(true)}\n          onBlur={onBlur}\n          onClick={onClick}\n          onKeyDown={onKeyDown}\n          value={inputStr}\n          placeholder={formatStr}\n          onChange={() => {}}\n          disabled={options.disabled}\n          spellCheck={false}\n        />\n        <div className=\"me-3\">\n          {inputValue ? (\n            <CircleCheck className=\"size-4 text-green-500\" />\n          ) : (\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger className=\"flex items-center justify-center\">\n                  <CircleAlert\n                    className={cn(\n                      \"size-4\",\n                      !areAllSegmentsEmpty && \"text-red-500\"\n                    )}\n                  />\n                </TooltipTrigger>\n                <TooltipContent className=\"w-[160px]\">\n                  <p>\n                    Please enter a valid value. The input cannot be empty and\n                    must be within the range of years 1900 to 2100.\n                  </p>\n                </TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n\nDateTimeInput.displayName = \"DateTimeInput\";\n\nexport { DateTimeInput };\n\ninterface Segment {\n  type: SegmentType;\n  symbols: string;\n  index: number;\n  value: string;\n}\nfunction parseFormat(formatStr: string, value?: Date) {\n  const views: Segment[] = [];\n  let lastPattern: any = \"\";\n  let symbols = \"\";\n  let patternIndex = 0;\n  let index = 0;\n  for (const c of formatStr) {\n    const pattern = segmentConfigs.find((p) => p.symbols.includes(c))!;\n    if (!pattern) continue;\n    if (pattern.type !== lastPattern) {\n      symbols &&\n        views.push({\n          type: lastPattern,\n          symbols,\n          index: patternIndex,\n          value: value ? format(value, symbols) : \"\",\n        });\n      lastPattern = pattern?.type || \"\";\n      symbols = c;\n      patternIndex = index;\n    } else {\n      symbols += c;\n    }\n    index++;\n  }\n  symbols &&\n    views.push({\n      type: lastPattern,\n      symbols,\n      index: patternIndex,\n      value: value ? format(value, symbols) : \"\",\n    });\n  return views;\n}\n\nconst safeDate = (timezone?: string) => {\n  return new TZDate(\"2000-01-01T00:00:00\", timezone);\n};\n\nconst isAndroid = () => /Android/i.test(navigator.userAgent);\n\nfunction setSelection(\n  ref: React.MutableRefObject<HTMLInputElement | undefined>,\n  segment?: Segment\n) {\n  if (!ref.current || !segment) return;\n  safeSetSelection(\n    ref.current,\n    segment.index,\n    segment.index + segment.symbols.length\n  );\n}\n\nfunction safeSetSelection(\n  element: HTMLInputElement,\n  selectionStart: number,\n  selectionEnd: number\n) {\n  requestAnimationFrame(() => {\n    if (document.activeElement === element) {\n      if (isAndroid()) {\n        requestAnimationFrame(() => {\n          element.setSelectionRange(selectionStart, selectionEnd, \"none\");\n        });\n      } else {\n        element.setSelectionRange(selectionStart, selectionEnd, \"none\");\n      }\n    }\n  });\n}\nexport function useEventCallback<T extends Function>(fn: T, deps: any[]) {\n  const ref = useRef(fn);\n  useIsomorphicLayoutEffect(() => {\n    ref.current = fn;\n  });\n  return useCallback((...args: any[]) => {\n    return ref.current?.(...args);\n  }, deps);\n}\n\nexport const useIsomorphicLayoutEffect =\n  typeof document !== \"undefined\" ? useLayoutEffect : useEffect;\n","import { Input } from \"@/components/ui/input\";\n\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nimport React, { useRef, useEffect } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { DateTimePicker } from \"@/components/datetime-picker\";\nimport { SimpleTimePicker } from \"@/components/simple-time-picker\";\nimport { DateTimeInput } from \"../datetime-input\";\nimport moment from \"moment\";\n\n// Define proper types for editor components\ninterface EditorProps<T = string | boolean | Date | number> {\n  value: T | null;\n  onChange: (value: T | null) => void;\n  onBlur?: () => void;\n  onKeyDown?: (e: React.KeyboardEvent<Element>) => void;\n  placeholder?: string;\n  hideTime?: boolean;\n  [key: string]: unknown;\n}\n\ninterface SelectOption {\n  value: string;\n  label: string;\n}\ninterface SelectEditorProps extends EditorProps<string> {\n  options: SelectOption[];\n}\n\ninterface DateEditorProps extends EditorProps<Date> {\n  valueFormatter?: (value: string | boolean | Date | number | null) => string;\n}\n\ninterface TimeEditorProps extends EditorProps<string> {\n  valueFormatter?: (value: string | null) => string;\n}\n\ninterface NumberEditorProps extends EditorProps<number> {\n  min?: number;\n  max?: number;\n  step?: number;\n}\n\ntype TextEditorProps = EditorProps<string>;\n\n// Editor Components\nconst TextEditor = ({\n  value,\n  onChange,\n  onKeyDown,\n  placeholder,\n  onBlur,\n}: TextEditorProps) => {\n  return (\n    <Input\n      type=\"text\"\n      value={value as string}\n      autoFocus={true}\n      onChange={(e: { target: { value: string | null } }) =>\n        onChange(e.target.value as string | null)\n      }\n      onBlur={onBlur}\n      onKeyDown={onKeyDown}\n      placeholder={placeholder as string}\n      className=\"h-8 text-sm\"\n    />\n  );\n};\n\nconst NumberEditor = ({\n  value,\n  onChange,\n  onBlur,\n  onKeyDown,\n  min,\n  max,\n  step,\n  placeholder,\n}: NumberEditorProps) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (\n      [46, 8, 9, 27, 13, 110, 190].indexOf(e.keyCode) !== -1 ||\n      (e.keyCode >= 65 && e.keyCode <= 90 && e.ctrlKey === true) ||\n      (e.keyCode >= 35 && e.keyCode <= 39) ||\n      (e.keyCode >= 48 && e.keyCode <= 57) ||\n      (e.keyCode >= 96 && e.keyCode <= 105)\n    ) {\n      return;\n    }\n    e.preventDefault();\n  };\n\n  return (\n    <Input\n      ref={inputRef}\n      type=\"number\"\n      inputMode=\"decimal\"\n      value={value !== null ? String(value) : \"\"}\n      onChange={(e: { target: { value: string } }) => {\n        const val = e.target.value;\n        if (val === \"\" || /^\\d*\\.?\\d*$/.test(val)) {\n          const numVal = val === \"\" ? null : Number(val);\n          onChange(numVal as number | null);\n        }\n      }}\n      onBlur={onBlur}\n      onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\n        handleKeyDown(e);\n        if (onKeyDown) onKeyDown(e);\n      }}\n      min={min as number}\n      max={max as number}\n      step={step as number}\n      placeholder={placeholder as string}\n      className=\"h-8 text-sm\"\n    />\n  );\n};\n\nconst SelectEditor = ({ value, onChange, options = [] }: SelectEditorProps) => {\n  return (\n    <div className=\"w-full\">\n      <Select\n        value={value as string}\n        onValueChange={onChange}\n        defaultOpen={true}\n      >\n        <SelectTrigger className=\"w-[160px]\">\n          <SelectValue placeholder=\"Select option\" />\n        </SelectTrigger>\n        <SelectContent className=\"w-[160px]\">\n          <SelectGroup className=\"p-1\">\n            {options.length > 0 ? (\n              options.map((opt: SelectOption) => (\n                <SelectItem\n                  key={opt.value}\n                  value={opt.value}\n                  className={cn(\n                    \"h-8 py-1 px-2 text-sm cursor-pointer\",\n                    \"focus:bg-accent focus:text-accent-foreground\"\n                  )}\n                >\n                  {opt.label}\n                </SelectItem>\n              ))\n            ) : (\n              <div className=\"p-2 text-sm text-muted-foreground text-center\">\n                No options found\n              </div>\n            )}\n          </SelectGroup>\n        </SelectContent>\n      </Select>\n    </div>\n  );\n};\n\nconst DateEditor = ({ value, onChange, hideTime = true }: DateEditorProps) => {\n  const [date, setDate] = React.useState<Date>(\n    value ? new Date(value as unknown as string) : new Date()\n  );\n\n  const handleDateSelect = (selectedDate: Date | undefined) => {\n    if (selectedDate) {\n      setDate(selectedDate);\n      onChange(selectedDate);\n    }\n  };\n\n  const handleDayKeyDown = (\n    value: Date,\n    event: React.KeyboardEvent<Element>\n  ) => {\n    if (event.key === \"Enter\" || event.key === \"Escape\") {\n      setDate(value);\n      onChange(value);\n    }\n  };\n\n  return (\n    <div className=\"w-full\">\n      <DateTimePicker\n        value={date}\n        onChange={handleDateSelect}\n        hideTime={hideTime}\n        onDayKeyDown={(value, _params, event) => {\n          handleDayKeyDown(value, event);\n        }}\n        timePicker={{ hour: true, minute: true, second: false }}\n        renderTrigger={({ open, value, setOpen }) => (\n          <DateTimeInput\n            value={value}\n            clearable\n            hideCalendarIcon={false}\n            onChange={(val: Date | undefined) => {\n              if (val) setDate(val);\n            }}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\" || e.key === \"Escape\") {\n                onChange(date);\n              }\n            }}\n            onBlur={() => {\n              onChange(date);\n            }}\n            format={hideTime ? \"MM-dd-yyyy\" : \"MM-dd-yyyy HH:mm\"}\n            disabled={open}\n            onCalendarClick={() => setOpen(!open)}\n          />\n        )}\n      />\n    </div>\n  );\n};\n\nconst TimeEditor = ({ value, onChange }: TimeEditorProps) => {\n  const timeNow = new Date(value as string);\n  // Helper to convert \"HH:mm\" string to Date object (today's date)\n  // const parseTimeStringToDate = (timeStr: string | null): Date => {\n  //   if (!timeStr) return new Date();\n  //   const [hours, minutes] = timeStr.split(\":\").map(Number);\n  //   const date = new Date();\n  //   if (!isNaN(hours) && !isNaN(minutes)) {\n  //     date.setHours(hours, minutes, 0, 0);\n  //     return date;\n  //   }\n  //   return new Date();\n  // };\n\n  // // Helper to convert Date object to \"HH:mm\" string\n  // const formatDateToTimeString = (date: Date): string => {\n  //   const hours = date.getHours().toString().padStart(2, \"0\");\n  //   const minutes = date.getMinutes().toString().padStart(2, \"0\");\n  //   return `${hours}:${minutes}`;\n  // };\n\n  // // Always keep a Date object for the picker\n  // const [timeValue, setTimeValue] = React.useState<Date>(\n  //   typeof value === \"string\" ? parseTimeStringToDate(value) : new Date()\n  // );\n\n  const handleTimeChange = () => {};\n\n  return (\n    <SimpleTimePicker\n      use12HourFormat={true}\n      value={timeNow}\n      onChange={handleTimeChange}\n      onSubmit={(value) => {\n        onChange(moment(value).format());\n      }}\n    />\n  );\n};\n\n// CellEditor Wrapper\ninterface CellEditorProps {\n  columnDef: {\n    editorType: EditorType;\n    editorParams?: EditorParamsType;\n  };\n  value: string | boolean | Date | number | null;\n  onChange: (value: string | boolean | Date | number | null) => void;\n  onBlur?: () => void;\n  onKeyDown?: (e: React.KeyboardEvent<Element>) => void;\n  valueFormatter?: (params: {\n    value: unknown;\n    data: Record<string, unknown>;\n    node?: unknown;\n  }) => string;\n}\n\ninterface EditorParamsType {\n  placeholder?: string;\n  label?: string;\n  options?: SelectOption[];\n  min?: number;\n  max?: number;\n  step?: number;\n}\n\nexport type EditorType =\n  | \"text\"\n  | \"number\"\n  | \"select\"\n  | \"date\"\n  | \"time\"\n  | \"dateTime\";\n\ntype EditorValueType = {\n  text: string;\n  number: number;\n  select: string;\n  date: Date;\n  time: string;\n  dateTime: Date;\n};\n\ntype EditorPropsMap = {\n  [K in EditorType]: {\n    value: EditorValueType[K] | null;\n    onChange: (value: EditorValueType[K] | null) => void;\n    onBlur?: () => void;\n    onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n    placeholder?: string;\n    label?: string;\n    options?: SelectOption[];\n    min?: number;\n    max?: number;\n    step?: number;\n    hideTime?: boolean;\n    valueFormatter?: (value: string | boolean | Date | number | null) => string;\n  };\n};\n\ntype TypedEditorProps = EditorPropsMap[EditorType];\n\nconst CellEditor = ({\n  columnDef,\n  value,\n  onChange,\n  onBlur,\n  onKeyDown,\n  valueFormatter,\n}: CellEditorProps) => {\n  const { editorType, editorParams = {} } = columnDef;\n  const typedParams = editorParams as EditorParamsType;\n\n  const editors: Record<EditorType, React.ComponentType<TypedEditorProps>> = {\n    text: TextEditor as React.ComponentType<TypedEditorProps>,\n    number: NumberEditor as React.ComponentType<TypedEditorProps>,\n    select: SelectEditor as React.ComponentType<TypedEditorProps>,\n    date: DateEditor as React.ComponentType<TypedEditorProps>,\n    time: TimeEditor as React.ComponentType<TypedEditorProps>,\n    dateTime: DateEditor as React.ComponentType<TypedEditorProps>,\n  };\n\n  const Editor = editors[editorType as EditorType];\n\n  const editorProps = {\n    value,\n    onChange,\n    onKeyDown,\n    placeholder: typedParams.placeholder,\n    label: typedParams.label,\n    options: typedParams.options,\n    min: typedParams.min,\n    max: typedParams.max,\n    step: typedParams.step,\n    valueFormatter: valueFormatter,\n    onBlur: onBlur,\n  } as TypedEditorProps;\n  const additionalProps = editorType === \"dateTime\" ? { hideTime: false } : {};\n\n  return Editor ? (\n    <div\n      className={`w-full ${\n        editorType === \"text\" || editorType === \"number\" ? \"px-2\" : \"\"\n      } h-full flex items-center justify-center`}\n    >\n      <Editor {...editorProps} {...additionalProps} />\n    </div>\n  ) : (\n    <>{String(value || \"\")}</>\n  );\n};\n\nexport default CellEditor;\n","import * as React from \"react\";\nimport * as SwitchPrimitive from \"@radix-ui/react-switch\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface SwitchProps\n  extends React.ComponentPropsWithoutRef<typeof SwitchPrimitive.Root> {\n  className?: string;\n}\n\nfunction Switch({ className, ...props }: SwitchProps) {\n  return (\n    <SwitchPrimitive.Root\n      data-slot=\"switch\"\n      className={cn(\n        \"peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <SwitchPrimitive.Thumb\n        data-slot=\"switch-thumb\"\n        className={cn(\n          \"bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0\"\n        )}\n      />\n    </SwitchPrimitive.Root>\n  );\n}\n\nexport { Switch };\n","import { ColumnDef, ColumnDefProps } from \"@/types/grid\";\nimport { useCallback } from \"react\";\n\ntype CookedRow = Record<string, unknown>;\n\n// --- MAIN HOOK ---\nexport function useCookedData(columnDefs: ColumnDefProps) {\n  const getCookedSingleRow = useCallback(\n    (\n      row: Record<string, unknown>,\n      columns: ColumnDef[],\n      parentData?: Record<string, unknown>\n    ) => {\n      let updatedRow = { row };\n      columns.map((col) => {\n        if (col.valueGetter) {\n          const computedValue = col.valueGetter({\n            data: row,\n            parentData,\n          });\n          updatedRow = { ...updatedRow, [col.field]: computedValue };\n        } else {\n          updatedRow = { ...updatedRow, [col.field]: row[col.field] };\n        }\n        return col.field;\n      });\n\n      return updatedRow;\n    },\n    []\n  );\n\n  const processChildRow = useCallback(\n    (\n      childRow: Record<string, unknown>,\n      parentRow: Record<string, unknown>\n    ): CookedRow => {\n      const cookedChild: CookedRow = { ...childRow };\n\n      columnDefs.detailGridOptions?.columns?.forEach((col) => {\n        if (typeof col.valueGetter === \"function\") {\n          const cookedRow = getCookedSingleRow(\n            childRow,\n            columnDefs.detailGridOptions?.columns || [],\n            parentRow\n          );\n          cookedChild[col.field] = col.valueGetter({\n            data: childRow,\n            cookedRow: cookedRow,\n            parentData: parentRow,\n          });\n        } else {\n          cookedChild[col.field] = childRow[col.field];\n        }\n      });\n\n      return cookedChild;\n    },\n    [columnDefs.detailGridOptions]\n  );\n\n  const getCookedRow = useCallback(\n    (row: Record<string, unknown>): CookedRow => {\n      const cookedRow: CookedRow = { ...row };\n\n      // 1. Process children first (bottom-up)\n      if (\n        Array.isArray(row.children) &&\n        columnDefs.detailGridOptions?.columns\n      ) {\n        cookedRow.children = row.children.map((childRow) =>\n          processChildRow(childRow, row)\n        );\n      }\n      // 2. Then process parent row using current cookedRow\n      columnDefs.columns?.forEach((col) => {\n        if (typeof col.valueGetter === \"function\") {\n          cookedRow[col.field] = col.valueGetter({\n            data: row,\n            cookedRow: { ...row, ...cookedRow },\n          });\n        } else {\n          cookedRow[col.field] = row[col.field];\n        }\n      });\n      return cookedRow;\n    },\n    [columnDefs.columns, columnDefs.detailGridOptions, processChildRow]\n  );\n\n  const getCookedData = useCallback(\n    (data: Record<string, unknown>[]): CookedRow[] => {\n      return data.map((row) => getCookedRow(row));\n    },\n    [getCookedRow]\n  );\n\n  return { getCookedData };\n}\n","import { DateTimePicker } from \"@/components/datetime-picker\";\nimport { SimpleTimePicker } from \"@/components/simple-time-picker\";\nimport { DateTimeInput } from \"@/components/datetime-input\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, X } from \"lucide-react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n} from \"@/components/ui/select\";\nimport { ColumnDef } from \"@/types/grid\";\nimport React, { useEffect } from \"react\";\n\n// Export utility functions\nexport const IsDateType = (type?: string) => type === \"date\";\nexport const IsTimeType = (type?: string) => type === \"time\";\nexport const IsDateTimeType = (type?: string) =>\n  type === \"datetime\" || type === \"dateTime\";\n\nexport const GetDefaultFilterType = (col: ColumnDef) => {\n  if (col.type === \"number\") return \"equals\";\n  if (col.type === \"date\") return \"equals\";\n  if (col.type === \"time\") return \"equals\";\n  if (col.type === \"dateTime\") return \"equals\";\n  return \"contains\";\n};\n\nexport const GetAvailableFilterTypes = (col: ColumnDef) => {\n  if (col.type === \"number\") {\n    return [\n      { value: \"equals\", label: \"Equals\" },\n      { value: \"greaterThan\", label: \"Greater Than\" },\n      { value: \"lessThan\", label: \"Less Than\" },\n    ];\n  }\n  if (IsDateType(col.type)) {\n    return [\n      { value: \"equals\", label: \"Equals\" },\n      { value: \"before\", label: \"Before\" },\n      { value: \"after\", label: \"After\" },\n    ];\n  }\n  if (IsTimeType(col.type)) {\n    return [\n      { value: \"equals\", label: \"Equals\" },\n      { value: \"before\", label: \"Before\" },\n      { value: \"after\", label: \"After\" },\n    ];\n  }\n  if (IsDateTimeType(col.type)) {\n    return [\n      { value: \"equals\", label: \"Equals\" },\n      { value: \"before\", label: \"Before\" },\n      { value: \"after\", label: \"After\" },\n    ];\n  }\n  return [\n    { value: \"contains\", label: \"Contains\" },\n    { value: \"equals\", label: \"Equals\" },\n    { value: \"startsWith\", label: \"Starts with\" },\n    { value: \"endsWith\", label: \"Ends with\" },\n  ];\n};\n\ninterface CellFilterProps {\n  column: ColumnDef;\n  value: string;\n  filterType: string;\n  onFilterChange: (value: string) => void;\n  onFilterTypeChange: (type: string) => void;\n  onClear: () => void;\n}\n\nexport const CellFilter = ({\n  column,\n  value,\n  filterType,\n  onFilterChange,\n  onFilterTypeChange,\n  onClear,\n}: CellFilterProps) => {\n  const availableFilterTypes = GetAvailableFilterTypes(column);\n  const defaultFilterType = GetDefaultFilterType(column);\n\n  // Initialize filter type if not set\n  useEffect(() => {\n    if (!filterType) {\n      onFilterTypeChange(defaultFilterType);\n    }\n  }, [filterType, defaultFilterType, onFilterTypeChange]);\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex items-center justify-between\">\n        <span className=\"text-sm font-medium text-gray-700\">\n          Filter: {column.headerName}\n        </span>\n        {value && (\n          <button\n            onClick={onClear}\n            className=\"hover:text-gray-900 p-1 hover:bg-gray-100 rounded\"\n          >\n            <X className=\"h-3 w-3\" />\n          </button>\n        )}\n      </div>\n      <Select\n        value={filterType || defaultFilterType}\n        onValueChange={onFilterTypeChange}\n      >\n        <SelectTrigger className=\"w-full text-sm\">\n          {\n            availableFilterTypes.find(\n              (type) => type.value === (filterType || defaultFilterType)\n            )?.label\n          }\n        </SelectTrigger>\n        <SelectContent className=\"w-full max-h-[200px]\">\n          {availableFilterTypes.map((type) => (\n            <SelectItem\n              key={type.value}\n              value={type.value}\n              className=\"h-8 py-1 px-2 text-sm cursor-pointer\"\n            >\n              {type.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n\n      <label className=\"text-xs font-medium text-gray-500\">\n        {IsDateType(column.type)\n          ? \"Date\"\n          : IsTimeType(column.type)\n            ? \"Time\"\n            : IsDateTimeType(column.type)\n              ? \"DateTime\"\n              : \"Search\"}\n      </label>\n\n      {IsDateType(column.type) ? (\n        <DateTimePicker\n          value={value ? new Date(value) : undefined}\n          onChange={(val) => {\n            onFilterChange(val ? val.toISOString() : \"\");\n          }}\n          hideTime={true}\n          renderTrigger={({ open, value, setOpen }) => (\n            <DateTimeInput\n              value={value}\n              onChange={(val) => {\n                onFilterChange(val ? val.toISOString() : \"\");\n              }}\n              format=\"MM-dd-yyyy\"\n              disabled={open}\n              onCalendarClick={() => setOpen(!open)}\n            />\n          )}\n        />\n      ) : IsTimeType(column.type) ? (\n        <SimpleTimePicker\n          value={value ? new Date(value) : new Date()}\n          onChange={(val) => {\n            onFilterChange(val ? val.toISOString() : \"\");\n          }}\n          use12HourFormat={true}\n        />\n      ) : IsDateTimeType(column.type) ? (\n        <DateTimePicker\n          value={value ? new Date(value) : undefined}\n          onChange={(val) => {\n            onFilterChange(val ? val.toISOString() : \"\");\n          }}\n          timePicker={{ hour: true, minute: true, second: false }}\n          renderTrigger={({ open, value, setOpen }) => (\n            <DateTimeInput\n              value={value}\n              onChange={(val) => {\n                onFilterChange(val ? val.toISOString() : \"\");\n              }}\n              format=\"MM-dd-yyyy hh:mm\"\n              disabled={open}\n              onCalendarClick={() => setOpen(!open)}\n            />\n          )}\n        />\n      ) : (\n        <div className=\"relative w-full\">\n          <Input\n            placeholder={`Filter ${column.headerName}`}\n            value={value || \"\"}\n            onChange={(e: { target: { value: string } }) =>\n              onFilterChange(e.target.value)\n            }\n            type=\"text\"\n            className=\"h-9 text-sm w-full pl-9 pr-3\"\n            style={{\n              height: \"2.25rem\",\n              fontSize: \"0.875rem\",\n              width: \"100%\",\n              paddingLeft: \"1.5rem\",\n              paddingRight: \"0.75rem\",\n            }}\n          />\n          <div\n            style={{\n              left: 5,\n              position: \"absolute\",\n              top: 0,\n              bottom: 0,\n              display: \"flex\",\n              alignItems: \"center\",\n              pointerEvents: \"none\",\n            }}\n          >\n            <Search className=\"h-4 w-4 text-gray-400\" />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { IPagination } from \"@/types/grid\";\nimport React from \"react\";\nimport {\n  ChevronRight,\n  ChevronLeft,\n  ChevronLast,\n  ChevronFirst,\n} from \"lucide-react\";\n\ninterface IServerPaginationProps {\n  paginationProps: IPagination;\n  data?: Record<string, unknown>[];\n}\n\nconst ServerPagination: React.FC<IServerPaginationProps> = ({\n  paginationProps,\n  data = [],\n}) => {\n  const {\n    paginationPageSize = 10,\n    paginationPageSizeSelector = [10],\n    paginationInfo,\n    onPageChange,\n    onPageSizeChange,\n  } = paginationProps || {};\n\n  // to handle navigation between pages\n  const handlePageChange = (page: number) => {\n    if (onPageChange) {\n      onPageChange(page);\n    }\n  };\n\n  // to handle navigation between page size\n  const handlePageSizeChange = (size: number) => {\n    if (onPageSizeChange) {\n      onPageSizeChange(size);\n    }\n  };\n\n  const pageSize = paginationInfo?.pageSize || paginationPageSize;\n  const currentPage = paginationInfo?.page || 1;\n  const totalPages = paginationInfo?.totalPages || 1;\n\n  return (\n    <>\n      {paginationProps && data?.length && (\n        <div className=\"w-full py-1 pr-4 bg-white mt-2 bg flex items-center gap-6 justify-end\">\n          <div className=\"flex items-center gap-2\">\n            <h2>Page Size</h2>\n\n            <select\n              className=\"border rounded px-2\"\n              value={pageSize}\n              onChange={(e) => handlePageSizeChange(Number(e.target.value))}\n            >\n              {paginationPageSizeSelector?.map((size: number) => (\n                <option key={size} value={size}>\n                  {size}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <h2>\n            {data.length === 0\n              ? \"0\"\n              : `${((currentPage - 1) * pageSize + 1).toLocaleString()} to ${(\n                  (currentPage - 1) * pageSize +\n                  data.length\n                ).toLocaleString()} of `}\n            <strong>\n              {paginationInfo?.totalCount?.toLocaleString() ??\n                data.length?.toLocaleString()}\n            </strong>\n          </h2>\n\n          <div className=\"flex items-center gap-1\">\n            <button\n              disabled={currentPage === 1}\n              className={`cursor-pointer ${\n                currentPage === 1 ? \"text-gray-500\" : \"\"\n              }`}\n              onClick={() => handlePageChange(1)}\n            >\n              <ChevronFirst size={15} />\n            </button>\n\n            <button\n              disabled={currentPage === 1}\n              className={`cursor-pointer ${\n                currentPage === 1 ? \"text-gray-500\" : \"\"\n              }`}\n              onClick={() => handlePageChange(currentPage - 1)}\n            >\n              <ChevronLeft size={15} />\n            </button>\n\n            <h2>\n              Page {currentPage?.toLocaleString()} of{\" \"}\n              {totalPages?.toLocaleString()}\n            </h2>\n\n            <button\n              disabled={currentPage === totalPages}\n              className={`cursor-pointer ${\n                currentPage === totalPages ? \"text-gray-500\" : \"\"\n              }`}\n              onClick={() => handlePageChange(currentPage + 1)}\n            >\n              <ChevronRight size={15} />\n            </button>\n\n            <button\n              disabled={currentPage === totalPages}\n              className={`cursor-pointer ${\n                currentPage === totalPages ? \"text-gray-500\" : \"\"\n              }`}\n              onClick={() => handlePageChange(totalPages || 1)}\n            >\n              <ChevronLast size={15} />\n            </button>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default ServerPagination;\n","import React from \"react\";\nimport { GripHorizontal, X } from \"lucide-react\";\nimport type { ColumnDef } from \"@/types/grid\";\n\ninterface GroupPanelProps {\n  showGroupByPanel: boolean;\n  groupedColumns: string[];\n  columns: ColumnDef[];\n  setColumnGrouped: (field: string, grouped: boolean) => void;\n  handleGroupDrop: (e: React.DragEvent) => void;\n}\n\nexport const GroupPanel: React.FC<GroupPanelProps> = ({\n  showGroupByPanel,\n  groupedColumns,\n  columns,\n  setColumnGrouped,\n  handleGroupDrop,\n}) => {\n  if (!showGroupByPanel) return null;\n\n  return (\n    <>\n      <div\n        className=\"min-h-[40px] border border-dashed border-[#353945] rounded flex flex-wrap gap-2 items-center p-2 bg-[#232733]\"\n        onDragOver={(e) => {\n          e.preventDefault();\n          e.dataTransfer.dropEffect = \"move\";\n        }}\n        onDrop={handleGroupDrop}\n      >\n        <span className=\"text-gray-400 text-sm\">\n          Drag columns here to group\n        </span>\n      </div>\n      <div className=\"p-2 flex flex-col gap-2\">\n        {groupedColumns.map((field, ind) => {\n          const col = columns.find((c) => c.field === field);\n\n          return (\n            <div\n              key={ind}\n              className=\"flex items-center justify-between bg-gray-700 px-2 py-1 rounded-full\"\n            >\n              <span className=\"flex items-center\">\n                <GripHorizontal className=\"w-3 h-3 mr-1\" />\n                {col?.headerName}\n              </span>\n\n              <button\n                onClick={() => setColumnGrouped(field, false)}\n                className=\"ml-1 hover:bg-gray-600 rounded-full p-1 cursor-pointer\"\n              >\n                <X className=\"h-3 w-3\" />\n              </button>\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useMemo } from \"react\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { List, Sigma, GripHorizontal } from \"lucide-react\";\nimport type { ColumnDef } from \"@/types/grid\";\nimport { GroupPanel } from \"./GroupPanel\";\n\ninterface ColumnSidebarProps {\n  columns: ColumnDef[];\n  setColumns: React.Dispatch<React.SetStateAction<ColumnDef[]>>;\n  search: string;\n  setSearch: (val: string) => void;\n  showGroupByPanel?: boolean;\n  groupedColumns?: string[];\n  setColumnGrouped?: (field: string, grouped: boolean) => void;\n  handleGroupDrop?: (e: React.DragEvent) => void;\n  enablePivot?: boolean; // can be updated\n  togglePivot?: () => void;\n  pivotColumns?: string[];\n  setPivotColumns?: React.Dispatch<React.SetStateAction<string[]>>;\n  selectedAggFn?: string;\n  columnAggFnMap?: Record<string, string>;\n  setColumnAggFnMap?: React.Dispatch<\n    React.SetStateAction<Record<string, string>>\n  >;\n\n  handleAggDrop: (e: React.DragEvent) => void;\n  setAggCols?: React.Dispatch<\n    React.SetStateAction<{ field: string; aggFunc: string }[]>\n  >;\n  pivotMode?: boolean; // from the column def\n}\n\nconst ColumnSidebar: React.FC<ColumnSidebarProps> = ({\n  columns,\n  setColumns,\n  search,\n  setSearch,\n  showGroupByPanel,\n  groupedColumns = [],\n  setColumnGrouped,\n  handleGroupDrop,\n  enablePivot = false,\n  togglePivot,\n  pivotColumns,\n  setPivotColumns,\n  selectedAggFn,\n  columnAggFnMap,\n  setColumnAggFnMap,\n  handleAggDrop,\n  setAggCols,\n  pivotMode = false,\n}) => {\n  const aggregationOptions = [\"sum\", \"min\", \"max\", \"count\", \"avg\"];\n\n  const aggColumns = useMemo(\n    () =>\n      columns.filter(\n        (item) =>\n          item.aggFunc &&\n          !item.pivot &&\n          item.type === \"number\" &&\n          columnAggFnMap?.[item.field]\n      ),\n    [columns, columnAggFnMap]\n  );\n\n  // Helper function to remove column from aggregation\n  const removeFromAggregation = (columnField: string) => {\n    setColumnAggFnMap?.((prev) => {\n      const updated = { ...prev };\n      delete updated[columnField];\n\n      // Convert to array for aggCols\n      const newAggCols = Object.entries(updated).map(([field, aggFunc]) => ({\n        field,\n        aggFunc,\n      }));\n\n      setAggCols?.(newAggCols);\n      return updated;\n    });\n  };\n\n  useEffect(() => {\n    if (!setColumnAggFnMap) return;\n\n    setColumnAggFnMap((prev) => {\n      const updatedMap = { ...prev };\n\n      columns.forEach((col) => {\n        if (\n          col.type?.toLowerCase() === \"number\" &&\n          col.field !== \"year\" &&\n          col.visible !== false &&\n          !(col.field in updatedMap)\n        ) {\n          updatedMap[col.field] = selectedAggFn || \"sum\";\n        }\n      });\n      return updatedMap;\n    });\n  }, [columns, selectedAggFn]);\n\n  return (\n    <aside\n      style={{\n        backgroundColor: \"#1f2937\",\n        color: \"#ffffff\",\n        padding: \"1rem\",\n        borderLeft: \"1px solid #374151\",\n        width: \"280px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        maxHeight: \"780px\",\n        overflowY: \"auto\",\n        overflowX: \"hidden\",\n      }}\n    >\n      {/* Pivot Mode Toggle */}\n      <div\n        style={{\n          padding: \"0.75rem 1rem\",\n          borderBottom: \"1px solid #353945\",\n        }}\n        className=\"flex flex-col gap-2 items-center cursor-pointer\"\n      >\n        {pivotMode && (\n          <div className=\"w-full border-b-[1px] pb-1 border-[#353945]\">\n            <Checkbox\n              className={undefined}\n              style={{\n                borderWidth: 1,\n                borderColor: \"#9ca3af\",\n                cursor: \"pointer\",\n              }}\n              checked={enablePivot}\n              onCheckedChange={togglePivot}\n            />\n            <span style={{ marginLeft: \"0.5rem\" }}>Pivot Mode</span>\n          </div>\n        )}\n\n        {/* Pivotable Columns */}\n        <div\n          className=\"w-full\"\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"0.1rem\",\n            maxHeight: \"15rem\",\n            overflowY: \"auto\",\n          }}\n        >\n          <div className=\"max-h-[450px] overflow-auto hide-scrollbar\">\n            {columns\n              .filter((col) =>\n                col.headerName.toLowerCase().includes(search.toLowerCase())\n              )\n              ?.map((col) => {\n                const isDraggable = col.type?.toLowerCase() === \"number\";\n\n                return (\n                  <div\n                    key={col.field}\n                    style={{\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      gap: \"0.5rem\",\n                    }}\n                    draggable={isDraggable}\n                    onDragStart={(e) => {\n                      // e.dataTransfer.setData(\"text/plain\", col.field);\n                      e.dataTransfer.setData(\"text/plain\", col.field); // optional for browser preview\n                      e.dataTransfer.setData(\"columnField\", col.field); // used in your custom drop logic\n                    }}\n                  >\n                    <Checkbox\n                      checked={col.visible !== false}\n                      onCheckedChange={(checked: boolean) => {\n                        setColumns((cols) =>\n                          cols.map((c) =>\n                            c.field === col.field\n                              ? { ...c, visible: checked }\n                              : c\n                          )\n                        );\n\n                        // Remove from pivotColumns if hiding\n                        if (!checked && setPivotColumns && pivotColumns) {\n                          setPivotColumns(\n                            pivotColumns.filter((f) => f !== col.field)\n                          );\n                        }\n\n                        // Remove from aggregation if it exists\n                        if (columnAggFnMap?.[col.field]) {\n                          removeFromAggregation(col.field);\n                        }\n\n                        // Remove from groupedColumns if hiding\n                        if (\n                          !checked &&\n                          setColumnGrouped &&\n                          groupedColumns.includes(col.field)\n                        ) {\n                          setColumnGrouped(col.field, false);\n\n                          setColumns((cols) =>\n                            cols.map((c) =>\n                              c.field === col.field\n                                ? { ...c, visible: checked }\n                                : c\n                            )\n                          );\n                        }\n                      }}\n                      style={{\n                        borderWidth: 1,\n                        borderColor: \"#9ca3af\",\n                        cursor: \"pointer\",\n                      }}\n                      className={undefined}\n                    />\n                    <GripHorizontal\n                      style={{\n                        width: \"1rem\",\n                        height: \"1rem\",\n                        color: \"#9ca3af\",\n                        cursor: \"move\",\n                      }}\n                    />\n                    <span className={``}>{col.headerName}</span>\n                  </div>\n                );\n              })}\n          </div>\n\n          {/* Aggregation Drop Zone */}\n          {enablePivot && (\n            <>\n              <div\n                className=\"mt-4\"\n                style={{\n                  // marginBottom: \"0.5rem\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  gap: \"0.5rem\",\n                }}\n              >\n                <Sigma style={{ width: \"1rem\" }} />\n                <span style={{ fontWeight: 600 }}>Values</span>\n              </div>\n\n              <div\n                className=\"min-h-[40px] hide-scrollbar scroll-smooth overflow-y-scroll border border-dashed border-[#3a3d45] rounded p-2 bg-[#232733]\"\n                onDragOver={(e) => {\n                  e.preventDefault();\n                  e.dataTransfer.dropEffect = \"move\";\n                }}\n                onDrop={handleAggDrop}\n              >\n                {/* List of columns having aggFunc */}\n                {aggColumns && aggColumns.length > 0 ? (\n                  <div className=\"flex flex-col gap-2\">\n                    {aggColumns.map((col) => {\n                      const aggFn = columnAggFnMap?.[col.field] || \"sum\";\n\n                      return (\n                        <div\n                          key={col.field}\n                          className=\"flex justify-between items-center px-2 py-1 bg-[#1f2937] border border-[#353945] rounded\"\n                        >\n                          <div className=\"w-[50%] flex justify-between items-center gap-2 text-sm text-white\">\n                            {col.headerName || col.field}\n                          </div>\n\n                          <div className=\" w-[40%] flex items-center justify-end\">\n                            <select\n                              className=\"py-1 pl-2\"\n                              value={aggFn}\n                              onChange={(e) => {\n                                setColumnAggFnMap?.((prev) => ({\n                                  ...prev,\n                                  [col.field]: e.target.value,\n                                }));\n                              }}\n                              style={{\n                                backgroundColor: \"#232733\",\n                                border: \"1px solid #353945\",\n                                borderRadius: \"0.25rem\",\n                                outline: \"none\",\n                                fontSize: \"0.75rem\",\n                              }}\n                            >\n                              {aggregationOptions.map((option) => (\n                                <option key={option} value={option}>\n                                  {option}\n                                </option>\n                              ))}\n                            </select>\n\n                            <button\n                              className=\"text-red-400 text-xs ml-2 cursor-pointer\"\n                              onClick={() => removeFromAggregation(col.field)}\n                            >\n                              ✕\n                            </button>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                ) : (\n                  <span className=\"text-gray-400 text-sm\">\n                    Drag columns here for aggregation\n                  </span>\n                )}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n      {/* Search and Visibility Toggles */}\n      {!columnAggFnMap && !setColumnAggFnMap && (\n        <div\n          style={{\n            padding: \"0.75rem 1rem\",\n            borderBottom: \"1px solid #353945\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: \"0.5rem\",\n              marginBottom: \"0.75rem\",\n            }}\n          >\n            <Checkbox\n              className={undefined}\n              style={{\n                borderWidth: 1,\n                borderColor: \"#9ca3af\",\n                cursor: \"pointer\",\n              }}\n              checked={columns.every((col) => col.visible !== false)}\n              onCheckedChange={(checked: boolean) =>\n                setColumns((cols) =>\n                  cols.map((c) => ({ ...c, visible: checked }))\n                )\n              }\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              style={{\n                backgroundColor: \"#232733\",\n                border: \"1px solid #353945\",\n                borderRadius: \"0.25rem\",\n                padding: \"0.25rem 0.5rem\",\n                color: \"#ffffff\",\n                width: \"100%\",\n                outline: \"none\",\n              }}\n            />\n          </div>\n\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              gap: \"0.5rem\",\n              maxHeight: \"10rem\",\n              overflowY: \"auto\",\n            }}\n          >\n            {columns\n              .filter((col) =>\n                col.headerName.toLowerCase().includes(search.toLowerCase())\n              )\n              .map((col, idx) => (\n                <div\n                  key={col.field}\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    gap: \"0.5rem\",\n                  }}\n                >\n                  <Checkbox\n                    className={undefined}\n                    checked={col.visible !== false}\n                    onCheckedChange={(checked: boolean) =>\n                      setColumns((cols) =>\n                        cols.map((c, i) =>\n                          i === idx ? { ...c, visible: checked } : c\n                        )\n                      )\n                    }\n                    style={{\n                      borderWidth: 1,\n                      borderColor: \"#9ca3af\",\n                      cursor: \"pointer\",\n                    }}\n                  />\n                  <GripHorizontal\n                    style={{\n                      width: \"1rem\",\n                      height: \"1rem\",\n                      color: \"#9ca3af\",\n                      cursor: \"move\",\n                    }}\n                  />\n                  <span>{col.headerName}</span>\n                </div>\n              ))}\n          </div>\n        </div>\n      )}\n\n      {/* Row Grouping Section */}\n      {showGroupByPanel && setColumnGrouped && handleGroupDrop && (\n        <div\n          style={{\n            padding: \"0.75rem 1rem\",\n            borderBottom: \"1px solid #353945\",\n            flexShrink: 0,\n          }}\n        >\n          <div\n            style={{\n              marginBottom: \"0.5rem\",\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: \"0.5rem\",\n            }}\n          >\n            <List style={{ width: \"1rem\", height: \"1rem\" }} />\n            <span style={{ fontWeight: 600 }}>Row Groups</span>\n          </div>\n          <GroupPanel\n            showGroupByPanel={showGroupByPanel}\n            groupedColumns={groupedColumns}\n            columns={columns}\n            setColumnGrouped={setColumnGrouped}\n            handleGroupDrop={handleGroupDrop}\n          />\n        </div>\n      )}\n    </aside>\n  );\n};\n\nexport default ColumnSidebar;\n","import React from \"react\";\nimport { GripHorizontal, X } from \"lucide-react\";\nimport type { ColumnDef } from \"@/types/grid\";\n\ninterface PivotPanelProps {\n  pivotColumns: string[];\n  columns: ColumnDef[];\n  setPivotColumns: (fields: string[]) => void;\n  handlePivotDrop: (e: React.DragEvent) => void;\n}\n\nexport const PivotPanel: React.FC<PivotPanelProps> = ({\n  pivotColumns,\n  columns,\n  setPivotColumns,\n  handlePivotDrop,\n}) => {\n  return (\n    <div\n      className=\"flex items-center gap- border p-1 bg-gray-50 py-2\"\n      onDragOver={(e) => {\n        e.preventDefault();\n        e.dataTransfer.dropEffect = \"move\";\n      }}\n      onDrop={handlePivotDrop}\n    >\n      {/* Display the pivot columns in the panel */}\n      {pivotColumns.length > 0 && (\n        <div className=\"p-2 flex gap-2 max-w-full\">\n          {pivotColumns.map((field) => {\n            const col = columns.find((c) => c.field === field);\n            return (\n              <div\n                key={field}\n                className=\"table-row-pop flex items-center justify-between bg-gray-300 px-2 rounded-full\"\n              >\n                <span key={field} className=\"flex items-center\">\n                  <GripHorizontal className=\"size-4 mr-1\" />\n                  {col?.headerName}\n                </span>\n\n                <button\n                  onClick={() =>\n                    setPivotColumns(pivotColumns.filter((f) => f !== field))\n                  }\n                  className=\"ml-1 hover:bg-gray-600 rounded-full p-1 cursor-pointer\"\n                >\n                  <X className=\"h-3 w-3\" />\n                </button>\n              </div>\n            );\n          })}\n        </div>\n      )}\n\n      <div className=\"rounded flex flex-wrap gap-2 items-center max-w-full justify-start\">\n        <span className=\"text-gray-400 text-sm \">\n          Drag here to set column labels\n        </span>\n      </div>\n    </div>\n  );\n};\n","export interface IPivotColumnDef {\n  field: string;\n  aggFunc: string;\n}\n\nexport interface IGroupedPivotedData {\n  groupKey: string;\n  children: any[];\n  totalAggregations: Record<string, number>;\n  totalMedals: number;\n}\n\n// Used internally to help compute average: { sum, count }\nexport type AvgTrackerType = Record<string, { sum: number; count: number }>;\n\n// Handles how each aggregation function works\nexport const applyPivotAgg = (\n  aggFunc: string,\n  current: number | undefined,\n  value: number\n): number => {\n  switch (aggFunc) {\n    case \"sum\":\n      return (current || 0) + value;\n    case \"min\":\n      return current !== undefined ? Math.min(current, value) : value;\n    case \"max\":\n      return current !== undefined ? Math.max(current, value) : value;\n    case \"count\":\n      return (current || 0) + 1;\n    default:\n      return value;\n  }\n};\n\n// Main pivot and aggregation function\nexport function pivotAndAggregateByGroup(\n  data: any[],\n  groupBy: string,\n  pivotColumns: string[],\n  columnDefs: IPivotColumnDef[]\n): IGroupedPivotedData[] {\n  const allowedNumericFields = new Set([\n    \"year\",\n    ...columnDefs.map((def) => def.field),\n  ]);\n\n  // Clean and filter numeric fields\n  const cleanedData = data.map((row) => {\n    const newRow: Record<string, any> = {};\n    for (const [key, value] of Object.entries(row)) {\n      const isNumeric = typeof value === \"number\";\n      if (!isNumeric || allowedNumericFields.has(key)) {\n        newRow[key] = value;\n      }\n    }\n    return newRow;\n  });\n\n  const result: IGroupedPivotedData[] = [];\n\n  const groupMap = new Map<\n    string,\n    {\n      groupValue: any;\n      childrenMap: Map<string, any>;\n      totalAggregations: Record<string, number>;\n      avgTracking: AvgTrackerType;\n      totalMedalsRaw: number;\n    }\n  >();\n\n  const groupByValues = Array.from(\n    new Set(cleanedData.map((row) => row[groupBy]))\n  );\n  const pivotValuesMap: Record<string, Set<any>> = {};\n\n  pivotColumns.forEach((col) => {\n    pivotValuesMap[col] = new Set(cleanedData.map((row) => row[col]));\n  });\n\n  const allCombinations: Array<{ [key: string]: any }> = [];\n\n  // Recursively create all combinations of pivot columns\n  function generateCombinations(\n    keys: string[],\n    prefix: Record<string, any> = {}\n  ) {\n    if (keys.length === 0) {\n      allCombinations.push(prefix);\n      return;\n    }\n    const [first, ...rest] = keys;\n    for (const val of Array.from(pivotValuesMap[first])) {\n      generateCombinations(rest, { ...prefix, [first]: val });\n    }\n  }\n\n  generateCombinations(pivotColumns);\n\n  // Main aggregation loop\n  cleanedData.forEach((row) => {\n    const groupValue = row[groupBy];\n    const groupKey = String(groupValue);\n    const pivotKey = pivotColumns.map((key) => row[key]).join(\"||\");\n\n    // Initialize group entry\n    if (!groupMap.has(groupKey)) {\n      groupMap.set(groupKey, {\n        groupValue,\n        childrenMap: new Map<string, any>(),\n        totalAggregations: {},\n        avgTracking: {},\n        totalMedalsRaw: 0,\n      });\n    }\n\n    const groupEntry = groupMap.get(groupKey)!;\n    let rawMedalSum = 0;\n\n    columnDefs.forEach((col) => {\n      const { field, aggFunc } = col;\n      const rawValue = Number(row[field]) || 0;\n\n      if (aggFunc === \"avg\") {\n        // Track both sum and count for averaging\n        if (!groupEntry.avgTracking[field]) {\n          groupEntry.avgTracking[field] = { sum: 0, count: 0 };\n        }\n        groupEntry.avgTracking[field].sum += rawValue;\n        groupEntry.avgTracking[field].count += 1;\n        rawMedalSum += rawValue;\n      } else {\n        const isCount = aggFunc === \"count\";\n        const value = isCount ? 1 : rawValue;\n        groupEntry.totalAggregations[field] = applyPivotAgg(\n          aggFunc,\n          groupEntry.totalAggregations[field],\n          value\n        );\n        // Always add value to rawMedalSum, even for count\n        rawMedalSum += value;\n      }\n    });\n\n    groupEntry.totalMedalsRaw += rawMedalSum;\n\n    // Populate pivoted row (childrenMap)\n    if (!groupEntry.childrenMap.has(pivotKey)) {\n      const newRow: any = {\n        [groupBy]: groupValue,\n        ...Object.fromEntries(pivotColumns.map((key) => [key, row[key]])),\n      };\n\n      let childSum = 0;\n\n      columnDefs.forEach((col) => {\n        const { field, aggFunc } = col;\n        const rawValue = Number(row[field]) || 0;\n\n        if (aggFunc === \"avg\") {\n          // Track sum and count per cell\n          newRow[`__${field}_sum`] = rawValue;\n          newRow[`__${field}_count`] = 1;\n          newRow[field] = rawValue;\n          childSum += rawValue;\n        } else {\n          const isCount = aggFunc === \"count\";\n          const value = isCount ? 1 : rawValue;\n          newRow[field] = value;\n          if (!isCount) childSum += value;\n        }\n      });\n\n      newRow.totalMedals = childSum;\n      groupEntry.childrenMap.set(pivotKey, newRow);\n    } else {\n      const existingRow = groupEntry.childrenMap.get(pivotKey);\n      let childSum = 0;\n\n      columnDefs.forEach((col) => {\n        const { field, aggFunc } = col;\n        const rawValue = Number(row[field]) || 0;\n\n        if (aggFunc === \"avg\") {\n          existingRow[`__${field}_sum`] =\n            (existingRow[`__${field}_sum`] || 0) + rawValue;\n          existingRow[`__${field}_count`] =\n            (existingRow[`__${field}_count`] || 0) + 1;\n          existingRow[field] =\n            existingRow[`__${field}_sum`] / existingRow[`__${field}_count`];\n          childSum += rawValue;\n        } else {\n          const isCount = aggFunc === \"count\";\n          const value = isCount ? 1 : rawValue;\n          existingRow[field] = applyPivotAgg(\n            aggFunc,\n            existingRow[field],\n            value\n          );\n          if (!isCount) childSum += existingRow[field];\n        }\n      });\n\n      existingRow.totalMedals = childSum;\n    }\n  });\n\n  // Fill empty pivot combinations per group\n  for (const groupValue of groupByValues) {\n    const groupKey = String(groupValue);\n    const groupEntry = groupMap.get(groupKey)!;\n\n    for (const combo of allCombinations) {\n      const pivotKey = pivotColumns.map((k) => combo[k]).join(\"||\");\n      if (!groupEntry.childrenMap.has(pivotKey)) {\n        const newRow: any = {\n          [groupBy]: groupValue,\n          ...combo,\n        };\n        columnDefs.forEach((col) => {\n          newRow[col.field] = 0;\n        });\n        newRow.totalMedals = 0;\n        groupEntry.childrenMap.set(pivotKey, newRow);\n      }\n    }\n  }\n\n  // Final pass to compute group-level averages\n  for (const [\n    groupKey,\n    { childrenMap, totalAggregations, totalMedalsRaw, avgTracking },\n  ] of Array.from(groupMap.entries())) {\n    for (const col of columnDefs) {\n      if (col.aggFunc === \"avg\") {\n        const stats = avgTracking[col.field];\n        if (stats) {\n          totalAggregations[col.field] =\n            stats.count > 0 ? stats.sum / stats.count : 0;\n        } else {\n          totalAggregations[col.field] = 0;\n        }\n      }\n    }\n\n    totalAggregations.total = Object.values(totalAggregations).reduce(\n      (sum, val) => sum + val,\n      0\n    );\n\n    result.push({\n      groupKey,\n      children: Array.from(childrenMap.values()),\n      totalAggregations,\n      totalMedals: totalMedalsRaw,\n    });\n  }\n\n  return result;\n}\n","import { TreeDataChildrenFieldType } from \"@/types/grid\";\n\n/**\n * Converts flat data with path arrays into a tree structure.\n */\nexport function buildTreeData(\n  flatData: Record<string, unknown>[],\n  treeDataChildrenField: TreeDataChildrenFieldType,\n  getDataPath?: (data: Record<string, unknown>) => string[] // optional for parentId/children formats\n): any[] {\n  if (!flatData || flatData.length === 0) return [];\n\n  // Case 1: Already has children (tree structure)\n  if (treeDataChildrenField === \"children\") {\n    return flatData;\n  }\n\n  // Case 2: path[] based (AG Grid-style treeData)\n  if (treeDataChildrenField === \"path\" && getDataPath) {\n    const root: any[] = [];\n    const pathMap = new Map<string, any>();\n\n    flatData.forEach((row) => {\n      const path = getDataPath(row);\n      let parent: any = null;\n\n      path.forEach((segment, idx) => {\n        const currentPath = path.slice(0, idx + 1).join(\"/\");\n\n        if (!pathMap.has(currentPath)) {\n          const node =\n            idx === path.length - 1\n              ? { ...row, children: [] }\n              : { name: segment, path: path.slice(0, idx + 1), children: [] };\n\n          pathMap.set(currentPath, node);\n          if (parent) {\n            parent.children.push(node);\n          } else {\n            root.push(node);\n          }\n        }\n\n        parent = pathMap.get(currentPath);\n      });\n    });\n\n    return root;\n  }\n\n  // Case 3: Flat parentId/id structure\n  if (treeDataChildrenField === \"parentId\") {\n    const idMap = new Map<string, any>();\n    const root: any[] = [];\n\n    flatData.forEach((row) => {\n      const id = String((row as any).id); // safely cast to string\n      idMap.set(id, { ...row, children: [] });\n    });\n\n    flatData.forEach((row) => {\n      const id = String((row as any).id);\n      const parentId = (row as any).parentId;\n\n      const node = idMap.get(id);\n      if (row.parentId) {\n        const parent = idMap.get(parentId);\n        if (parent) {\n          parent.children.push(node);\n        }\n      } else {\n        root.push(node);\n      }\n    });\n\n    return root;\n  }\n\n  // Fallback: return as-is\n  return flatData;\n}\n\n/**\n * Flattens tree data for rendering, respecting expanded state.\n */\nexport function flattenTree(\n  nodes: Record<string, unknown>[],\n  expanded: Record<string, boolean>,\n  level = 0,\n  rowIndexRef = { current: 0 },\n  parentPath: string[] = []\n): Array<{\n  type: \"data\";\n  row: Record<string, unknown>;\n  rowIndex: number;\n  indent: number;\n  nodeKey: string;\n}> {\n  const flat: any[] = [];\n\n  nodes.forEach((node) => {\n    const currentIndex = rowIndexRef.current++;\n    // Ensure node.name is a string\n    const nodeName =\n      typeof node.name === \"string\" ? node.name : String(node.name ?? \"\");\n    const nodePath = [...parentPath, nodeName];\n    const nodeKey = nodePath.join(\"/\");\n\n    flat.push({\n      type: \"data\",\n      row: node,\n      rowIndex: currentIndex,\n      indent: level,\n      nodeKey,\n    });\n\n    if (\n      node.children &&\n      Array.isArray(node.children) &&\n      node.children.length > 0 &&\n      expanded[nodeKey]\n    ) {\n      flat.push(\n        ...flattenTree(\n          node.children as Record<string, unknown>[],\n          expanded,\n          level + 1,\n          rowIndexRef,\n          nodePath\n        )\n      );\n    }\n  });\n\n  return flat;\n}\n\n/**\n * Recursively adds aggregation values to each node in the tree.\n * - aggregatedCount: total number of descendant leaf files\n * - provided: only 1 for leaf nodes (files), not folders\n */\nexport function addAggregations(node: Record<string, any>): number {\n  if (!node.children || node.children.length === 0) {\n    node.aggregatedCount = 1;\n    node.provided = 1;\n    return 1;\n  }\n\n  let total = 0;\n  for (const child of node.children) {\n    total += addAggregations(child);\n  }\n\n  node.aggregatedCount = total;\n  return total;\n}\n\n/**\n * Add aggregations to a full tree list (root-level array)\n */\nexport function computeAggregationsForTree(tree: any[]) {\n  tree.forEach((node) => addAggregations(node));\n}\n\n/**\n * Recursively collect all nodeKeys (including self) for a node and its descendants.\n */\nexport function getAllDescendantNodeKeys(\n  node: any,\n  parentPath: string[] = []\n): string[] {\n  const nodeName =\n    typeof node.name === \"string\" ? node.name : String(node.name ?? \"\");\n  const nodePath = [...parentPath, nodeName];\n  const nodeKey = nodePath.join(\"/\");\n  let keys = [nodeKey];\n\n  if (node.children && Array.isArray(node.children)) {\n    for (const child of node.children) {\n      keys = keys.concat(getAllDescendantNodeKeys(child, nodePath));\n    }\n  }\n  return keys;\n}\n\n/**\n * Get the parent nodeKey for a given nodeKey.\n */\nexport function getParentNodeKey(nodeKey: string): string | null {\n  const parts = nodeKey.split(\"/\");\n  if (parts.length <= 1) return null;\n  return parts.slice(0, -1).join(\"/\");\n}\n\n/**\n * Given a nodeKey and the flattenedRows, find the node object.\n */\nexport function findNodeByNodeKey(\n  flattenedRows: any[],\n  nodeKey: string\n): any | undefined {\n  return flattenedRows.find((item) => item.nodeKey === nodeKey);\n}\n\n/**\n * Move a node from one location to another in a tree structure.\n * @param tree The tree data array (root level).\n * @param sourcePath The path array of the node to move.\n * @param targetPath The path array of the new parent node (or [] for root).\n * @returns A new tree with the node moved.\n */\nexport function moveTreeNode(\n  tree: any[],\n  sourcePath: string[],\n  targetPath: string[]\n): any[] {\n  if (!tree || !Array.isArray(tree) || sourcePath.length === 0) return tree;\n\n  // Helper to deep clone the tree\n  const deepClone = (obj: any) => JSON.parse(JSON.stringify(obj));\n\n  const clonedTree = deepClone(tree);\n\n  // Helper to find and remove node by path\n  function removeNode(nodes: any[], path: string[]): any | null {\n    if (path.length === 0) return null;\n    const [segment, ...rest] = path;\n    const idx = nodes.findIndex((n) => n.name === segment);\n    if (idx === -1) return null;\n    if (rest.length === 0) {\n      // Remove and return the node\n      return nodes.splice(idx, 1)[0];\n    }\n    if (nodes[idx].children) {\n      return removeNode(nodes[idx].children, rest);\n    }\n    return null;\n  }\n\n  // Helper to insert node at target path\n  function insertNode(nodes: any[], path: string[], node: any) {\n    if (path.length === 0) {\n      nodes.push(node);\n      return;\n    }\n    const [segment, ...rest] = path;\n    let target = nodes.find((n) => n.name === segment);\n    if (!target) {\n      // If target path doesn't exist, create it as a folder\n      target = { name: segment, children: [] };\n      nodes.push(target);\n    }\n    if (!target.children) target.children = [];\n    insertNode(target.children, rest, node);\n  }\n\n  // Remove node from source\n  const nodeToMove = removeNode(clonedTree, sourcePath);\n  if (!nodeToMove) return tree;\n\n  // Update the node's path property\n  nodeToMove.path = [...targetPath, nodeToMove.name];\n\n  // Insert node at target\n  insertNode(clonedTree, targetPath, nodeToMove);\n\n  return clonedTree;\n}\n\n/**\n * Checks if a node or any of its descendants match the filter function.\n * @param node The current node to check.\n * @param filterFn The filter function to apply to each node.\n * @param childrenField The field name for children (default: \"children\").\n * @returns True if the node or any descendant matches, false otherwise.\n */\nexport function nodeOrDescendantMatches(\n  node: Record<string, unknown>,\n  filterFn: (row: Record<string, unknown>) => boolean,\n  childrenField: string = \"children\"\n): boolean {\n  if (filterFn(node)) return true;\n  if (Array.isArray(node[childrenField])) {\n    return (node[childrenField] as any[]).some((child) =>\n      nodeOrDescendantMatches(child, filterFn, childrenField)\n    );\n  }\n  return false;\n}\n\n// Recursively filter tree data --- for tree data filtering on parent level\n\n/**\n * Recursively filters a tree structure.\n * - If a node matches the filter, it is kept with all its children.\n * - If any descendant matches, the parent is kept with all its children.\n * - If neither the node nor any descendant matches, the node is removed.\n *\n * This is useful for tree UIs where you want to show the full path and all siblings\n * when any child matches the filter.\n *\n * @param nodes The array of tree nodes to filter.\n * @param filterFn The filter function to apply to each node.\n * @param childrenField The field name for children (default: \"children\").\n * @returns The filtered tree array.\n */\nexport function filterTreeData(\n  nodes: any[],\n  filterFn: (row: Record<string, unknown>) => boolean,\n  childrenField: string = \"children\"\n): any[] {\n  return nodes\n    .map((node) => {\n      let children = node[childrenField];\n      let filteredChildren: any[] = [];\n      if (Array.isArray(children)) {\n        filteredChildren = filterTreeData(children, filterFn, childrenField);\n      }\n      // If this node matches, keep it with all its children\n      if (filterFn(node)) {\n        return {\n          ...node,\n          [childrenField]: children,\n        };\n      }\n      // If any child matches, keep this node with all its children (not just filtered)\n      if (filteredChildren.length > 0) {\n        return {\n          ...node,\n          [childrenField]: children,\n        };\n      }\n      // Otherwise, discard this node\n      return null;\n    })\n    .filter(Boolean);\n}\n","import React, {\n  useState,\n  useEffect,\n  useRef,\n  useMemo,\n  useCallback,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { useVirtualizer, VirtualItem } from \"@tanstack/react-virtual\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  ChevronDown,\n  ChevronUp,\n  ChevronsUpDown,\n  ChevronRight,\n  ListFilter,\n  Calendar,\n  SquareX,\n  Plus,\n  GripHorizontal,\n  // Sigma,\n  // X,\n} from \"lucide-react\";\nimport type {\n  DataGridProps,\n  ColumnDef,\n  GroupObject,\n  IFilterModelItem,\n  ColumnDefProps,\n} from \"@/types/grid\";\nimport { PulseLoader } from \"react-spinners\";\nimport { debounce } from \"lodash\";\nimport CellEditor, { EditorType } from \"./CellEditor\";\nimport { cn } from \"@/lib/utils\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useCookedData } from \"./useCookedData\";\n\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n} from \"@/components/ui/popover\";\nimport {\n  Tooltip,\n  TooltipTrigger,\n  TooltipContent,\n} from \"@/components/ui/tooltip\";\nimport { CellFilter, GetDefaultFilterType } from \"./CellFilter\";\nimport ServerPagination from \"./ServerPagination\";\nimport ColumnSidebar from \"./ColumnSidebar\";\nimport { PivotPanel } from \"./PivotPanel\";\nimport {\n  IGroupedPivotedData,\n  IPivotColumnDef,\n  pivotAndAggregateByGroup,\n} from \"@/lib/pivot.utils\";\nimport {\n  buildTreeData,\n  computeAggregationsForTree,\n  filterTreeData,\n  findNodeByNodeKey,\n  flattenTree,\n  getAllDescendantNodeKeys,\n  getParentNodeKey,\n  moveTreeNode,\n} from \"@/lib/tree-data.util\";\n\nexport const DataGrid = forwardRef<HTMLDivElement, DataGridProps>(\n  (\n    {\n      data = [],\n      onDataChange,\n      columnDefs,\n      loading = false,\n      loadingMessage = \"Loading...\",\n      onRowClick,\n      showGroupByPanel = false,\n      isChild = false,\n      rowSelection,\n\n      // props for pagination\n      pagination,\n\n      // prop for filtering\n      onFilterChange,\n\n      rowModelType = \"clientSide\", // default to client-side row model\n\n      onSortChange, // for sorting\n      sortModel,\n      onRowGroup,\n      pivotMode = false,\n      serverPivoting,\n      editType,\n      onCellValueChanged,\n      onRowValueChanged,\n      treeData,\n      getDataPath,\n      treeDataChildrenField,\n      groupDefaultExpanded = -1,\n      rowDragManaged,\n      onRowDragEnd,\n      showChildCount,\n      parentRow,\n    }: DataGridProps,\n    ref: React.Ref<HTMLDivElement>\n  ) => {\n    const { addRowConfig } = columnDefs;\n    const [treeExpandedRows, setTreeExpandedRows] = useState<\n      Record<string, boolean>\n    >({});\n\n    //Add state to track the drag-over row\n    const [dragOverRowKey, setDragOverRowKey] = useState<string | null>(null);\n    const [treeInit, setTreeInit] = useState(false);\n\n    // for full row editing\n\n    const [editingRowId, setEditingRowId] = useState<unknown | null>(null);\n    const [editingRowData, setEditingRowData] = useState<Record<\n      string,\n      unknown\n    > | null>(null);\n\n    // Tracks whether the user is currently editing/adding a new row\n    const [isAddingRow, setIsAddingRow] = useState<boolean>(false);\n\n    // Holds the data being entered for the new row\n    const [newRowData, setNewRowData] = useState<Record<string, unknown>>({});\n\n    const generateInitialRowData = (): Record<string, unknown> => {\n      const initial: Record<string, unknown> = {};\n\n      columns?.forEach((col) => {\n        if (!(col.field in initial)) {\n          initial[col.field] = \"\"; // or default for col.type\n        }\n      });\n\n      return initial;\n    };\n\n    // get server-pivoting props\n\n    const {\n      serverPivotedData,\n      serverPivotDataColumns,\n      serverPivotCols,\n      setServerPivotColsFn,\n      setServerGroupedCols: setServerGroupedColsFn,\n      setServerAggColsFn,\n      serverAggCols,\n    } = serverPivoting || {};\n\n    const isServerSide = rowModelType === \"serverSide\";\n\n    const [enablePivot, setEnablePivot] = useState<boolean>(pivotMode);\n\n    const defaultPivotColumns = useMemo(\n      () =>\n        columnDefs.columns\n          ?.filter((item) => item.pivot)\n          .map((item) => item.field) || [],\n      [columnDefs]\n    );\n\n    // To apply pivot on like game, year etc\n    const [pivotColumns, setPivotColumns] =\n      useState<string[]>(defaultPivotColumns);\n\n    const [_columnDefs, _setColumnDefs] = useState<ColumnDefProps>(columnDefs);\n\n    // sort data on pivoting mode\n    const [sortDirection, setSortDirection] = useState<\"asc\" | \"desc\" | null>(\n      null\n    );\n\n    const toggleSortByTotalMedals = () => {\n      setSortDirection((prev) => (prev === \"asc\" ? \"desc\" : \"asc\"));\n    };\n\n    const [columnAggFnMap, setColumnAggFnMap] = useState<\n      Record<string, string>\n    >({});\n\n    const aggCols = useMemo(() => {\n      if (!enablePivot) return;\n\n      return columnDefs?.columns\n        ?.filter(\n          (col) =>\n            typeof data?.[0]?.[col.field] === \"number\" &&\n            col.pivot !== true &&\n            col.field !== \"year\" // exclude year column as you wanted\n        )\n        ?.map((col) => ({\n          field: col.field,\n          aggFunc: columnAggFnMap[col.field] || \"sum\", // fallback to sum if not set\n        }));\n    }, [columnDefs, data, columnAggFnMap]);\n\n    // eg field, aggFunc - silver, sum\n    const [_aggCols, _setAggCols] = useState<IPivotColumnDef[]>(\n      serverAggCols ? serverAggCols : aggCols || []\n    );\n\n    // 🧠 Automatically filter when columnDefs or _aggCols change\n\n    const [selectedAggFn] = useState<string>(\"sum\");\n\n    // drag and drop of the column while applying agg\n    const handleAggDrop = (e: React.DragEvent) => {\n      if (!enablePivot) return;\n\n      const field = e.dataTransfer.getData(\"text/plain\");\n      if (!field) return;\n\n      setColumnAggFnMap((prev) => ({\n        ...prev,\n        [field]: selectedAggFn || \"sum\",\n      }));\n    };\n\n    const groupByField = useMemo(() => {\n      return columnDefs?.columns?.find((col) => col.rowGroup)?.field;\n    }, [columnDefs]);\n\n    // set the grouped column via setter function\n    useEffect(() => {\n      if (setServerGroupedColsFn && groupByField) {\n        setServerGroupedColsFn(groupByField);\n      }\n    }, [groupByField, setServerGroupedColsFn]);\n\n    // on removing the the column from the ColumnSide bar\n    useEffect(() => {\n      if (!enablePivot) return;\n\n      const fromMap = Object.entries(columnAggFnMap).map(\n        ([field, aggFunc]) => ({\n          field,\n          aggFunc,\n        })\n      );\n\n      if (fromMap.length > 0) {\n        setServerAggColsFn ? setServerAggColsFn(fromMap) : _setAggCols(fromMap);\n      } else if (aggCols && _aggCols.length === 0 && aggCols.length > 0) {\n        setServerAggColsFn\n          ? setServerAggColsFn(aggCols || [])\n          : _setAggCols(aggCols || []);\n      }\n    }, [columnAggFnMap, enablePivot, aggCols, setServerAggColsFn]);\n\n    const groupedPivotedData: IGroupedPivotedData[] = useMemo(() => {\n      if (!enablePivot || !pivotMode) return [];\n\n      if (groupByField && _aggCols) {\n        const grouped: IGroupedPivotedData[] =\n          serverPivoting && serverPivotedData\n            ? (serverPivotedData as unknown as IGroupedPivotedData[])\n            : (pivotAndAggregateByGroup(\n                data,\n                groupByField,\n                pivotColumns,\n                serverAggCols ? serverAggCols : _aggCols\n              ) ?? []);\n\n        if (sortDirection && grouped.length > 0) {\n          return [...grouped].sort((a, b) =>\n            sortDirection === \"asc\"\n              ? (a.totalMedals ?? 0) - (b.totalMedals ?? 0)\n              : (b.totalMedals ?? 0) - (a.totalMedals ?? 0)\n          );\n        }\n\n        return grouped;\n      }\n\n      return [];\n    }, [\n      data,\n      groupByField,\n      pivotColumns,\n      _aggCols,\n      sortDirection,\n      serverAggCols,\n      enablePivot,\n      serverPivoting,\n      serverPivotedData,\n    ]);\n\n    function getPivotDataColumns(data: any[], pivotColumns: string[]) {\n      if (!enablePivot) return;\n\n      if (serverPivotDataColumns) {\n        return serverPivotDataColumns;\n      }\n\n      return pivotColumns.map((key) => {\n        const values = Array.from(new Set(data.map((row) => row[key])));\n        return { [key]: values };\n      });\n    }\n\n    // get all the unique values for the pivot columns\n    const pivotDataColumns = useMemo(() => {\n      return serverPivoting && serverPivotCols\n        ? getPivotDataColumns(data, serverPivotCols)\n        : getPivotDataColumns(data, pivotColumns);\n    }, [data, serverPivotCols, pivotColumns, serverPivoting]);\n\n    const togglePivot = useCallback(() => {\n      setEnablePivot((prev) => !prev);\n    }, []);\n\n    const { getCookedData } = useCookedData(columnDefs);\n    const {\n      columns: propColumns = [],\n      masterDetail = false,\n      detailGridOptions = {},\n      getDetailRowData = undefined,\n      aggFuncs = {},\n      grandTotalRow = \"none\",\n      tableLayout = \"fixed\",\n    } = columnDefs;\n\n    // State\n    const [gridData, setGridData] = useState<Record<string, unknown>[]>([]);\n    const [columns, setColumns] = useState<ColumnDef[]>([]);\n    const [sortConfig, setSortConfig] = useState<{\n      key: string | null;\n      direction: \"asc\" | \"desc\";\n    }>({ key: null, direction: \"asc\" });\n    const [filters, setFilters] = useState<Record<string, string>>({});\n    const [filterTypes, setFilterTypes] = useState<Record<string, string>>({});\n    const [debouncedFilters, setDebouncedFilters] = useState<\n      Record<string, string>\n    >({});\n    const [groupedColumns, setGroupedColumns] = useState<string[]>([]);\n    const [expandedGroups, setExpandedGroups] = useState<\n      Record<string, boolean>\n    >({});\n\n    // State for selected rows (nodeKey: boolean)\n    const [selectedRows, setSelectedRows] = useState<Record<string, boolean>>(\n      {}\n    );\n\n    // Handler for tree row selection\n    const handleTreeRowCheckboxChange = (nodeKey: string, checked: boolean) => {\n      setSelectedRows((prev) => {\n        let updated = { ...prev };\n        // Find the node in the flattenedRows\n        const node = findNodeByNodeKey(flattenedRows, nodeKey);\n        if (!node) return updated;\n\n        // Only select/deselect this node and its descendants (not the whole tree)\n        const allKeys = getAllDescendantNodeKeys(\n          node.row,\n          nodeKey.split(\"/\").slice(0, -1)\n        );\n        if (checked) {\n          allKeys.forEach((key) => (updated[key] = true));\n        } else {\n          allKeys.forEach((key) => delete updated[key]);\n        }\n\n        // Bubble up: If all siblings are selected, select parent\n        let parentKey: string | null = getParentNodeKey(nodeKey);\n\n        while (parentKey !== null) {\n          const parent = findNodeByNodeKey(flattenedRows, parentKey);\n          if (parent && parent.row && parent.row.children) {\n            const allChildrenKeys = parent.row.children.map((child: any) =>\n              [...parentKey!.split(\"/\"), child.name].join(\"/\")\n            );\n            const allSelected = allChildrenKeys.every(\n              (key: any) => updated[key]\n            );\n            if (allSelected && checked) {\n              updated[parentKey] = true;\n            } else if (!checked) {\n              delete updated[parentKey];\n            }\n          }\n          parentKey = getParentNodeKey(parentKey);\n        }\n\n        return updated;\n      });\n    };\n\n    const handlePivotDrop = useCallback(\n      (e: React.DragEvent) => {\n        e.preventDefault();\n\n        if (!enablePivot) return;\n\n        const field = e.dataTransfer.getData(\"columnField\");\n\n        // Find the column from the full column list\n        // const col = columns.find((c) => c.field === field);\n\n        // If pivot is not allowed on this column, exit early\n        // if (!col || !col.pivot) return;\n\n        if (field && !pivotColumns.includes(field)) {\n          setPivotColumns((prev) => [...prev, field]);\n        }\n        if (\n          serverPivotCols &&\n          field &&\n          !serverPivotCols.includes(field) &&\n          serverPivoting &&\n          setServerPivotColsFn\n        ) {\n          setServerPivotColsFn((prev) => [...prev, field]);\n        }\n      },\n      [pivotColumns, serverPivotCols]\n    );\n\n    // for server-side row grouping\n    useEffect(() => {\n      if (isServerSide && onRowGroup) {\n        onRowGroup(groupedColumns);\n      }\n    }, [groupedColumns, isServerSide, onRowGroup]);\n\n    // Column drag & drop\n    const [draggedColumn, setDraggedColumn] = useState<string | null>(null);\n    const [dragOverColumn, setDragOverColumn] = useState<string | null>(null);\n    const columnDragCounter = useRef(0);\n    const tableRef = useRef<HTMLTableElement>(null);\n\n    // Cell editing\n    const [editingCell, setEditingCell] = useState<{\n      rowIndex: number;\n      field: string;\n    } | null>(null);\n    const [editValue, setEditValue] = useState(\"\");\n\n    // Master/Detail\n    const [expandedRows, setExpandedRows] = useState<Record<number, boolean>>(\n      {}\n    );\n    const [detailData, setDetailData] = useState<\n      Record<number, Record<string, unknown>[]>\n    >({});\n\n    // Create debounced filter handler using useCallback to maintain reference\n    const debouncedFnRef = useRef<ReturnType<typeof debounce> | undefined>(\n      undefined\n    );\n\n    const debouncedSetFilters = useCallback(\n      (newFilters: Record<string, string>) => {\n        if (debouncedFnRef.current) {\n          debouncedFnRef.current.cancel();\n        }\n        debouncedFnRef.current = debounce((filters: Record<string, string>) => {\n          setDebouncedFilters(filters);\n        }, 300);\n        debouncedFnRef.current(newFilters);\n      },\n      []\n    );\n\n    // Add undo/redo state\n    const [history, setHistory] = useState<{\n      past: Array<Record<string, unknown>[]>;\n      present: Record<string, unknown>[];\n      future: Array<Record<string, unknown>[]>;\n    }>({\n      past: [],\n      present: data,\n      future: [],\n    });\n\n    // Add undo/redo handlers\n    const canUndo = history.past.length > 0;\n    const canRedo = history.future.length > 0;\n    const undo = useCallback(() => {\n      if (!canUndo) return;\n\n      const newPast = history.past.slice(0, -1);\n      const newPresent = history.past[history.past.length - 1];\n      const newFuture = [history.present, ...history.future];\n\n      setHistory({\n        past: newPast,\n        present: newPresent,\n        future: newFuture,\n      });\n      setGridData(newPresent);\n    }, [history, canUndo]);\n\n    const redo = useCallback(() => {\n      if (!canRedo) return;\n\n      const newPast = [...history.past, history.present];\n      const newPresent = history.future[0];\n      const newFuture = history.future.slice(1);\n      setHistory({\n        past: newPast,\n        present: newPresent,\n        future: newFuture,\n      });\n\n      setGridData(newPresent);\n    }, [history, canRedo]);\n\n    // Add keyboard event listener for undo/redo\n    useEffect(() => {\n      const handleKeyDown = (e: KeyboardEvent) => {\n        if (e.metaKey || e.ctrlKey) {\n          if (e.key === \"z\" && !e.shiftKey) {\n            e.preventDefault();\n            undo();\n          } else if (e.key === \"z\" && e.shiftKey) {\n            e.preventDefault();\n            redo();\n          }\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [undo, redo]);\n\n    useImperativeHandle<HTMLDivElement, HTMLDivElement>(ref, () => {\n      const div = document.createElement(\"div\");\n      Object.assign(div, {\n        resetSelection: () => {\n          setSelectedRows({});\n        },\n      });\n      return div;\n    }, []);\n\n    // Initial Setup\n    useEffect(() => {\n      if (data && data.length > 0) {\n        let cookedData: Record<string, unknown>[];\n\n        if (treeData && treeDataChildrenField) {\n          // Build the tree\n          cookedData = buildTreeData(data, treeDataChildrenField, getDataPath);\n\n          // Add aggregations ONLY if columns include them\n          const requiresAggregation = propColumns?.some(\n            (col) => col.field === \"aggregatedCount\" || col.field === \"provided\"\n          );\n\n          // Step 2: Add aggregations (Sum & Provided columns)\n\n          if (requiresAggregation) {\n            computeAggregationsForTree(cookedData);\n          }\n        } else if (isChild) {\n          cookedData = data;\n        } else {\n          cookedData = getCookedData(data);\n        }\n        setGridData(cookedData);\n        // Initialize history with current data\n        setHistory({\n          past: [],\n          present: cookedData,\n          future: [],\n        });\n\n        const firstItem = cookedData[0];\n        const extracted = Object.keys(firstItem)\n          .filter((key) => key !== \"children\")\n          .map(\n            (key) =>\n              ({\n                field: key,\n                headerName:\n                  key.charAt(0).toUpperCase() +\n                  key.slice(1).replace(/([A-Z])/g, \" $1\"),\n                type: typeof firstItem[key] === \"number\" ? \"number\" : \"text\",\n                editable: true,\n                width: 150,\n                visible: true,\n                rowGroup: false,\n                aggFunc: typeof firstItem[key] === \"number\" ? \"sum\" : undefined,\n              }) as ColumnDef\n          );\n\n        setColumns(extracted);\n      }\n\n      if (propColumns && propColumns.length > 0) {\n        // Separate grouped and non-grouped columns\n        const groupedCols = propColumns.filter(\n          (col) => col.rowGroup && col.visible !== false\n        );\n        const nonGroupedCols = propColumns.filter(\n          (col) => !col.rowGroup && col.visible !== false\n        );\n\n        // Combine with grouped columns first\n        setColumns([...groupedCols, ...nonGroupedCols]);\n\n        // Initialize groupedColumns from columns with rowGroup=true\n        const initialGroupedColumns = groupedCols.map((col) => col.field);\n        if (initialGroupedColumns.length > 0) {\n          setGroupedColumns(initialGroupedColumns);\n        }\n\n        return;\n      }\n    }, [data, propColumns, treeData, getDataPath, isChild, getCookedData]);\n\n    const toggleTreeRowExpand = useCallback((nodeKey: string) => {\n      setTreeExpandedRows((prev) => ({\n        ...prev,\n        [nodeKey]: !prev[nodeKey],\n      }));\n    }, []);\n\n    // Update: Set initial expanded rows for tree data based on groupDefaultExpanded\n    useEffect(() => {\n      if (treeData && gridData && Array.isArray(gridData) && !treeInit) {\n        let initialExpanded: Record<string, boolean> = {};\n\n        const getNodeKey = (node: any, parentPath: string[] = []) => {\n          const nodeName =\n            typeof node.name === \"string\" ? node.name : String(node.name ?? \"\");\n          return [...parentPath, nodeName].join(\"/\");\n        };\n\n        const expandAll = (nodes: any[], parentPath: string[] = []) => {\n          nodes.forEach((node) => {\n            const nodeName =\n              typeof node.name === \"string\"\n                ? node.name\n                : String(node.name ?? \"\");\n            const nodeKey = getNodeKey(node, parentPath);\n            if (node.children && node.children.length > 0) {\n              initialExpanded[nodeKey] = true;\n              expandAll(node.children, [...parentPath, nodeName]);\n            }\n          });\n        };\n\n        const expandLevels = (\n          nodes: any[],\n          levels: number,\n          parentPath: string[] = []\n        ) => {\n          if (levels <= 0) return;\n          nodes.forEach((node) => {\n            const nodeName =\n              typeof node.name === \"string\"\n                ? node.name\n                : String(node.name ?? \"\");\n            const nodeKey = getNodeKey(node, parentPath);\n            if (node.children && node.children.length > 0) {\n              initialExpanded[nodeKey] = true;\n              expandLevels(node.children, levels - 1, [\n                ...parentPath,\n                nodeName,\n              ]);\n            }\n          });\n        };\n\n        if (groupDefaultExpanded === -1) {\n          expandAll(gridData);\n        } else if (groupDefaultExpanded > 0) {\n          expandLevels(gridData, groupDefaultExpanded);\n        }\n        setTreeExpandedRows(initialExpanded);\n        setTreeInit(true);\n      }\n    }, [treeData, gridData, groupDefaultExpanded, treeInit]);\n\n    useEffect(() => {\n      setTreeInit(false);\n    }, [gridData]);\n\n    // Update filters and trigger debounced update\n    const handleFilterChange = useCallback(\n      (field: string, value: string) => {\n        const newFilters = { ...filters, [field]: value };\n        setFilters(newFilters);\n        debouncedSetFilters(newFilters);\n      },\n\n      [filters, debouncedSetFilters]\n    );\n\n    // for filtering on server side\n    useEffect(() => {\n      if (isServerSide && onFilterChange && filters) {\n        // Build AG Grid-style filterModel\n        const filterModel: Record<string, IFilterModelItem> = {};\n\n        Object.entries(filters).forEach(([field, value]) => {\n          if (value !== undefined && value !== \"\") {\n            const col = columns.find((c) => c.field === field);\n            filterModel[field] = {\n              filterType: col?.type || \"text\",\n              type: filterTypes[field] || \"contains\",\n              filter: value,\n            };\n          }\n        });\n\n        onFilterChange(filterModel);\n      }\n    }, [filters]);\n\n    // Cleanup debounce on unmount\n    useEffect(() => {\n      return () => {\n        if (debouncedFnRef.current) {\n          debouncedFnRef.current.cancel();\n        }\n      };\n    }, []);\n\n    const handleFilterTypeChange = useCallback(\n      (field: string, type: string) => {\n        setFilterTypes((prev) => ({ ...prev, [field]: type }));\n      },\n      []\n    );\n\n    // Update filteredData to use filter types\n    const filteredData = useMemo(() => {\n      if (treeData) {\n        return filterTreeData(\n          gridData,\n          (row) => {\n            return Object.keys(debouncedFilters).every((field) => {\n              if (!debouncedFilters[field]) return true;\n              const col = columns.find((c) => c.field === field);\n              if (!col) return true;\n\n              const cellValue = row[field];\n              const filterValue = debouncedFilters[field];\n              const filterType =\n                filterTypes[field] || GetDefaultFilterType(col);\n\n              // Handle null/undefined values\n              if (cellValue == null) return false;\n\n              // Number filtering\n              if (col.type === \"number\") {\n                const numValue = Number(cellValue);\n                const filterNum = Number(filterValue);\n\n                switch (filterType) {\n                  case \"equals\":\n                    return numValue === filterNum;\n                  case \"greaterThan\":\n                    return numValue > filterNum;\n                  case \"lessThan\":\n                    return numValue < filterNum;\n                  case \"between\": {\n                    const [min, max] = filterValue.split(\",\").map(Number);\n                    return numValue >= min && numValue <= max;\n                  }\n                  default:\n                    return true;\n                }\n              }\n\n              // Date filtering\n              if (col.type === \"date\") {\n                const dateValue = new Date(cellValue as string);\n                const filterDate = new Date(filterValue);\n\n                switch (filterType) {\n                  case \"equals\":\n                    return (\n                      dateValue.toDateString() === filterDate.toDateString()\n                    );\n                  case \"before\":\n                    return dateValue < filterDate;\n                  case \"after\":\n                    return dateValue > filterDate;\n                  case \"between\": {\n                    const [start, end] = filterValue\n                      .split(\",\")\n                      .map((d) => new Date(d));\n                    return dateValue >= start && dateValue <= end;\n                  }\n                  default:\n                    return true;\n                }\n              }\n\n              // Text comparison (default)\n              const cellString = String(cellValue).toLowerCase();\n              const filterString = filterValue.toLowerCase();\n\n              switch (filterType) {\n                case \"equals\":\n                  return cellString === filterString;\n                case \"startsWith\":\n                  return cellString.startsWith(filterString);\n                case \"endsWith\":\n                  return cellString.endsWith(filterString);\n                case \"contains\":\n                default:\n                  return cellString.includes(filterString);\n              }\n            });\n          },\n          treeDataChildrenField || \"children\"\n        );\n      }\n\n      // If server-side filtering is enabled, just return all gridData (parent will handle filtering)\n      if (isServerSide) {\n        return gridData;\n      }\n\n      if (!gridData || gridData.length === 0) {\n        return [];\n      }\n\n      const filtered = gridData.filter((row) => {\n        return Object.keys(debouncedFilters).every((field) => {\n          if (!debouncedFilters[field]) return true;\n          const col = columns.find((c) => c.field === field);\n          if (!col) return true;\n\n          const cellValue = row[field];\n          const filterValue = debouncedFilters[field];\n          const filterType = filterTypes[field] || GetDefaultFilterType(col);\n\n          // Handle null/undefined values\n          if (cellValue == null) return false;\n\n          if (col.type === \"number\") {\n            const numValue = Number(cellValue);\n            const filterNum = Number(filterValue);\n\n            switch (filterType) {\n              case \"equals\":\n                return numValue === filterNum;\n              case \"greaterThan\":\n                return numValue > filterNum;\n              case \"lessThan\":\n                return numValue < filterNum;\n              case \"between\": {\n                const [min, max] = filterValue.split(\",\").map(Number);\n                return numValue >= min && numValue <= max;\n              }\n              default:\n                return true;\n            }\n          }\n\n          if (col.type === \"date\") {\n            const dateValue = new Date(cellValue as string);\n            const filterDate = new Date(filterValue);\n\n            switch (filterType) {\n              case \"equals\":\n                return dateValue.toDateString() === filterDate.toDateString();\n              case \"before\":\n                return dateValue < filterDate;\n              case \"after\":\n                return dateValue > filterDate;\n              case \"between\": {\n                const [start, end] = filterValue\n                  .split(\",\")\n                  .map((d) => new Date(d));\n                return dateValue >= start && dateValue <= end;\n              }\n              default:\n                return true;\n            }\n          }\n\n          // Text comparison\n          const cellString = String(cellValue).toLowerCase();\n          const filterString = filterValue.toLowerCase();\n\n          switch (filterType) {\n            case \"equals\":\n              return cellString === filterString;\n            case \"startsWith\":\n              return cellString.startsWith(filterString);\n            case \"endsWith\":\n              return cellString.endsWith(filterString);\n            case \"contains\":\n            default:\n              return cellString.includes(filterString);\n          }\n        });\n      });\n\n      return filtered;\n    }, [\n      gridData,\n      debouncedFilters,\n      filterTypes,\n      columns,\n      treeData,\n      treeDataChildrenField,\n      isServerSide,\n    ]);\n\n    // ----------------------------\n    // 2) Sorting\n    // ----------------------------\n    const handleSort = useCallback(\n      (field: string) => {\n        if (isServerSide && onSortChange) {\n          // Get current sort direction for this field from sortModel prop\n          const currentSort = (typeof sortModel !== \"undefined\"\n            ? sortModel.find((s) => s.colName === field)\n            : undefined) || { sort: undefined };\n\n          let direction: \"asc\" | \"desc\" | undefined;\n          if (!currentSort.sort) {\n            direction = \"asc\";\n          } else if (currentSort.sort === \"asc\") {\n            direction = \"desc\";\n          } else if (currentSort.sort === \"desc\") {\n            direction = \"asc\"; // Remove sort\n          }\n\n          // Remove this column from previous sorts\n          const filtered =\n            typeof sortModel !== \"undefined\"\n              ? sortModel.filter((s) => s.colName !== field)\n              : [];\n\n          // If direction is undefined, just remove the sort for this column\n          const newSortModel = direction\n            ? [{ colName: field, sort: direction }]\n            : filtered;\n\n          onSortChange(newSortModel);\n          return;\n        }\n\n        let direction: \"asc\" | \"desc\" = \"asc\";\n        if (sortConfig.key === field && sortConfig.direction === \"asc\") {\n          direction = \"desc\";\n        }\n\n        setSortConfig({ key: field, direction });\n\n        // Sort the data\n        const sorted = [...gridData].sort((a, b) => {\n          const aValue = a[field] as string | number;\n          const bValue = b[field] as string | number;\n          if (aValue < bValue) return direction === \"asc\" ? -1 : 1;\n          if (aValue > bValue) return direction === \"asc\" ? 1 : -1;\n          return 0;\n        });\n        setGridData(sorted);\n      },\n\n      [sortConfig, gridData]\n    );\n\n    // If you also want multi-sort with shiftKey, you can adapt accordingly.\n    const handleMultiSort = useCallback(\n      (field: string, e: React.MouseEvent) => {\n        if (e?.shiftKey) {\n          // Multi-sort scenario\n          // For simplicity, we'll just do single-column sort here\n        }\n        handleSort(field);\n      },\n      [handleSort]\n    );\n\n    // ----------------------------\n    // 5) Column Drag & Drop\n    // ----------------------------\n    const handleColumnDragStart = useCallback(\n      (e: React.DragEvent, field: string) => {\n        setDraggedColumn(field);\n        columnDragCounter.current = 0;\n        e.dataTransfer.effectAllowed = \"move\";\n        e.dataTransfer.setData(\"columnField\", field);\n      },\n      []\n    );\n\n    const handleColumnDragOver = useCallback(\n      (e: React.DragEvent, field: string) => {\n        e.preventDefault();\n        e.dataTransfer.dropEffect = \"move\";\n        if (dragOverColumn !== field) {\n          setDragOverColumn(field);\n        }\n      },\n      [dragOverColumn]\n    );\n\n    const handleColumnDragEnter = useCallback((e: React.DragEvent) => {\n      e.preventDefault();\n      columnDragCounter.current++;\n    }, []);\n\n    const handleColumnDragLeave = useCallback((e: React.DragEvent) => {\n      e.preventDefault();\n      columnDragCounter.current--;\n      if (columnDragCounter.current === 0) {\n        setDragOverColumn(null);\n      }\n    }, []);\n\n    const handleColumnDrop = useCallback(\n      (e: React.DragEvent, targetField: string) => {\n        e.preventDefault();\n        columnDragCounter.current = 0;\n        setDragOverColumn(null);\n\n        if (!draggedColumn || draggedColumn === targetField) return;\n\n        const sourceIndex = columns.findIndex(\n          (col) => col.field === draggedColumn\n        );\n        const targetIndex = columns.findIndex(\n          (col) => col.field === targetField\n        );\n\n        if (sourceIndex === targetIndex) return;\n\n        // Create new columns array with reordered columns\n        const newCols = [...columns];\n        const [moved] = newCols.splice(sourceIndex, 1);\n        newCols.splice(targetIndex, 0, moved);\n\n        // Important: Preserve column properties and only update order\n        setColumns(newCols);\n\n        // Reset drag state\n        setDraggedColumn(null);\n      },\n      [draggedColumn, columns]\n    );\n\n    const handleColumnDragEnd = useCallback(() => {\n      columnDragCounter.current = 0;\n      setDraggedColumn(null);\n      setDragOverColumn(null);\n    }, []);\n\n    // ----------------------------\n    // 6) Editing\n    // ----------------------------\n    const startEditing = useCallback(\n      (rowIndex: number, field: string, value: string) => {\n        if (editType === \"fullRow\") {\n          setEditingRowId(rowIndex);\n          setEditingRowData((prev) => ({\n            ...prev,\n            [field]: value,\n          }));\n        } else {\n          setEditingCell({ rowIndex, field });\n          setEditValue(value);\n        }\n      },\n      [editType]\n    );\n\n    const handleEditChange = useCallback(\n      (value: string | number | boolean | Date | null, editorType?: string) => {\n        if (\n          editorType === \"select\" ||\n          editorType === \"date\" ||\n          editorType === \"time\" ||\n          editorType === \"dateTime\" ||\n          editorType === \"checkbox\"\n        ) {\n          if (!editingCell) return;\n          const { field } = editingCell;\n          const newRow = { ...gridData[editingCell.rowIndex], [field]: value };\n          const idxInAll = gridData.findIndex(\n            (r) => r === gridData[editingCell.rowIndex]\n          );\n\n          if (idxInAll !== -1) {\n            const previousRecord = gridData[editingCell.rowIndex];\n            const newData = [...gridData];\n            const cookedData = getCookedData(newData);\n            newData[idxInAll] = newRow;\n\n            //For notify parent with new record, previous record and field\n            if (onDataChange) {\n              onDataChange(newRow, previousRecord, field);\n            }\n            setGridData(cookedData);\n\n            // Update history with current state before making changes\n            setHistory((prev) => ({\n              past: [...prev.past, prev.present],\n              present: cookedData,\n              future: [],\n            }));\n          }\n          setEditingCell(null);\n          setEditValue(\"\");\n        } else {\n          setEditValue(String(value));\n        }\n      },\n      [editingCell, gridData, onDataChange]\n    );\n\n    const handleEditChangeCheckbox = useCallback(\n      (value: boolean, rowIndex: number, field: string) => {\n        const newRow = { ...gridData[rowIndex], [field]: value };\n        const idxInAll = gridData.findIndex((r) => r === gridData[rowIndex]);\n\n        if (idxInAll !== -1) {\n          const newData = [...gridData];\n          newData[idxInAll] = newRow;\n          const cookedData = getCookedData(newData);\n          setGridData(cookedData);\n\n          // Update history with current state before making changes\n          setHistory((prev) => ({\n            past: [...prev.past, prev.present],\n            present: cookedData,\n            future: [],\n          }));\n\n          //For notify parent with new record, previous record and field\n          if (onDataChange) {\n            onDataChange(newRow, gridData[rowIndex], field);\n          }\n        }\n        setEditingCell(null);\n        setEditValue(\"\");\n      },\n      [gridData, onDataChange]\n    );\n\n    // ----------------------------\n    // 7) Master/Detail\n    // ----------------------------\n    const toggleRowExpand = useCallback(\n      (rowIndex: number) => {\n        setExpandedRows((prev) => {\n          const newState = { ...prev };\n          if (newState[rowIndex]) {\n            delete newState[rowIndex];\n          } else {\n            newState[rowIndex] = true;\n            // Get detail data from children if available\n            const row = gridData[rowIndex];\n            if (row && row.children) {\n              setDetailData((old) => ({\n                ...old,\n                [rowIndex]: row.children as Record<string, unknown>[],\n              }));\n            } else if (getDetailRowData) {\n              // Fallback to getDetailRowData if no children\n              getDetailRowData({\n                data: row,\n                successCallback: (detail) => {\n                  setDetailData((old) => ({ ...old, [rowIndex]: detail }));\n                },\n              });\n            }\n          }\n          return newState;\n        });\n      },\n      [gridData, getDetailRowData]\n    );\n\n    useEffect(() => {\n      // Update detailData for all expanded rows when gridData changes\n      setDetailData((prev) => {\n        const updated: typeof prev = {};\n        Object.keys(expandedRows).forEach((rowIndexStr) => {\n          const rowIndex = Number(rowIndexStr);\n          const row = gridData[rowIndex];\n          if (row && row.children) {\n            updated[rowIndex] = row.children as Record<string, unknown>[];\n          }\n        });\n        return updated;\n      });\n    }, [gridData, expandedRows]);\n\n    // ----------------------------\n    // 8) Row Grouping\n    // ----------------------------\n    const toggleGroupExpand = useCallback((groupKey: string) => {\n      setExpandedGroups((prev) => {\n        const newState = { ...prev };\n        if (newState[groupKey]) {\n          delete newState[groupKey];\n        } else {\n          newState[groupKey] = true;\n        }\n        return newState;\n      });\n    }, []);\n\n    const setColumnGrouped = useCallback(\n      (field: string, grouped: boolean) => {\n        // If server-side grouping is enabled, notify parent and skip client grouping\n        if (isServerSide && onRowGroup) {\n          // Build the new groupedColumns array\n          setGroupedColumns((prev) => {\n            let newGrouped;\n            if (grouped) {\n              newGrouped = prev.includes(field) ? prev : [...prev, field];\n            } else {\n              newGrouped = prev.filter((f) => f !== field);\n            }\n            // Notify parent to fetch grouped data from server\n            onRowGroup(newGrouped);\n            return newGrouped;\n          });\n          return; // Do not do client-side grouping\n        }\n        // Update columns\n        const newColumns = columns.map((col) => {\n          if (col.field === field) {\n            return { ...col, rowGroup: grouped };\n          }\n          return col;\n        });\n\n        // If grouping is enabled, move the grouped column to the start\n        if (grouped) {\n          const groupedColumn = newColumns.find((col) => col.field === field);\n\n          if (groupedColumn) {\n            const filteredColumns = newColumns.filter(\n              (col) => col.field !== field\n            );\n            setColumns([groupedColumn, ...filteredColumns]);\n          }\n        } else {\n          setColumns(newColumns);\n        }\n\n        // Update groupedColumns\n        setGroupedColumns((prev) => {\n          if (grouped) {\n            if (!prev.includes(field)) {\n              return [...prev, field];\n            }\n            return prev;\n          } else {\n            return prev.filter((f) => f !== field);\n          }\n        });\n      },\n      [columns, isServerSide, onRowGroup]\n    );\n\n    // ----------------------------\n    // Group & Flatten Data for Virtualization\n    // ----------------------------\n    const calculateAggregation = useCallback(\n      (values: unknown[], aggFunc: string) => {\n        if (!values || values.length === 0) return 0;\n        // Check if it's a custom aggregation function\n        if (typeof aggFunc === \"string\" && aggFuncs[aggFunc]) {\n          return aggFuncs[aggFunc]({ values });\n        }\n\n        // Handle built-in aggregation functions\n        switch (aggFunc) {\n          case \"sum\":\n            return values.reduce(\n              (acc: number, val) => acc + (Number(val) || 0),\n              0\n            );\n          case \"avg\": {\n            const sum = values.reduce(\n              (acc: number, val) => acc + (Number(val) || 0),\n              0\n            );\n            return sum / values.length;\n          }\n          case \"min\":\n            return Math.min(...values.map((v) => Number(v)));\n          case \"max\":\n            return Math.max(...values.map((v) => Number(v)));\n          case \"count\":\n            return values.length;\n          default:\n            return values[0];\n        }\n      },\n      [aggFuncs]\n    );\n\n    const groupedData = useMemo(() => {\n      // If server-side grouping is enabled, always use the data as provided by the parent\n      if (isServerSide && onRowGroup) {\n        // Only use data if it's grouped (has isGroup), otherwise return null (no grouping)\n        if (Array.isArray(data) && data.length > 0 && data[0]?.isGroup) {\n          return data as GroupObject[];\n        }\n        // If not grouped, return null to show flat data (no grouping)\n        return null;\n      }\n\n      // Otherwise, do client-side grouping\n      if (!filteredData || filteredData.length === 0) {\n        return null;\n      }\n\n      if (groupedColumns.length === 0) return null;\n\n      const groupFields = groupedColumns;\n\n      // Recursively group the data\n      function groupData(\n        rows: Record<string, unknown>[],\n        level = 0,\n        parentKey = \"\"\n      ): GroupObject[] {\n        if (level >= groupFields.length)\n          return rows as unknown as GroupObject[];\n\n        const field = groupFields[level];\n        const groupsMap: Record<string, GroupObject> = {};\n\n        rows.forEach((item) => {\n          const gVal = item[field];\n          const gKey = parentKey\n            ? `${parentKey}__${String(gVal)}`\n            : `${field}__${String(gVal)}`;\n\n          if (!groupsMap[gKey]) {\n            groupsMap[gKey] = {\n              field,\n              value: gVal,\n              key: gKey,\n              level,\n              children: [],\n              isGroup: true,\n              originalChildren: item.children as\n                | Record<string, unknown>[]\n                | undefined,\n              aggregations: {},\n            };\n          }\n          groupsMap[gKey].children.push(item);\n        });\n\n        // Calculate aggregations for all numeric columns\n        Object.values(groupsMap).forEach((groupObj) => {\n          columns.forEach((col) => {\n            if (col.type === \"number\" && col.aggFunc) {\n              const values = groupObj.children\n                .map((child: Record<string, unknown>) => child[col.field])\n                .filter((val: unknown) => val != null);\n              if (values.length > 0) {\n                groupObj.aggregations[col.field] = calculateAggregation(\n                  values,\n                  col.aggFunc\n                );\n              }\n            }\n          });\n\n          if (level < groupFields.length - 1) {\n            groupObj.children = groupData(\n              groupObj.children,\n              level + 1,\n              groupObj.key\n            );\n          }\n        });\n\n        return Object.values(groupsMap);\n      }\n\n      const result = groupData(filteredData, 0, \"\");\n      return result;\n    }, [filteredData, groupedColumns, columns, isServerSide, data]);\n\n    const flattenedRows = useMemo(() => {\n      const flatList: Array<{\n        type: string;\n        groupKey?: string;\n        groupField?: string;\n        groupValue?: unknown;\n        level?: number;\n        indent?: number;\n        itemCount?: number;\n        aggregations?: Record<string, unknown>;\n        row?: Record<string, unknown>;\n        rowIndex?: number;\n        parentRow?: Record<string, unknown>;\n        parentIndex?: number;\n      }> = [];\n\n      if (treeData && filteredData && Array.isArray(filteredData)) {\n        // Use the flattenTree helper for tree data\n        return flattenTree(filteredData, treeExpandedRows, 0, { current: 0 });\n      }\n\n      const dataToRender = filteredData;\n\n      if (!dataToRender || dataToRender.length === 0) {\n        return flatList;\n      }\n\n      if (!filteredData || filteredData.length === 0) {\n        return flatList;\n      }\n\n      if (groupedData && groupedData.length > 0) {\n        // Handle grouped data\n        const walkGroups = (\n          groups: GroupObject[],\n          indentLevel = 0,\n          parentIndex = 0\n        ) => {\n          groups?.forEach((group, groupIndex) => {\n            // Add group header with aggregations\n            flatList.push({\n              type: \"group\",\n              groupKey: group.key,\n              groupField: group.field,\n              groupValue: group.value,\n              level: group.level,\n              indent: indentLevel,\n              itemCount: group.children.length,\n              aggregations: group.aggregations,\n            });\n\n            // If group is expanded, add children\n            if (expandedGroups[group.key]) {\n              if (group.children[0]?.isGroup) {\n                // Nested groups - cast to GroupObject[]\n                walkGroups(\n                  group.children as unknown as GroupObject[],\n                  indentLevel + 1,\n                  parentIndex + groupIndex\n                );\n              } else {\n                // Data rows\n                group.children.forEach(\n                  (row: Record<string, unknown>, index: number) => {\n                    const absoluteIndex = parentIndex + groupIndex + index;\n                    flatList.push({\n                      type: \"data\",\n                      row,\n                      rowIndex: absoluteIndex,\n                      indent: indentLevel + 1,\n                    });\n                    // Add detail row if expanded\n                    if (masterDetail && expandedRows[absoluteIndex]) {\n                      flatList.push({\n                        type: \"detail\",\n                        parentRow: row,\n                        parentIndex: absoluteIndex,\n                        indent: indentLevel + 2,\n                      });\n                    }\n                  }\n                );\n              }\n            }\n          });\n        };\n\n        walkGroups(groupedData, 0, 0);\n      } else {\n        // Handle flat data\n        dataToRender.forEach((row, index) => {\n          flatList.push({\n            type: \"data\",\n            row,\n            rowIndex: index,\n            indent: 0,\n          });\n          if (masterDetail && expandedRows[index]) {\n            flatList.push({\n              type: \"detail\",\n              parentRow: row,\n              parentIndex: index,\n              indent: 1,\n            });\n          }\n        });\n      }\n\n      return flatList;\n    }, [\n      filteredData,\n      groupedData,\n      expandedGroups,\n      expandedRows,\n      masterDetail,\n      enablePivot,\n      pivotColumns,\n      treeData,\n      gridData,\n      expandedRows,\n      treeExpandedRows,\n    ]);\n\n    // Or modify it to only expand on initial load if you want that behavior\n    useEffect(() => {\n      if (groupedData && groupedColumns.length === 1) {\n        // Only for first grouping\n        setExpandedGroups({}); // Reset expanded groups when grouping changes\n      }\n    }, [groupedData, groupedColumns]);\n\n    // ----------------------------\n    // 9) Virtualization Setup\n    // ----------------------------\n    const scrollParentRef = useRef<HTMLTableSectionElement>(null);\n\n    const rowVirtualizer = useVirtualizer({\n      count: flattenedRows.length,\n      getScrollElement: () => scrollParentRef.current,\n      estimateSize: (index) => {\n        const item = flattenedRows[index];\n        // Dynamically calculate detail row height based on content\n        if (item?.type === \"detail\") {\n          const detailRows = detailData[item.parentIndex || 0]?.length || 0;\n          // Calculate height: header (40px) + rows (40px each) + padding (16px) + extra padding to prevent overlap (16px)\n          const calculatedHeight = Math.min(detailRows * 40 + 72, 600); // Cap at 600px\n          return calculatedHeight;\n        }\n        return 40; // Standard row height\n      },\n      useAnimationFrameWithResizeObserver: true,\n      overscan: 5,\n    });\n\n    // Add this function above your return statement in DataGrid\n\n    const handleTreeRowDrop = useCallback(\n      (draggedNodeKey: string, targetNodeKey: string) => {\n        if (!rowDragManaged || !treeData) return;\n\n        // Prevent dropping onto itself\n        if (draggedNodeKey === targetNodeKey) return;\n\n        // Prevent dropping into its own descendant\n        const draggedItem = flattenedRows.find(\n          (\n            item\n          ): item is {\n            type: \"data\";\n            nodeKey: string;\n            row: Record<string, unknown>;\n          } =>\n            item.type === \"data\" &&\n            \"nodeKey\" in item &&\n            item.nodeKey === draggedNodeKey\n        );\n\n        const targetItem = flattenedRows.find(\n          (\n            item\n          ): item is {\n            type: \"data\";\n            nodeKey: string;\n            row: Record<string, unknown>;\n          } =>\n            item.type === \"data\" &&\n            \"nodeKey\" in item &&\n            item.nodeKey === targetNodeKey\n        );\n        if (!draggedItem || !targetItem) return;\n\n        // Don't allow dropping into a descendant\n        const descendantKeys = getAllDescendantNodeKeys(\n          draggedItem.row,\n          draggedNodeKey.split(\"/\").slice(0, -1)\n        );\n        if (descendantKeys.includes(targetNodeKey)) return;\n\n        // Get source and target paths\n        const sourcePath = draggedNodeKey.split(\"/\");\n        const targetPath = targetNodeKey.split(\"/\");\n\n        // Move the node in the tree\n        const newTree = moveTreeNode(gridData, sourcePath, targetPath);\n\n        setGridData(newTree);\n\n        // Optionally update history for undo/redo\n        setHistory((prev) => ({\n          past: [...prev.past, prev.present],\n          present: newTree,\n          future: [],\n        }));\n\n        // Call the callback if provided\n        if (onRowDragEnd) {\n          onRowDragEnd({\n            draggedRow: draggedItem.row,\n            targetRow: targetItem.row,\n            newData: newTree,\n          });\n        }\n      },\n      [\n        rowDragManaged,\n        treeData,\n        flattenedRows,\n        gridData,\n        setGridData,\n        setHistory,\n        onRowDragEnd,\n      ]\n    );\n\n    // ----------------------------\n    // 10) Rendering: Flattened Virtual Rows\n    // ----------------------------\n\n    // Which columns do we show? (Ignore rowGroup columns except the first if needed)\n\n    // This guarantees that all grouped columns (in the order of groupedColumns) are\n    // always at the start of your visible columns.\n    const displayColumns = useMemo(() => {\n      // Grouped columns first, then the rest, but hide columns with aggSourceField\n      const grouped = columns.filter(\n        (col) =>\n          groupedColumns.includes(col.field) &&\n          col.visible !== false &&\n          !col.aggSourceField // hide if aggSourceField is set\n      );\n      const nonGrouped = columns.filter(\n        (col) =>\n          !groupedColumns.includes(col.field) &&\n          col.visible !== false &&\n          !col.aggSourceField // hide if aggSourceField is set\n      );\n      return [...grouped, ...nonGrouped];\n    }, [columns, groupedColumns, enablePivot, pivotColumns, enablePivot]);\n\n    // Add a helper function to get cell value\n    const getCellValue = (\n      row: Record<string, unknown>,\n      field: string,\n      col: ColumnDef\n    ): unknown => {\n      // If the row has aggregations and this is an aggregated column, use the aggregation value\n      if (\n        (row as GroupObject).aggregations &&\n        col.aggFunc &&\n        (row as GroupObject).aggregations[field] !== undefined\n      ) {\n        return (row as GroupObject).aggregations[field];\n      }\n\n      // Otherwise, use the field value\n      return row[field];\n    };\n\n    // Add a helper function to format cell value using valueFormatter if available\n    const formatCellValue = (\n      value: unknown,\n      row: Record<string, unknown>,\n      col: ColumnDef\n    ) => {\n      if (col.valueFormatter) {\n        return col.valueFormatter({ value, data: row });\n      }\n\n      if (col.editorType === \"date\" && value) {\n        // Format as YYYY-MM-DD or your preferred format\n        const date = new Date(value as string);\n        if (!isNaN(date.getTime())) {\n          return date.toLocaleDateString(); // or use date-fns/format for custom format\n        }\n      }\n      return value ? String(value) : \"\";\n    };\n\n    const handleTreeRowsDrop = useCallback(\n      (draggedNodeKeys: string[], targetNodeKey: string) => {\n        if (!rowDragManaged || !treeData) return;\n        if (draggedNodeKeys.includes(targetNodeKey)) return;\n\n        let newTree = gridData;\n        draggedNodeKeys.forEach((draggedNodeKey) => {\n          const draggedItem = flattenedRows.find(\n            (\n              item\n            ): item is {\n              type: \"data\";\n              nodeKey: string;\n              row: Record<string, unknown>;\n            } =>\n              item.type === \"data\" &&\n              \"nodeKey\" in item &&\n              item.nodeKey === draggedNodeKey\n          );\n          const targetItem = flattenedRows.find(\n            (\n              item\n            ): item is {\n              type: \"data\";\n              nodeKey: string;\n              row: Record<string, unknown>;\n            } =>\n              item.type === \"data\" &&\n              \"nodeKey\" in item &&\n              item.nodeKey === targetNodeKey\n          );\n          if (!draggedItem || !targetItem) return;\n\n          const descendantKeys = getAllDescendantNodeKeys(\n            draggedItem.row,\n            draggedNodeKey.split(\"/\").slice(0, -1)\n          );\n          if (descendantKeys.includes(targetNodeKey)) return;\n\n          const sourcePath = draggedNodeKey.split(\"/\");\n          const targetPath = targetNodeKey.split(\"/\");\n\n          newTree = moveTreeNode(newTree, sourcePath, targetPath);\n        });\n\n        setGridData(newTree);\n\n        setHistory((prev) => ({\n          past: [...prev.past, prev.present],\n          present: newTree,\n          future: [],\n        }));\n\n        if (onRowDragEnd) {\n          const draggedRowsArr = draggedNodeKeys\n            .map((key) => {\n              const item = flattenedRows.find(\n                (item) =>\n                  item.type === \"data\" &&\n                  \"nodeKey\" in item &&\n                  item.nodeKey === key\n              );\n              return item?.row;\n            })\n            .filter((row): row is Record<string, unknown> => !!row);\n\n          onRowDragEnd({\n            draggedRow: draggedRowsArr[0] ?? null, // required\n            draggedRows: draggedRowsArr, // optional\n            targetRow:\n              flattenedRows.find(\n                (item) =>\n                  item.type === \"data\" &&\n                  \"nodeKey\" in item &&\n                  item.nodeKey === targetNodeKey\n              )?.row ?? null,\n            newData: newTree,\n          });\n        }\n      },\n      [\n        rowDragManaged,\n        treeData,\n        flattenedRows,\n        gridData,\n        setGridData,\n        setHistory,\n        onRowDragEnd,\n      ]\n    );\n\n    /**\n     * Inline helper: Render a single \"virtual item\" row.\n     * We'll handle group vs. data vs. detail row by checking flattenedRows[idx].type.\n     */\n    const renderRow = (virtualRow: VirtualItem) => {\n      const item = flattenedRows[virtualRow.index];\n\n      if (!item) {\n        return null;\n      }\n\n      // 1) Group Header Row\n      if (item.type === \"group\") {\n        const isExpanded = item.groupKey\n          ? expandedGroups[item.groupKey]\n          : false;\n        const groupColumn = columns.find(\n          (col) => col.field === item.groupField\n        );\n\n        return (\n          <TableRow\n            key={virtualRow.key}\n            data-index={virtualRow.index}\n            ref={rowVirtualizer.measureElement}\n            style={{\n              position: \"absolute\",\n              transform: `translateY(${virtualRow.start}px)`,\n              width: \"100%\",\n              display: \"table\",\n              tableLayout: \"fixed\",\n              top: 0,\n            }}\n            className={cn(\"hover:bg-gray-100\")}\n          >\n            {displayColumns.map((col, colIndex) => {\n              const isGroupColumn = col.field === item.groupField;\n              return (\n                <TableCell\n                  key={`${colIndex}-${col.field}`}\n                  style={{\n                    ...getCellWidth(col),\n                    textWrap: \"initial\",\n                    overflow: \"hidden\",\n                    cursor: \"text\",\n                  }}\n                  className=\"p-0\"\n                >\n                  {isGroupColumn ? (\n                    <div\n                      className=\"flex items-center cursor-pointer w-full\"\n                      onClick={() =>\n                        item.groupKey && toggleGroupExpand(item.groupKey)\n                      }\n                    >\n                      {isExpanded ? (\n                        <ChevronDown className=\"h-5 w-5 mr-1\" />\n                      ) : (\n                        <ChevronRight className=\"h-5 w-5 mr-1\" />\n                      )}\n                      <div>\n                        <p className=\"font-medium\">\n                          {groupColumn\n                            ? `${String(item.groupValue)}`\n                            : String(item.groupValue)}\n                        </p>\n                        <p className=\"text-gray-500 font-[10px]\">\n                          ({item.itemCount} items)\n                        </p>\n                      </div>\n                    </div>\n                  ) : \"aggFunc\" in col &&\n                    col.aggFunc &&\n                    item.aggregations &&\n                    item.aggregations[col.field] !== undefined ? (\n                    <div className=\"w-full\">\n                      <div className=\"flex items-center bg-gray-100 px-2 w-[min-content] rounded-md text-sm\">\n                        <span className=\"text-gray-600 capitalize\">\n                          {col.aggFunc}\n                        </span>\n                        <span className=\"mx-1 text-gray-500\">:</span>\n                        <span className=\"font-semibold text-gray-900\">\n                          {(() => {\n                            const value = item.aggregations[col.field];\n                            switch (col.aggFunc) {\n                              case \"avg\":\n                                return (value as number).toFixed(2);\n                              case \"count\":\n                                return Math.round(value as number).toString();\n                              default:\n                                return (value as number).toLocaleString();\n                            }\n                          })()}\n                        </span>\n                      </div>\n                    </div>\n                  ) : null}\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        );\n      }\n\n      // 2) Data Row\n      if (item.type === \"data\") {\n        const { row, indent, rowIndex } = item;\n\n        const hasChildren =\n          row?.children &&\n          Array.isArray(row.children) &&\n          row.children.length > 0;\n\n        const isExpanded =\n          rowIndex !== undefined ? expandedRows[rowIndex] : false;\n\n        let expandButton: React.ReactNode = null;\n\n        if (treeData && hasChildren && item.type === \"data\") {\n          const nodeKey = (item as { nodeKey: string }).nodeKey;\n\n          expandButton = (\n            <button\n              className=\"mr-2 focus:outline-none cursor-pointer\"\n              onClick={() => toggleTreeRowExpand(nodeKey)}\n            >\n              {treeExpandedRows[nodeKey] ? (\n                <ChevronDown className=\"size-4 \" />\n              ) : (\n                <ChevronRight className=\"size-4\" />\n              )}\n            </button>\n          );\n        } else if (\n          row?.children &&\n          Array.isArray(row.children) &&\n          row.children.length > 0\n        ) {\n          expandButton = (\n            <button\n              className=\"mr-2 focus:outline-none cursor-pointer\"\n              onClick={() =>\n                rowIndex !== undefined && toggleRowExpand(rowIndex)\n              }\n            >\n              {isExpanded ? (\n                <ChevronDown className=\"h-4 w-4\" />\n              ) : (\n                <ChevronRight className=\"h-4 w-4\" />\n              )}\n            </button>\n          );\n        }\n\n        // Full row editing logic\n        const isFullRowEditing =\n          editType === \"fullRow\" &&\n          typeof onRowValueChanged === \"function\" &&\n          typeof onCellValueChanged === \"function\" &&\n          editingRowId === rowIndex;\n\n        // Get the nodeKey if availble - for dragging the selected rows in TREE data\n        const nodeKey =\n          treeData && \"nodeKey\" in item && typeof item.nodeKey === \"string\"\n            ? item.nodeKey\n            : undefined;\n\n        return (\n          <TableRow\n            key={virtualRow.key}\n            data-index={virtualRow.index}\n            ref={rowVirtualizer.measureElement}\n            style={{\n              position: \"absolute\",\n              transform: `translateY(${virtualRow.start}px)`,\n              width: \"100%\",\n              display: \"table\",\n              tableLayout: \"fixed\",\n              top: 0,\n            }}\n            className={cn({\n              \"bg-blue-100\": rowIndex !== undefined && selectedRows[rowIndex],\n              \"hover:bg-gray-100\": true,\n              \"border-b-[3px] border-indigo-200\":\n                item.type === \"data\" &&\n                \"nodeKey\" in item &&\n                dragOverRowKey === item.nodeKey,\n            })}\n            onClick={() =>\n              onRowClick?.({\n                data: row as Record<string, unknown>,\n                rowIndex: rowIndex as number,\n              })\n            }\n            onDragLeave={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              setDragOverRowKey(null);\n            }}\n            onDragStart={(e) => {\n              e.stopPropagation();\n              e.dataTransfer.effectAllowed = \"move\";\n              // We'll use nodeKey as the identifier\n              // Only set if item is a data row and has nodeKey\n              if (\n                item.type === \"data\" &&\n                \"nodeKey\" in item &&\n                typeof item.nodeKey === \"string\"\n              ) {\n                // e.dataTransfer.setData(\"dragNodeKey\", item.nodeKey);\n                const selectedNodeKeys = Object.keys(selectedRows).filter(\n                  (key) => selectedRows[key]\n                );\n                const dragKeys =\n                  selectedNodeKeys.length > 0 &&\n                  selectedNodeKeys.includes(item.nodeKey)\n                    ? selectedNodeKeys\n                    : [item.nodeKey];\n                e.dataTransfer.setData(\n                  \"dragNodeKeys\",\n                  JSON.stringify(dragKeys)\n                );\n              }\n            }}\n            onDrop={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              setDragOverRowKey(null);\n              const draggedNodeKey = e.dataTransfer.getData(\"dragNodeKey\");\n              if (\n                !draggedNodeKey ||\n                !(\n                  item.type === \"data\" &&\n                  \"nodeKey\" in item &&\n                  typeof item.nodeKey === \"string\"\n                ) ||\n                draggedNodeKey === item.nodeKey\n              )\n                return;\n              handleTreeRowDrop?.(draggedNodeKey, item.nodeKey);\n\n              const draggedNodeKeysRaw = e.dataTransfer.getData(\"dragNodeKeys\");\n              if (\n                !draggedNodeKeysRaw ||\n                !(\n                  item.type === \"data\" &&\n                  \"nodeKey\" in item &&\n                  typeof item.nodeKey === \"string\"\n                )\n              )\n                return;\n              const draggedNodeKeys: string[] = JSON.parse(draggedNodeKeysRaw);\n              if (draggedNodeKeys.includes(item.nodeKey)) return;\n              handleTreeRowsDrop?.(draggedNodeKeys, item.nodeKey);\n            }}\n            // make the row draggable in TREE data where we've a selected\n            draggable={\n              treeData && rowSelection && !!nodeKey && selectedRows[nodeKey]\n            } // allow drag if selected\n            onDragOver={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n\n              if (\n                item.type === \"data\" &&\n                \"nodeKey\" in item &&\n                typeof item.nodeKey === \"string\"\n              ) {\n                setDragOverRowKey(item.nodeKey);\n              }\n            }}\n          >\n            {rowSelection && (\n              <TableCell key={`checkbox-cell-${rowIndex}`} className=\"w-[50px]\">\n                <div className=\"w-[30px] flex justify-center items-center\">\n                  <Checkbox\n                    // checked={\n                    //   rowIndex !== undefined ? !!selectedRows[rowIndex] : false\n                    // }\n\n                    checked={\n                      treeData && rowSelection.treeSelectChildren\n                        ? item.type === \"data\" &&\n                          \"nodeKey\" in item &&\n                          !!selectedRows[item.nodeKey]\n                        : rowIndex !== undefined && !!selectedRows[rowIndex]\n                    }\n                    // onCheckedChange={(checked: boolean) => {\n                    //   handleRowCheckboxChange(rowIndex, checked);\n                    // }}\n                    onCheckedChange={(checked: boolean) => {\n                      if (treeData && rowSelection.treeSelectChildren) {\n                        if (item.type === \"data\" && \"nodeKey\" in item) {\n                          handleTreeRowCheckboxChange(item.nodeKey, checked);\n                        }\n                      } else {\n                        if (rowIndex !== undefined) {\n                          handleFlatRowCheckboxChange(rowIndex, checked);\n                        }\n                      }\n                    }}\n                    onClick={(e: any) => e.stopPropagation()}\n                    // onClick={(e: { stopPropagation: () => void }) => {\n                    //   e.stopPropagation();\n                    // }}\n                    className={\"border-1 border-gray-400 cursor-pointer\"}\n                  />\n                </div>\n              </TableCell>\n            )}\n            {displayColumns.map((col, colIndex) => {\n              if (isFullRowEditing && col.editable) {\n                return (\n                  <TableCell key={col.field}>\n                    <CellEditor\n                      value={\n                        (editingRowData?.[col.field] ?? row?.[col.field]) as\n                          | string\n                          | number\n                          | boolean\n                          | Date\n                          | null\n                      }\n                      columnDef={{\n                        ...col,\n                        editorType: (col.editorType || \"text\") as EditorType,\n                      }}\n                      onKeyDown={(e) => {\n                        if (e.key === \"Enter\") {\n                          const updatedRow = { ...row, ...editingRowData };\n                          onRowValueChanged?.({ data: updatedRow });\n                          setEditingRowData({});\n                          setEditingRowId(null);\n                        }\n\n                        if (e.key === \"Escape\") {\n                          handleStopEditing();\n                        }\n                      }}\n                      onChange={(value) => {\n                        if (!col || !col.field) return;\n\n                        setEditingRowData((prev) => ({\n                          ...prev,\n                          [col.field]: value,\n                        }));\n                        onCellValueChanged({\n                          value: value,\n                          field: col.field,\n\n                          data: {\n                            ...row,\n                            ...editingRowData,\n                            [col.field]: value,\n                          },\n                        });\n                      }}\n                    />\n                  </TableCell>\n                );\n              }\n\n              const cellRenderer =\n                \"cellRenderer\" in col ? col.cellRenderer : undefined;\n\n              const cellValue = row\n                ? getCellValue(row, col.field, col)\n                : undefined;\n\n              const isEditing =\n                editingCell &&\n                editingCell.rowIndex === rowIndex &&\n                editingCell.field === col.field;\n\n              // Indent first column for treeData\n              if (colIndex === 0 && treeData) {\n                return (\n                  <TableCell\n                    key={`${colIndex}-${col.field}`}\n                    style={{\n                      ...getCellWidth(col),\n                      overflow: \"hidden\",\n                      cursor: col.editable ? \"pointer\" : \"text\",\n                      textWrap: \"initial\",\n                    }}\n                  >\n                    <div\n                      className=\"flex items-center w-full transition-all duration-300 ease-in-out\"\n                      style={{ paddingLeft: `${(indent || 0) * 20}px` }}\n                    >\n                      {expandButton}\n\n                      {/* Row Drag Handle */}\n                      {rowDragManaged && treeData && (\n                        <span\n                          draggable\n                          onDragStart={(e) => {\n                            e.stopPropagation();\n                            e.dataTransfer.effectAllowed = \"move\";\n                            // We'll use nodeKey as the identifier\n                            // Only set if item is a data row and has nodeKey\n                            if (\n                              item.type === \"data\" &&\n                              \"nodeKey\" in item &&\n                              typeof item.nodeKey === \"string\"\n                            ) {\n                              e.dataTransfer.setData(\n                                \"dragNodeKey\",\n                                item.nodeKey\n                              );\n                            }\n                          }}\n                          className=\"cursor-grab mr-2 px-1 py-0.5 rounded hover:bg-gray-200 active:cursor-grabbing\"\n                          title=\"Drag to move\"\n                          tabIndex={-1}\n                          aria-label=\"Drag row\"\n                        >\n                          <GripHorizontal className=\"size-4\" />\n                        </span>\n                      )}\n                      {/* {formatCellValue(cellValue, row || {}, col)}*/}\n                      <span>\n                        {formatCellValue(cellValue, row || {}, col)}\n                        {showChildCount &&\n                          Array.isArray(row?.children) &&\n                          row.children.length > 0 && (\n                            <span className=\"ml-2 text-xs text-gray-500\">\n                              ({row.children.length})\n                            </span>\n                          )}\n                      </span>\n                    </div>\n                  </TableCell>\n                );\n              }\n\n              // If it's the first column and there's master detail, show expand button\n              if (colIndex === 0 && masterDetail) {\n                return (\n                  <TableCell\n                    key={`${colIndex}-${col.field}`}\n                    style={{\n                      ...getCellWidth(col),\n                      overflow: \"hidden\",\n                      cursor: col.editable ? \"pointer\" : \"text\",\n                      textWrap: \"initial\",\n                    }}\n                  >\n                    <div\n                      className=\"flex items-center w-full\"\n                      style={{ paddingLeft: `${(indent || 0) * 20}px` }}\n                    >\n                      {expandButton}\n                      {formatCellValue(cellValue, row || {}, col)}\n                    </div>\n                  </TableCell>\n                );\n              }\n\n              const editorType =\n                \"editorType\" in col ? col.editorType : undefined;\n\n              // Option 2: Custom render for country column\n              if (\n                \"rowGroup\" in col &&\n                col.rowGroup &&\n                enablePivot &&\n                pivotColumns.length > 0\n              ) {\n                // Calculate total medals for this row (sum all number fields except the grouped field)\n                const totalMedals = Object.keys(row || {})\n                  .filter(\n                    (k) =>\n                      k !== col.field &&\n                      typeof row?.[k] === \"number\" &&\n                      !isNaN(row?.[k] as number)\n                  )\n                  .reduce((acc, k) => acc + (Number(row?.[k]) || 0), 0);\n\n                return (\n                  <TableCell\n                    key={col.field}\n                    style={{\n                      ...getCellWidth(col),\n                      overflow: \"hidden\",\n                      cursor: col.editable ? \"pointer\" : \"text\",\n                      textWrap: \"wrap\",\n                      whiteSpace: \"normal\",\n                      wordBreak: \"break-word\",\n                    }}\n                    className={cn(isEditing ? \"p-[0px]\" : \"\")}\n                    onDoubleClick={() => {\n                      if (\n                        !cellRenderer &&\n                        col.editable &&\n                        rowIndex !== undefined &&\n                        editorType !== \"checkbox\" &&\n                        (!(\"rowGroup\" in col) || !col.rowGroup)\n                      ) {\n                        startEditing(rowIndex, col.field, String(cellValue));\n                      }\n                    }}\n                  >\n                    <div>\n                      {String(row?.[col.field])} ({totalMedals})\n                    </div>\n                  </TableCell>\n                );\n              }\n\n              return (\n                <TableCell\n                  key={col.field}\n                  style={{\n                    ...getCellWidth(col),\n                    overflow: \"hidden\",\n                    cursor: col.editable ? \"pointer\" : \"text\",\n                    textWrap: \"wrap\",\n                    whiteSpace: \"normal\",\n                    wordBreak: \"break-word\",\n                  }}\n                  className={cn(isEditing ? \"p-[0px]\" : \"\")}\n                  onDoubleClick={() => {\n                    if (\n                      !cellRenderer &&\n                      col.editable &&\n                      rowIndex !== undefined &&\n                      editorType !== \"checkbox\" &&\n                      (!(\"rowGroup\" in col) || !col.rowGroup)\n                    ) {\n                      startEditing(rowIndex, col.field, String(cellValue));\n                    }\n                  }}\n                >\n                  {cellRenderer ? (\n                    React.createElement(\n                      cellRenderer as React.ComponentType<{\n                        value: unknown;\n                        data: Record<string, unknown> | undefined;\n                        rowIndex: number | undefined;\n                      }>,\n                      {\n                        value: cellValue,\n                        data: row,\n                        rowIndex: rowIndex,\n                      }\n                    )\n                  ) : isEditing && editorType !== \"checkbox\" ? (\n                    <CellEditor\n                      value={editValue}\n                      columnDef={{\n                        editorType: editorType || \"text\",\n                        // editorParams: col.editorParams,\n                        editorParams:\n                          \"editorParams\" in col ? col.editorParams : undefined,\n                      }}\n                      onChange={(value) => handleEditChange(value, editorType)}\n                      onBlur={() => {\n                        // Commit changes\n                        if (\n                          !editingCell &&\n                          editorType !== \"select\" &&\n                          editorType !== \"date\" &&\n                          (editorType as ColumnDef[\"editorType\"]) !== \"checkbox\"\n                        )\n                          return;\n                        const { field } = editingCell;\n                        // const updatedData = col.valueSetter\n                        //   ? col.valueSetter({ value: editValue })\n                        //   : { [field]: editValue };\n\n                        const updatedData =\n                          \"valueSetter\" in col && col.valueSetter\n                            ? col.valueSetter({ value: editValue })\n                            : { [field]: editValue };\n\n                        const newRow = { ...row, ...updatedData };\n                        const idxInAll = gridData.findIndex((r) => r === row);\n                        if (idxInAll !== -1) {\n                          const newData = [...gridData];\n                          newData[idxInAll] = newRow;\n                          const cookedData = getCookedData(newData);\n                          setGridData([...cookedData]);\n                          setHistory((prev) => ({\n                            past: [...prev.past, prev.present],\n                            present: cookedData,\n                            future: [],\n                          }));\n                        }\n                        //For notify parent with new record, previous record and field\n                        if (onDataChange) {\n                          onDataChange(newRow, gridData[rowIndex], field);\n                        }\n                        setEditingCell(null);\n                        setEditValue(\"\");\n                      }}\n                      onKeyDown={(e: React.KeyboardEvent<Element>) => {\n                        if (e.key === \"Enter\" || e.key === \"Escape\") {\n                          (e.currentTarget as HTMLElement).blur();\n                        }\n                      }}\n                    />\n                  ) : editorType === \"checkbox\" && col.editable ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id={`${rowIndex}-${col.field}`}\n                        className=\"cursor-pointer\"\n                        onCheckedChange={(value: boolean) =>\n                          handleEditChangeCheckbox(value, rowIndex!, col.field)\n                        }\n                        checked={cellValue as boolean}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"w-full\">\n                      {\n                        // col.tooltipField\n                        \"tooltipField\" in col && col.tooltipField ? (\n                          <Tooltip>\n                            <TooltipTrigger asChild>\n                              <span>\n                                {col.rowGroup\n                                  ? \"\"\n                                  : formatCellValue(cellValue, row || {}, col)}\n                              </span>\n                            </TooltipTrigger>\n                            <TooltipContent className=\"\">\n                              {(() => {\n                                const tooltipValue = row?.[col.tooltipField];\n                                const result =\n                                  col.tooltipField &&\n                                  tooltipValue != null &&\n                                  tooltipValue !== \"\"\n                                    ? tooltipValue\n                                    : col.rowGroup\n                                      ? \"\"\n                                      : formatCellValue(\n                                          cellValue,\n                                          row || {},\n                                          col\n                                        );\n\n                                return result != null ? String(result) : \"\"; // Ensure it's a valid string or ReactNode\n                              })()}\n                            </TooltipContent>\n                          </Tooltip>\n                        ) : (\n                          formatCellValue(cellValue, row || {}, col)\n                        )\n                      }\n                    </div>\n                  )}\n                </TableCell>\n              );\n            })}\n\n            {addRowConfig &&\n              masterDetail &&\n              Array.isArray(row?.children) &&\n              row.children.length < 1 && (\n                <TableCell\n                  className=\"w-[50px] p-0\"\n                  style={{\n                    verticalAlign: \"middle\",\n                    textAlign: \"center\",\n                  }}\n                >\n                  <button\n                    className=\"cursor-pointer text-green-600 text-lg transition rounded-md flex items-center justify-center w-full h-full\"\n                    title=\"Add child\"\n                    style={{\n                      minHeight: \"40px\",\n                    }}\n                    onClick={() => {\n                      const detailCols =\n                        columnDefs.detailGridOptions?.columns || [];\n                      const emptyChild: Record<string, unknown> = {};\n                      detailCols.forEach((col: any) => {\n                        emptyChild[col.field] = \"\";\n                      });\n                      if (typeof onDataChange === \"function\") {\n                        const updatedRow = {\n                          ...row,\n                          children: [\n                            ...(Array.isArray(row.children)\n                              ? row.children\n                              : []),\n                            emptyChild,\n                          ],\n                        };\n                        onDataChange(updatedRow, row, \"children\");\n                      }\n                      if (typeof rowIndex !== \"undefined\") {\n                        setExpandedRows((prev) => ({\n                          ...prev,\n                          [rowIndex]: true,\n                        }));\n                      }\n                    }}\n                  >\n                    <Plus strokeWidth={1.5} />\n                  </button>\n                </TableCell>\n              )}\n          </TableRow>\n        );\n      }\n\n      // 3) Detail Row\n      if (item.type === \"detail\") {\n        const { parentIndex } = item;\n\n        return (\n          <TableRow\n            key={virtualRow.key}\n            data-index={virtualRow.index}\n            ref={rowVirtualizer.measureElement}\n            style={{\n              position: \"absolute\",\n              transform: `translateY(${virtualRow.start}px)`,\n              width: \"100%\",\n              display: \"table\",\n              tableLayout: \"fixed\",\n              top: 0,\n            }}\n            className=\"hidden\"\n          >\n            <TableCell\n              colSpan={displayColumns.length}\n              style={{\n                padding: 0,\n                backgroundColor: \"white\",\n                position: \"relative\",\n                overflow: \"hidden\",\n                width: \"100%\",\n                zIndex: 30,\n              }}\n            >\n              <div\n                className=\"detail-grid-container\"\n                style={{\n                  padding: \"20px\",\n                  overflow: \"auto\",\n                  position: \"relative\",\n                  backgroundColor: \"white\",\n                  width: \"100%\",\n                  zIndex: 30,\n                }}\n              >\n                {parentIndex !== undefined && detailData[parentIndex] ? (\n                  <div\n                    className=\"h-full w-full datagrid-container\"\n                    style={{\n                      position: \"relative\",\n                      zIndex: 30,\n                      overflow: \"visible\", // Allow dropdowns to overflow\n                    }}\n                  >\n                    <DataGrid\n                      columnDefs={detailGridOptions}\n                      data={detailData[parentIndex]}\n                      isChild={true}\n                      parentRow={item.parentRow} // <-- pass parentRow\n                    />\n                  </div>\n                ) : (\n                  <div className=\"h-full w-full flex items-center justify-center\">\n                    Loading detail data...\n                  </div>\n                )}\n              </div>\n            </TableCell>\n          </TableRow>\n        );\n      }\n\n      return null;\n    };\n\n    // Modify the group drop handler\n    const handleGroupDrop = useCallback(\n      (e: React.DragEvent) => {\n        e.preventDefault();\n        const field = e.dataTransfer.getData(\"columnField\");\n\n        if (enablePivot && !pivotColumns.includes(field)) {\n          setColumnGrouped(field, true);\n        }\n        if (field && !groupedColumns.includes(field)) {\n          setColumnGrouped(field, true);\n        }\n      },\n      [groupedColumns, setColumnGrouped]\n    );\n\n    // // Add this effect to ensure data consistency\n    // useEffect(() => {\n    //   if (data && data.length > 0 && columns.length > 0) {\n    //     setGridData(data);\n    //   }\n    // }, [data, columns]);\n\n    // Add total row calculation\n    const calculateTotals = useMemo(() => {\n      const totals: Record<string, number> = {};\n\n      // Only calculate for numeric columns\n      columns.forEach((col) => {\n        if (col.type === \"number\") {\n          const sum = gridData.reduce((acc, row) => {\n            const value = Number(row[col.field]) || 0;\n            return acc + value;\n          }, 0);\n          totals[col.field] = sum;\n        }\n      });\n\n      return totals;\n    }, [gridData, columns]);\n\n    const getCellWidth = (col: ColumnDef) => {\n      if (tableLayout === \"auto\") {\n        return {\n          width: col.width ? Math.min(col.width, 250) : 220,\n          minWidth: col.width ? Math.min(col.width, 250) : 220,\n          maxWidth: 250,\n        };\n      }\n      return {\n        width: \"intital\",\n      };\n    };\n\n    const renderTotalRow = () => (\n      <div\n        className={`bg-gray-100  ${\n          grandTotalRow === \"bottom\" ? \"sticky bottom-0\" : \"sticky top-0\"\n        }`}\n      >\n        <Table\n          className={`${\n            tableLayout === \"fixed\" ? \"table-fixed\" : \"table-auto\"\n          } border-b border-gray-200`}\n        >\n          <TableBody>\n            <TableRow>\n              {displayColumns.map((col, index) => (\n                <TableCell\n                  key={col.field}\n                  style={{\n                    ...getCellWidth(col),\n                  }}\n                >\n                  {col.type === \"number\" ? (\n                    <div className=\"font-semibold\">\n                      {calculateTotals[col.field]?.toLocaleString()}\n                    </div>\n                  ) : (\n                    <div className=\"font-semibold \">\n                      {index === 0 ? \"Total\" : \"\"}\n                    </div>\n                  )}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableBody>\n        </Table>\n      </div>\n    );\n\n    // Handler for flat (non-tree) row selection\n    const handleFlatRowCheckboxChange = (\n      rowIndex: number | string,\n      checked: boolean\n    ) => {\n      setSelectedRows((prev) => {\n        const updated = { ...prev };\n        if (checked) {\n          updated[rowIndex] = true;\n        } else {\n          delete updated[rowIndex];\n        }\n        return updated;\n      });\n    };\n\n    /**\n     * Handles the selection and deselection of all rows in the DataGrid when the header checkbox is toggled.\n     */\n    const handleHeaderCheckboxChange = (checked: boolean) => {\n      if (rowSelection && rowSelection.mode === \"single\") {\n        // In single mode, header checkbox should select only the first row or deselect all\n        if (checked && gridData.length > 0) {\n          setSelectedRows({ 0: true });\n        } else {\n          setSelectedRows({});\n        }\n        return;\n      }\n      if (checked) {\n        const allSelected: Record<string, boolean> = {};\n        if (treeData && rowSelection?.treeSelectChildren) {\n          // Select all nodeKeys for treeData\n          flattenedRows\n            .filter((item) => item.type === \"data\")\n            .forEach((item) => {\n              allSelected[(item as { nodeKey: string }).nodeKey] = true;\n            });\n        } else {\n          // Flat data: select by index\n          gridData.forEach((__, idx) => {\n            allSelected[idx] = true;\n          });\n        }\n        setSelectedRows(allSelected);\n      } else {\n        setSelectedRows({});\n      }\n    };\n\n    // Add useEffect to call onRowSelectionChange when selectedRows changes\n    // Call getSelectedRows callback with selected data\n    // Update the useEffect for getSelectedRows:\n    useEffect(() => {\n      if (rowSelection && typeof rowSelection?.getSelectedRows === \"function\") {\n        let selectedData: any[] = [];\n        if (treeData && rowSelection.treeSelectChildren) {\n          selectedData = flattenedRows\n            .filter(\n              (\n                item\n              ): item is {\n                type: \"data\";\n                nodeKey: string;\n                row: Record<string, unknown>;\n              } =>\n                item.type === \"data\" &&\n                \"nodeKey\" in item &&\n                !!selectedRows[(item as any).nodeKey]\n            )\n            .map((item) => item.row);\n        } else {\n          selectedData = Object.entries(selectedRows)\n            .filter(([, isSelected]) => isSelected)\n            .map(\n              ([index]) =>\n                data[+index] ||\n                data.find(\n                  (row: any) => row.id === index || row.documentNumber === index\n                )\n            );\n        }\n        rowSelection?.getSelectedRows(selectedData.filter(Boolean));\n      }\n    }, [selectedRows, flattenedRows, treeData, rowSelection, data]);\n\n    // useEffect(() => {\n    //   if (rowSelection && typeof rowSelection?.getSelectedRows === \"function\") {\n    //     const selectedData = Object.entries(selectedRows)\n    //       .filter(([, isSelected]) => isSelected)\n    //       .map(([index]) => data[+index]);\n    //     rowSelection?.getSelectedRows(selectedData);\n    //   }\n    // }, [selectedRows]);\n\n    const [search, setSearch] = useState(\"\");\n    const [sidebarOpen, setSidebarOpen] = useState(false);\n\n    // to exit from the editing mode - full row edit mode\n    const handleStopEditing = useCallback(() => {\n      setEditingRowId(null);\n      setEditingRowData(null);\n    }, [setEditingRowId, setEditingRowData]);\n\n    // to  start editing the second row - full row edit mode\n    // const handleEditSecondRow = useCallback(() => {\n    //   const rowIndex = 1;\n    //   // 2nd row means index 1 (0-based)\n\n    //   const row = gridData[rowIndex];\n    //   if (!row) return;\n    //   setEditingRowId(rowIndex);\n    //   setEditingRowData(row);\n    // }, [gridData, setEditingRowId, setEditingRowData]);\n\n    // Add this above your return statement\n    const aggregationStats = useMemo(() => {\n      if (isServerSide) return [];\n\n      if (!columns || !columns.length || !gridData.length) return {};\n      const stats: Record<string, number> = {};\n\n      columns.forEach((col) => {\n        if (!col.aggFunc) return;\n        // Only use aggSourceField if it's a string, otherwise use col.field\n        const sourceField =\n          typeof col.aggSourceField === \"string\" && col.aggSourceField\n            ? col.aggSourceField\n            : col.field;\n        const values = gridData\n          .map((row) => Number(row[sourceField]))\n          .filter((v) => !isNaN(v));\n        let aggValue = 0;\n        switch (col.aggFunc) {\n          case \"sum\":\n            aggValue = values.reduce((acc, val) => acc + val, 0);\n            break;\n          case \"avg\":\n            aggValue = values.length\n              ? values.reduce((acc, val) => acc + val, 0) / values.length\n              : 0;\n            break;\n          case \"min\":\n            aggValue = values.length ? Math.min(...values) : 0;\n            break;\n          case \"max\":\n            aggValue = values.length ? Math.max(...values) : 0;\n            break;\n          default:\n            aggValue = 0;\n        }\n        stats[col.field] = aggValue;\n      });\n\n      return stats;\n    }, [columns, gridData, isServerSide]);\n\n    // Add keyboard event listener for adding a new row when we have addRowConfig CTRL + A\n    useEffect(() => {\n      if (!addRowConfig || masterDetail) return;\n\n      const handleKeyDown = (e: KeyboardEvent) => {\n        const isCtrlOrMeta = e.ctrlKey || e.metaKey;\n        const isPlusKey = e.key === \"+\" || e.key === \"=\"; // some keyboards require Shift + = for +\n\n        if (isCtrlOrMeta && isPlusKey) {\n          e.preventDefault(); // prevent browser zoom\n          const initial = generateInitialRowData();\n          setNewRowData(initial);\n          setIsAddingRow(true);\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [addRowConfig]);\n\n    // Update the main grid container JSX\n    return (\n      <div className=\"relative w-[100%] h-full\">\n        {/* {editType === \"fullRow\" && fullRowButtons && (\n          <div className=\"gap-2 flex items-center mb-2\">\n            {[\n              {\n                title: \"Start Editing Line 2\",\n                onClick: handleEditSecondRow,\n                hide: gridData?.length < 2,\n              },\n              {\n                title: \"Stop Editing\",\n                onClick: handleStopEditing,\n                hide: false,\n              },\n            ]\n              .filter((btn) => !btn.hide)\n              .map((btn) => (\n                <button\n                  className=\"border px-[12px] py-[5px] cursor-pointer text-[12px] rounded-[6px]\"\n                  onClick={btn.onClick}\n                >\n                  {btn.title}\n                </button>\n              ))}\n          </div>\n        )} */}\n        {/* Loading Overlay */}\n        {loading && (\n          <div className=\"absolute inset-0 bg-white/80 backdrop-blur-sm z-50 flex flex-col items-center justify-center\">\n            <div className=\"text-center\">\n              <PulseLoader color=\"#4f46e5\" size={15} />\n              <p className=\"mt-4 text-gray-600\">{loadingMessage}</p>\n            </div>\n          </div>\n        )}\n        {/* Pivot Columns  */}\n        {/* Pivot panel for managing pivot columns */}\n        {/* Only render if pivotMode is enabled */}\n        {enablePivot && setPivotColumns && (\n          <PivotPanel\n            pivotColumns={\n              serverPivoting && serverPivotCols ? serverPivotCols : pivotColumns\n            }\n            columns={columns}\n            setPivotColumns={\n              serverPivoting && setServerPivotColsFn\n                ? setServerPivotColsFn\n                : setPivotColumns\n            }\n            handlePivotDrop={handlePivotDrop}\n          />\n        )}\n\n        {/* Grand Total Row (Top) */}\n        {gridData.length > 0 && grandTotalRow === \"top\" && renderTotalRow()}\n        <div className=\"flex h-[100%] max-h-[80vh] overflow-y-scroll hide-scrollbar\">\n          {/* Scrollable container for the virtualized rows */}\n          <div\n            style={{\n              overflow: \"auto\",\n              height: \"100%\",\n            }}\n            ref={scrollParentRef}\n          >\n            <Table\n              ref={tableRef}\n              className={cn(\n                \"w-full border-b border-l border-r border-gray-200\"\n              )}\n              style={{\n                tableLayout,\n              }}\n            >\n              {/* Pivoting Start here */}\n              <>\n                {enablePivot &&\n                  pivotDataColumns &&\n                  pivotDataColumns.length !== 0 && (\n                    <thead className=\"bg-indigo-100  w-full\">\n                      {(() => {\n                        const pivotFields = pivotDataColumns.map(\n                          (obj) => Object.keys(obj)[0]\n                        );\n                        const pivotValues = pivotDataColumns.map(\n                          (obj) => Object.values(obj)[0]\n                        );\n\n                        const combinations = pivotValues.reduce(\n                          (acc, values) =>\n                            acc.flatMap((comb) =>\n                              values.map((val) => [...comb, val])\n                            ),\n                          [[]] as any[]\n                        );\n\n                        const activeAggFields = serverPivoting\n                          ? new Set(serverAggCols?.map((def) => def.field))\n                          : new Set(_aggCols?.map((def) => def.field));\n\n                        const metrics = columns.filter(\n                          (col) => col.aggFunc && activeAggFields.has(col.field)\n                        );\n\n                        return (\n                          <>\n                            {/* Each pivot field row */}\n                            {pivotFields.map((pivotField, rowIndex) => {\n                              const repeatFactor =\n                                pivotValues\n                                  .slice(rowIndex + 1)\n                                  .reduce((acc, cur) => acc * cur.length, 1) *\n                                metrics.length;\n\n                              const headerCells: React.JSX.Element[] = [];\n\n                              let lastValue = null;\n\n                              for (\n                                let i = 0;\n                                i < combinations.length * metrics.length;\n                                i += repeatFactor\n                              ) {\n                                const comboIndex = Math.floor(\n                                  i / metrics.length\n                                );\n                                const value =\n                                  combinations[comboIndex][rowIndex];\n\n                                if (value !== lastValue) {\n                                  headerCells.push(\n                                    <th\n                                      key={`${pivotField}-${value}-${i}`}\n                                      colSpan={repeatFactor}\n                                      className=\"text-center border border-gray-200 bg-gray-100 px-4 py-2\"\n                                    >\n                                      {value}\n                                    </th>\n                                  );\n                                  lastValue = value;\n                                }\n                              }\n\n                              return (\n                                <tr key={`${pivotField}-${rowIndex}`}>\n                                  {rowIndex === 0 &&\n                                    groupedColumns.length !== 0 && (\n                                      <th\n                                        rowSpan={pivotFields.length + 1}\n                                        onClick={toggleSortByTotalMedals}\n                                        className=\"cursor-pointer sticky left-0 z-20 border border-gray-200 px-4 py-2 bg-gray-100 \"\n                                      >\n                                        Group\n                                        {sortDirection === \"asc\"\n                                          ? \"↑\"\n                                          : sortDirection === \"desc\"\n                                            ? \"↓\"\n                                            : \"\"}\n                                      </th>\n                                    )}\n                                  {headerCells}\n                                </tr>\n                              );\n                            })}\n\n                            {/* Metrics row */}\n                            <tr>\n                              {combinations.map((_, index) =>\n                                metrics.map((metric) => (\n                                  <th\n                                    key={`metric-${index}-${metric.field}`}\n                                    className=\"text-center border border-gray-200 px-4 py-2 font-normal text-sm text-gray-700\"\n                                  >\n                                    {columnAggFnMap?.[metric.field] || \"sum\"}(\n                                    {metric.headerName || metric.field})\n                                  </th>\n                                ))\n                              )}\n                            </tr>\n                          </>\n                        );\n                      })()}\n                    </thead>\n                  )}\n\n                {/* Pivot table data */}\n                {groupedPivotedData &&\n                  groupedPivotedData.length > 0 &&\n                  enablePivot &&\n                  pivotColumns.length > 0 &&\n                  !(\n                    serverPivoting &&\n                    serverPivotCols &&\n                    serverPivotCols.length < 1\n                  ) && (\n                    <TableBody>\n                      {groupedPivotedData.map((group) => {\n                        return (\n                          <TableRow\n                            key={`${group.groupKey}-${sortDirection}`}\n                            className=\"table-row-pop\"\n                          >\n                            {/* Group Label + Total */}\n\n                            {groupedColumns.length !== 0 && (\n                              <th className=\"text-center border border-gray-200 px-4 py-2 font-normal text-sm text-gray-700\">\n                                {group.groupKey} (\n                                {group.totalMedals?.toLocaleString()})\n                              </th>\n                            )}\n\n                            {/* Only render non-group/pivot columns */}\n                            {group?.children?.flatMap((childRow, childIndex) =>\n                              displayColumns\n                                .filter((col) => {\n                                  const def = columnDefs?.columns?.find(\n                                    (def) => def.field === col.field\n                                  );\n                                  return !def?.rowGroup && !def?.pivot; // Exclude rowGroup & pivot columns\n                                })\n                                .filter((col) =>\n                                  group?.children?.some(\n                                    (row) => row[col.field] !== undefined\n                                  )\n                                )\n                                .map((col) => {\n                                  return (\n                                    <th\n                                      key={`${group.groupKey}-${childIndex}-${col.field}`}\n                                      className=\"text-center border border-gray-200 px-4 py-2 font-normal text-sm text-gray-700\"\n                                    >\n                                      {childRow[col.field]?.toLocaleString()}\n                                    </th>\n                                  );\n                                })\n                            )}\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  )}\n              </>\n              {/* Pivoting End here */}\n\n              <TableHeader className=\"sticky top-0 z-30 bg-gray-200 shadow-sm\">\n                <TableRow className=\"divide-x divide-gray-300\">\n                  {rowSelection && (\n                    <TableHead className=\"w-[50px]\">\n                      <div className=\"w-[30px] flex justify-center items-center\">\n                        {rowSelection.mode === \"multiple\" && (\n                          <Checkbox\n                            checked={\n                              treeData && rowSelection?.treeSelectChildren\n                                ? flattenedRows\n                                    .filter(\n                                      (\n                                        item\n                                      ): item is {\n                                        type: \"data\";\n                                        nodeKey: string;\n                                      } =>\n                                        item.type === \"data\" &&\n                                        \"nodeKey\" in item\n                                    )\n                                    .every((item) => selectedRows[item.nodeKey])\n                                : Object.keys(selectedRows).length > 0 &&\n                                  Object.keys(selectedRows).length ===\n                                    gridData.length\n                            }\n                            data-indeterminate={\n                              treeData && rowSelection?.treeSelectChildren\n                                ? (() => {\n                                    const dataRows = flattenedRows.filter(\n                                      (\n                                        item\n                                      ): item is {\n                                        type: \"data\";\n                                        nodeKey: string;\n                                      } =>\n                                        item.type === \"data\" &&\n                                        \"nodeKey\" in item\n                                    );\n                                    return (\n                                      dataRows.some(\n                                        (item) => selectedRows[item.nodeKey]\n                                      ) &&\n                                      !dataRows.every(\n                                        (item) => selectedRows[item.nodeKey]\n                                      )\n                                    );\n                                  })()\n                                : Object.keys(selectedRows).length > 0 &&\n                                  Object.keys(selectedRows).length <\n                                    gridData.length\n                            }\n                            onCheckedChange={handleHeaderCheckboxChange}\n                            className={\n                              \"border-1 border-gray-400 cursor-pointer\"\n                            }\n                          />\n                        )}\n                      </div>\n                    </TableHead>\n                  )}\n\n                  {/* Column/Table header */}\n                  {(!enablePivot ||\n                    (!serverPivoting && pivotColumns.length < 1) ||\n                    (serverPivoting && !serverPivotCols?.length)) &&\n                    displayColumns.map((col, ind) => {\n                      const isDragged = draggedColumn === col.field;\n                      const isDragOver = dragOverColumn === col.field;\n\n                      return (\n                        <TableHead\n                          key={`${col.field}-${ind}`}\n                          draggable={showGroupByPanel}\n                          className={cn(\"top-0 z-10 transition-colors\", {\n                            \"opacity-50\": isDragged,\n                            \"border-1 border-gray-400\": isDragOver,\n                            \"cursor-move\": showGroupByPanel,\n                          })}\n                          style={{\n                            ...getCellWidth(col),\n                          }}\n                          onDragStart={(e) => {\n                            handleColumnDragStart(e, col.field);\n                            e.dataTransfer.setData(\"columnField\", col.field);\n                          }}\n                          onDragOver={(e) => handleColumnDragOver(e, col.field)}\n                          onDragEnter={handleColumnDragEnter}\n                          onDragLeave={handleColumnDragLeave}\n                          onDrop={(e) => handleColumnDrop(e, col.field)}\n                          onDragEnd={handleColumnDragEnd}\n                        >\n                          <div className=\"w-inherit flex items-center\">\n                            <div className=\"flex-1 flex items-center justify-between w-[85%]\">\n                              <div\n                                className=\"group flex items-center cursor-pointer font-semibold w-full text-gray-700\"\n                                onClick={(e) => handleMultiSort(col.field, e)}\n                              >\n                                <Tooltip>\n                                  <TooltipTrigger asChild>\n                                    <div\n                                      className=\"w-[85%] break-words whitespace-normal\"\n                                      style={{ textWrap: \"initial\" }}\n                                    >\n                                      <p>{col.headerName}</p>\n                                    </div>\n                                  </TooltipTrigger>\n                                  {\n                                    // col.headerTooltip &&\n                                    \"headerTooltip\" in col &&\n                                      col.headerTooltip && (\n                                        <TooltipContent className={\"\"}>\n                                          {col.headerTooltip}\n                                        </TooltipContent>\n                                      )\n                                  }\n                                </Tooltip>\n\n                                <span className=\"ml-1 w-[10%] opacity-0 group-hover:opacity-100 transition-opacity duration-150\">\n                                  {sortConfig.key === col.field ? (\n                                    sortConfig.direction === \"asc\" ? (\n                                      <ChevronUp className=\"h-4 w-4 text-gray-400\" />\n                                    ) : (\n                                      <ChevronDown className=\"h-4 w-4 text-gray-400\" />\n                                    )\n                                  ) : (\n                                    <ChevronsUpDown className=\"h-4 w-4 text-gray-400\" />\n                                  )}\n                                </span>\n                              </div>\n                              {\n                                // col.showFilter !== false &&\n                                \"showFilter\" in col &&\n                                  col.showFilter !== false && (\n                                    <div className=\"relative group\">\n                                      <Popover>\n                                        <PopoverTrigger asChild>\n                                          <div\n                                            className=\"p-1 hover:bg-gray-200 rounded cursor-pointer filter-icon\"\n                                            data-column={col.field}\n                                          >\n                                            <ListFilter\n                                              className={`h-4 w-4 ${\n                                                filters[col.field]\n                                                  ? \"text-blue-500\"\n                                                  : \"text-gray-500\"\n                                              }`}\n                                            />\n                                          </div>\n                                        </PopoverTrigger>\n                                        <PopoverContent className=\"w-auto min-w-[220px] max-w-[250px] p-3 rounded-md shadow-lg bg-white border border-gray-200\">\n                                          <CellFilter\n                                            column={col}\n                                            value={filters[col.field] || \"\"}\n                                            filterType={filterTypes[col.field]}\n                                            onFilterChange={(value) =>\n                                              handleFilterChange(\n                                                col.field,\n                                                value\n                                              )\n                                            }\n                                            onFilterTypeChange={(type) =>\n                                              handleFilterTypeChange(\n                                                col.field,\n                                                type\n                                              )\n                                            }\n                                            onClear={() =>\n                                              handleFilterChange(col.field, \"\")\n                                            }\n                                          />\n                                        </PopoverContent>\n                                      </Popover>\n                                    </div>\n                                  )\n                              }\n                            </div>\n                          </div>\n                        </TableHead>\n                      );\n                    })}\n\n                  {addRowConfig && (\n                    <TableHead\n                      className=\"w-[50px]\"\n                      style={{\n                        paddingLeft: \"12px\",\n                        paddingTop: \"6px\",\n                      }}\n                    >\n                      <Tooltip>\n                        <TooltipTrigger asChild>\n                          <button\n                            className=\"cursor-pointer text-white text-lg hover:bg-[#d3d3d3] transition rounded-md\"\n                            style={{\n                              color: \"#a0a2a4\",\n                            }}\n                            onClick={() => {\n                              const initial = generateInitialRowData();\n                              setNewRowData(initial);\n                              setIsAddingRow(true); // explicitly here instead\n                            }}\n                          >\n                            <Plus strokeWidth={1.5} />\n                          </button>\n                        </TooltipTrigger>\n                        <TooltipContent className=\"\">+ Add Row</TooltipContent>\n                      </Tooltip>\n                    </TableHead>\n                  )}\n                </TableRow>\n              </TableHeader>\n\n              {/* Adding new row in the table start here */}\n              <TableBody>\n                {newRowData && isAddingRow && (\n                  <TableRow className=\"bg-yellow-50\">\n                    {rowSelection && (\n                      <TableCell className=\"w-[50px]\">\n                        <div className=\"w-[30px] flex justify-center items-center\"></div>\n                      </TableCell>\n                    )}\n                    {displayColumns.map((col) => (\n                      <TableCell\n                        key={`new-${col.field}`}\n                        className=\"border-2 py-1\"\n                      >\n                        <CellEditor\n                          columnDef={{\n                            editorType: (col.editorType ||\n                              \"text\") as EditorType, // Default to \"text\"\n\n                            editorParams: col.editorParams,\n                          }}\n                          value={\n                            newRowData[col.field] as\n                              | string\n                              | number\n                              | boolean\n                              | Date\n                              | null\n                          }\n                          onChange={(val) =>\n                            setNewRowData((prev) => ({\n                              ...prev,\n                              [col.field]: val,\n                            }))\n                          }\n                          onKeyDown={(e) => {\n                            if (e.key === \"Enter\") {\n                              const isValid = displayColumns\n                                .filter((c) => !!c.editorType)\n                                .every((col) => {\n                                  const value = newRowData[col.field];\n                                  return (\n                                    value !== null &&\n                                    value !== undefined &&\n                                    value !== \"\"\n                                  );\n                                });\n\n                              if (isValid) {\n                                addRowConfig?.onAdd?.(newRowData, parentRow);\n                                setNewRowData({});\n                                setIsAddingRow(false);\n                              } else {\n                                // Optional: show error UI\n\n                                alert(\n                                  \"Please fill all required fields before saving.\"\n                                );\n                                console.warn(\n                                  \"Please fill all required fields before saving.\"\n                                );\n                              }\n                            }\n\n                            if (e.key === \"Escape\") {\n                              setNewRowData({});\n                              setIsAddingRow(false);\n                            }\n                          }}\n                        />\n                      </TableCell>\n                    ))}\n                    {addRowConfig && (\n                      <TableCell className=\"flex justify-center items-center\">\n                        <button\n                          className=\"cursor-pointer text-white text-lg transition rounded-md\"\n                          style={{\n                            color: \"red\",\n                          }}\n                          onClick={() => {\n                            setNewRowData({});\n                            setIsAddingRow(false);\n                          }}\n                        >\n                          <SquareX strokeWidth={1.5} />\n                        </button>\n                      </TableCell>\n                    )}\n                  </TableRow>\n                )}\n              </TableBody>\n              {/* Adding new row in the table end here */}\n\n              {(!enablePivot ||\n                (!serverPivoting && pivotColumns.length < 1) ||\n                (serverPivoting && !serverPivotCols?.length)) && (\n                <TableBody\n                  style={{\n                    height: `${rowVirtualizer.getTotalSize()}px`,\n                    position: \"relative\",\n                  }}\n                >\n                  {rowVirtualizer\n                    .getVirtualItems()\n                    .map((virtualRow) => renderRow(virtualRow))}\n\n                  {/* If no data: simple fallback */}\n                  {flattenedRows.length === 0 && (\n                    <TableRow className=\"h-24 text-center\">\n                      <TableCell\n                        colSpan={displayColumns.length}\n                        className=\"h-24 text-center\"\n                      >\n                        No results found\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              )}\n            </Table>\n          </div>\n\n          {showGroupByPanel && (\n            <div\n              style={{\n                width: \"auto\",\n                display: \"flex\",\n              }}\n            >\n              {/* Right Sidebar (inside table view) Search, Columns List and grouping */}\n\n              {sidebarOpen && (\n                <ColumnSidebar\n                  columns={columns}\n                  setColumns={setColumns}\n                  search={search}\n                  setSearch={setSearch}\n                  showGroupByPanel={showGroupByPanel}\n                  groupedColumns={groupedColumns}\n                  setColumnGrouped={setColumnGrouped}\n                  handleGroupDrop={handleGroupDrop}\n                  togglePivot={togglePivot}\n                  enablePivot={enablePivot}\n                  setPivotColumns={\n                    serverPivoting && setServerPivotColsFn\n                      ? setServerPivotColsFn\n                      : setPivotColumns\n                  }\n                  pivotColumns={\n                    serverPivoting && serverPivotCols\n                      ? serverPivotCols\n                      : pivotColumns\n                  }\n                  selectedAggFn={selectedAggFn}\n                  columnAggFnMap={columnAggFnMap}\n                  setColumnAggFnMap={setColumnAggFnMap}\n                  handleAggDrop={handleAggDrop}\n                  setAggCols={_setAggCols}\n                  pivotMode={pivotMode}\n                />\n              )}\n\n              {/* Sidebar Toggle Button (when closed) */}\n              <div style={{ height: \"100%\", background: \"#404c58\" }}>\n                <button\n                  onClick={() => setSidebarOpen(!sidebarOpen)}\n                  className=\"px-2 py-1 p-2\"\n                  style={{\n                    cursor: \"pointer\",\n                    writingMode: \"vertical-rl\",\n                    background: sidebarOpen ? \"#2d353d\" : \"#404c58\",\n                    color: \"#ffffff\",\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    gap: \"5px\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    borderBottom: sidebarOpen\n                      ? \"1px solid #848484\"\n                      : \"transparent\",\n                  }}\n                >\n                  <Calendar className=\"w-4 h-4\" />\n                  Columns\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"sticky bottom-0 bg-white\">\n          {/* Grand Total Row (Bottom) */}\n          {gridData.length > 0 &&\n            grandTotalRow === \"bottom\" &&\n            renderTotalRow()}\n        </div>\n\n        {/* For server side pagination */}\n        {isServerSide && pagination && data?.length && (\n          <ServerPagination data={data} paginationProps={pagination} />\n        )}\n\n        {/* For server side aggregation stats */}\n        {isServerSide &&\n          aggregationStats &&\n          Object.keys(aggregationStats).length > 0 && (\n            <>\n              <h2 className=\"my-2 italic\">Aggregation Stats:</h2>\n\n              <ul className=\"flex gap-4 items-center flex-wrap mb-2\">\n                {columns\n                  .filter((col) => !!col.aggFunc)\n                  .map((col) => (\n                    <li key={col.field}>\n                      {col.headerName}:{\" \"}\n                      <span className=\"font-bold\">\n                        {(aggregationStats as Record<string, number>)[\n                          col.field\n                        ]?.toLocaleString(undefined, {\n                          maximumFractionDigits: 2,\n                        })}\n                      </span>\n                    </li>\n                  ))}\n              </ul>\n            </>\n          )}\n      </div>\n    );\n  }\n);\n\nDataGrid.displayName = \"DataGrid\";\n\nexport default DataGrid;\n"],"names":["cn","inputs","_i","arguments","length","twMerge","clsx","Table","React","forwardRef","_a","ref","className","props","__rest","createElement","__assign","displayName","TableHeader","TableBody","TableFooter","TableRow","TableHead","TableCell","TableCaption","Checkbox","CheckboxPrimitive","Root","Indicator","CheckIcon","Input","_b","type","Select","SelectPrimitive","SelectGroup","Group","SelectValue","Value","SelectTrigger","size","children","Trigger","Icon","asChild","ChevronDownIcon","SelectContent","position","Portal","Content","SelectScrollUpButton","Viewport","SelectScrollDownButton","SelectItem","Item","ItemIndicator","ItemText","ScrollUpButton","ChevronUpIcon","ScrollDownButton","buttonVariants","cva","variants","variant","default","destructive","outline","secondary","ghost","link","sm","lg","icon","defaultVariants","Button","Comp","Slot","Popover","PopoverPrimitive","PopoverTrigger","PopoverContent","align","_c","sideOffset","ScrollBar","orientation","ScrollAreaPrimitive","ScrollAreaScrollbar","ScrollAreaThumb","ScrollArea","Corner","AM_VALUE","PM_VALUE","DateTimePicker","value","onChange","renderTrigger","min","max","timezone","hideTime","use12HourFormat","disabled","clearable","classNames","timePicker","modal","useState","open","setOpen","_d","monthYearPicker","setMonthYearPicker","initDate","useMemo","TZDate","Date","_e","month","setMonth","_f","date","setDate","endMonth","setYear","getYear","minDate","undefined","maxDate","onDayChanged","useCallback","d","setHours","getHours","getMinutes","getSeconds","onSubmit","onMonthYearChanged","mode","onNextMonth","addMonths","onPrevMonth","subMonths","useEffect","displayValue","dislayFormat","format","concat","onOpenChange","trigger","tabIndex","CalendarIcon","role","onClick","e","stopPropagation","preventDefault","XCircle","ChevronLeftIcon","ChevronRightIcon","DayPicker","timeZone","selected","onSelect","after","before","filter","Boolean","onMonthChange","dropdowns","months","month_caption","button_previous","button_next","month_grid","weekdays","weekday","week","day","day_button","range_end","today","outside","range_middle","hidden","showOutsideDays","MonthYearPicker","TimePicker","yearRef","useRef","years","i","startY","startOfYear","endY","endOfYear","push","label","toString","startM","startOfMonth","setMonthFns","endM","endOfMonth","onYearChange","v","newDate","getMonth","current","scrollIntoView","behavior","block","map","year","key","formatStr","ampm","setAmpm","hour","setHour","minute","setMinute","second","setSecond","buildTime","_hourIn24h","hours","Array","from","_","hourValue","hDate","hStart","startOfHour","hEnd","endOfHour","padStart","minutes","anchorDate","mDate","setMinutes","mStart","startOfMinute","mEnd","endOfMinute","seconds","setMilliseconds","_min","_max","sDate","setSeconds","ampmOptions","startD","startOfDay","endD","endOfDay","start","addHours","end","subHours","hourRef","minuteRef","secondRef","timeoutId","setTimeout","clearTimeout","onHourChange","newTime","onMinuteChange","onAmpmChange","minH","maxH","display","arr","element","join","Clock","side","TimeItem","option","options","dateStrRaw","dateStr","slice","parse","SimpleTimePicker","TooltipProvider","delayDuration","TooltipPrimitive","Provider","Tooltip","TooltipTrigger","TooltipContent","Arrow","segmentConfigs","symbols","mergeRefs","refs","node","refs_1","DateTimeInput","formatProp","_value","onKeyDownCustom","onKeyDown","rest","form","useFormContext","inputRef","segments","setSegments","selectedSegmentAt","setSelectedSegmentAt","formState","isSubmitted","parseFormat","curSegment","setCurrentSegment","segment","at","findIndex","s","index","validSegments","inputStr","areAllSegmentsEmpty","every","inputValue","allHasValue","some","isValid","getTime","call","useEventCallback","event","selectionStart","validSegments_1","find","__spreadArray","reverse","setSelection","onSegmentChange","direction","onSegmentNumberValueChange","num","shouldNext","length_1","rawValue","parseInt","newValue_1","parsedDate","safeDate","updatedSegments","includes","onSegmentPeriodValueChange","ok","newValue","toLowerCase","onSegmentValueRemove","match","input","isFocused","setIsFocused","onBlur","hideCalendarIcon","onCalendarClick","onFocus","placeholder","spellCheck","CircleCheck","CircleAlert","views","lastPattern","patternIndex","c","pattern","p","formatStr_1","isAndroid","test","navigator","userAgent","safeSetSelection","selectionEnd","requestAnimationFrame","document","activeElement","setSelectionRange","fn","deps","useIsomorphicLayoutEffect","args","apply","useLayoutEffect","TextEditor","autoFocus","target","NumberEditor","step","focus","handleKeyDown","indexOf","keyCode","ctrlKey","inputMode","String","val","numVal","Number","SelectEditor","onValueChange","defaultOpen","opt","DateEditor","handleDateSelect","selectedDate","handleDayKeyDown","onDayKeyDown","_params","TimeEditor","timeNow","handleTimeChange","moment","CellEditor","columnDef","valueFormatter","editorType","editorParams","typedParams","editors","text","number","select","time","dateTime","Editor","editorProps","additionalProps","Fragment","Switch","SwitchPrimitive","Thumb","useCookedData","columnDefs","getCookedSingleRow","row","columns","parentData","updatedRow","col","valueGetter","computedValue","data","field","processChildRow","childRow","parentRow","cookedChild","detailGridOptions","forEach","cookedRow","getCookedRow","isArray","getCookedData","IsDateType","IsTimeType","IsDateTimeType","GetDefaultFilterType","GetAvailableFilterTypes","CellFilter","column","filterType","onFilterChange","onFilterTypeChange","onClear","availableFilterTypes","defaultFilterType","headerName","X","toISOString","style","height","fontSize","width","paddingLeft","paddingRight","left","top","bottom","alignItems","pointerEvents","Search","ServerPagination","paginationProps","_g","paginationPageSize","_h","paginationPageSizeSelector","paginationInfo","onPageChange","onPageSizeChange","handlePageChange","page","handlePageSizeChange","pageSize","currentPage","totalPages","toLocaleString","totalCount","ChevronFirst","ChevronLeft","ChevronRight","ChevronLast","GroupPanel","showGroupByPanel","groupedColumns","setColumnGrouped","handleGroupDrop","onDragOver","dataTransfer","dropEffect","onDrop","ind","GripHorizontal","ColumnSidebar","setColumns","search","setSearch","enablePivot","togglePivot","pivotColumns","setPivotColumns","selectedAggFn","columnAggFnMap","setColumnAggFnMap","handleAggDrop","setAggCols","pivotMode","aggregationOptions","aggColumns","item","aggFunc","pivot","removeFromAggregation","columnField","prev","updated","newAggCols","Object","entries","updatedMap","visible","backgroundColor","color","padding","borderLeft","flexDirection","maxHeight","overflowY","overflowX","borderBottom","borderWidth","borderColor","cursor","checked","onCheckedChange","marginLeft","gap","isDraggable","draggable","onDragStart","setData","cols","f","Sigma","fontWeight","aggFn","border","borderRadius","marginBottom","idx","flexShrink","List","PivotPanel","handlePivotDrop","applyPivotAgg","Math","pivotAndAggregateByGroup","groupBy","allowedNumericFields","Set","def","cleanedData","newRow","isNumeric","has","result","groupMap","Map","groupByValues","pivotValuesMap","allCombinations","generateCombinations","keys","prefix","first","groupValue","groupKey","pivotKey","set","childrenMap","totalAggregations","avgTracking","totalMedalsRaw","groupEntry","get","rawMedalSum","sum","count","isCount","newRow_1","fromEntries","childSum_1","totalMedals","existingRow_1","childSum_2","groupByValues_1","combo","k","newRow_2","allCombinations_1","columnDefs_1","stats","total","values","reduce","buildTreeData","flatData","treeDataChildrenField","getDataPath","root_1","pathMap_1","path","parent","currentPath","name","idMap_1","root_2","id","parentId","parent_1","flattenTree","nodes","expanded","level","rowIndexRef","parentPath","flat","currentIndex","nodeName","nodePath","nodeKey","rowIndex","indent","addAggregations","aggregatedCount","provided","child","computeAggregationsForTree","tree","getAllDescendantNodeKeys","getParentNodeKey","parts","split","findNodeByNodeKey","flattenedRows","moveTreeNode","sourcePath","targetPath","deepClone","obj","JSON","stringify","clonedTree","removeNode","n","splice","insertNode","nodeToMove","filterTreeData","filterFn","childrenField","filteredChildren","DataGrid","onDataChange","loading","loadingMessage","onRowClick","isChild","rowSelection","pagination","rowModelType","onSortChange","sortModel","onRowGroup","serverPivoting","editType","onCellValueChanged","onRowValueChanged","treeData","_j","groupDefaultExpanded","rowDragManaged","onRowDragEnd","showChildCount","addRowConfig","_k","treeExpandedRows","setTreeExpandedRows","_l","dragOverRowKey","setDragOverRowKey","_m","treeInit","setTreeInit","_o","editingRowId","setEditingRowId","_p","editingRowData","setEditingRowData","_q","isAddingRow","setIsAddingRow","_r","newRowData","setNewRowData","generateInitialRowData","initial","_s","serverPivotedData","serverPivotDataColumns","serverPivotCols","setServerPivotColsFn","setServerGroupedColsFn","setServerGroupedCols","setServerAggColsFn","serverAggCols","isServerSide","_t","setEnablePivot","defaultPivotColumns","_u","_v","_columnDefs","_setColumnDefs","_w","sortDirection","setSortDirection","toggleSortByTotalMedals","_x","aggCols","_y","_aggCols","_setAggCols","getData","groupByField","rowGroup","fromMap","groupedPivotedData","grouped","sort","a","b","getPivotDataColumns","pivotDataColumns","_z","propColumns","_0","masterDetail","_1","_2","getDetailRowData","_3","aggFuncs","_4","grandTotalRow","_5","tableLayout","_6","gridData","setGridData","_7","_8","sortConfig","setSortConfig","_9","filters","setFilters","_10","filterTypes","setFilterTypes","_11","debouncedFilters","setDebouncedFilters","_12","setGroupedColumns","_13","expandedGroups","setExpandedGroups","_14","selectedRows","setSelectedRows","handleTreeRowCheckboxChange","allKeys","parentKey","allChildrenKeys","allSelected","_15","draggedColumn","setDraggedColumn","_16","dragOverColumn","setDragOverColumn","columnDragCounter","tableRef","_17","editingCell","setEditingCell","_18","editValue","setEditValue","_19","expandedRows","setExpandedRows","_20","detailData","setDetailData","debouncedFnRef","debouncedSetFilters","newFilters","cancel","debounce","_21","past","present","future","history","setHistory","canUndo","canRedo","undo","newPast","newPresent","newFuture","redo","metaKey","shiftKey","window","addEventListener","removeEventListener","useImperativeHandle","div","assign","resetSelection","cookedData","requiresAggregation","firstItem_1","extracted","charAt","toUpperCase","replace","editable","groupedCols","nonGroupedCols","initialGroupedColumns","toggleTreeRowExpand","initialExpanded_1","getNodeKey_1","expandAll_1","expandLevels_1","levels","handleFilterChange","filterModel_1","handleFilterTypeChange","filteredData","cellValue","filterValue","numValue","filterNum","dateValue","filterDate","toDateString","cellString","filterString","startsWith","endsWith","filtered","handleSort","currentSort","colName","direction_1","newSortModel","sorted","aValue","bValue","handleMultiSort","handleColumnDragStart","effectAllowed","handleColumnDragOver","handleColumnDragEnter","handleColumnDragLeave","handleColumnDrop","targetField","sourceIndex","targetIndex","newCols","moved","handleColumnDragEnd","startEditing","handleEditChange","idxInAll","r","previousRecord","newData","cookedData_1","handleEditChangeCheckbox","cookedData_2","toggleRowExpand","newState","row_1","old","successCallback","detail","rowIndexStr","toggleGroupExpand","newGrouped","newColumns","groupedColumn","filteredColumns","calculateAggregation","acc","groupedData","isGroup","groupFields","groupData","rows","groupsMap","gVal","gKey","originalChildren","aggregations","groupObj","flatList","dataToRender","walkGroups_1","groups","indentLevel","parentIndex","group","groupIndex","groupField","itemCount","absoluteIndex","scrollParentRef","rowVirtualizer","useVirtualizer","getScrollElement","estimateSize","detailRows","calculatedHeight","useAnimationFrameWithResizeObserver","overscan","handleTreeRowDrop","draggedNodeKey","targetNodeKey","draggedItem","targetItem","descendantKeys","newTree","draggedRow","targetRow","displayColumns","aggSourceField","nonGrouped","getCellValue","formatCellValue","isNaN","toLocaleDateString","handleTreeRowsDrop","draggedNodeKeys","draggedRowsArr","draggedRows","renderRow","virtualRow","isExpanded_1","groupColumn_1","measureElement","transform","colIndex","isGroupColumn","getCellWidth","textWrap","overflow","ChevronDown","toFixed","round","row_2","indent_1","rowIndex_1","hasChildren","isExpanded","expandButton_1","nodeKey_1","isFullRowEditing_1","onDragLeave","selectedNodeKeys","dragKeys","draggedNodeKeysRaw","treeSelectChildren","handleFlatRowCheckboxChange","handleStopEditing","cellRenderer","isEditing","title","whiteSpace","wordBreak","onDoubleClick","updatedData","valueSetter","cookedData_3","currentTarget","blur","tooltipField","tooltipValue","verticalAlign","textAlign","minHeight","detailCols","emptyChild","Plus","strokeWidth","colSpan","zIndex","calculateTotals","totals","minWidth","maxWidth","renderTotalRow","handleHeaderCheckboxChange","allSelected_1","__","getSelectedRows","selectedData","isSelected","documentNumber","_22","_23","sidebarOpen","setSidebarOpen","aggregationStats","sourceField","aggValue","isCtrlOrMeta","isPlusKey","PulseLoader","pivotFields","pivotValues","combinations","flatMap","comb","activeAggFields","metrics","pivotField","repeatFactor","cur","headerCells","lastValue","comboIndex","floor","rowSpan","metric","childIndex","dataRows","isDragged","isDragOver","onDragEnter","onDragEnd","headerTooltip","ChevronUp","ChevronsUpDown","showFilter","ListFilter","paddingTop","onAdd","alert","console","warn","SquareX","getTotalSize","getVirtualItems","background","writingMode","justifyContent","Calendar","maximumFractionDigits"],"mappings":"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","x_google_ignoreList":[10]}